{"version":3,"sources":["model/LocalStorageKey.tsx","model/Mode.tsx","action/actions.tsx","select/simpleSelectors.tsx","action/saveGameThunk.tsx","action/nextPlayerAndSaveThunk.tsx","action/newGameThunk.tsx","comp/BagComp.tsx","model/FieldKind.tsx","select/selectField.tsx","select/selectHand.tsx","select/selectHandTile.tsx","comp/AspectComp.tsx","comp/TileComp.tsx","comp/BoardComp.tsx","action/selectFieldThunk.tsx","select/selectWinners.tsx","select/selectIsGameDrawn.tsx","select/selectWinnersNames.tsx","comp/PlayersComp.tsx","fun/numberToSignedString.tsx","comp/GameEndedComp.tsx","comp/HandComp.tsx","select/selectHandCount.tsx","fun/getHandValue.tsx","select/selectEmptyHandBonus.tsx","select/selectPlayerBonuses.tsx","action/endGameThunk.tsx","fun/getWordString.tsx","fun/isWordStringValid.tsx","model/Constants.tsx","model/MoveError.tsx","model/Direction.tsx","fun/getNextFieldIndex.tsx","fun/getColumnIndex.tsx","fun/getColumnLine.tsx","fun/getRowIndex.tsx","fun/getRowLine.tsx","fun/getWordFromLine.tsx","fun/getWordsAt.tsx","select/selectWordInfo.tsx","fun/isThereAGap.tsx","select/selectAllOwnedWords.tsx","select/selectMoveErrors.tsx","fun/getWordScore.tsx","select/selectIsBingo.tsx","select/selectValidAndInvalidWords.tsx","select/selectMoveScore.tsx","comp/PlaceTileButtonsComp.tsx","action/doneThunk.tsx","action/skipThunk.tsx","comp/ReplaceTilesButtonsComp.tsx","comp/WordInfoComp.tsx","comp/AppComp.tsx","fun/savedGameExists.tsx","action/loadGameThunk.tsx","model/AppState.tsx","model/Board.tsx","model/Bag.tsx","model/Hands.tsx","model/Player.tsx","model/HandIndicesToReplace.tsx","model/State.tsx","serviceWorker.ts","index.tsx"],"names":["LocalStorageKey","Mode","setGame","createAction","collectTiles","disownTiles","fillHand","nextPlayer","resetGame","score","selectField","selectHand","setJokerLetter","setMode","setPlayerName","swapHandAndBoard","swapHands","swapTiles","toggleHandIndexToReplace","removeTilesToReplaceFromHand","deselectTilesToReplace","addTilesToBag","incrementSkipCount","resetSkipCount","scoreBonuses","type","a","payload","selectBoardFromAppState","state","board","selectBoardFromState","app","selectBagFromState","bag","selectHandsFromAppState","hands","selectHandsFromState","selectModeFromAppState","mode","selectModeFromState","selectHandIndicesToReplaceFromState","handIndicesToReplace","selectPlayersFromAppState","players","selectPlayersFromState","selectPlayerIndexFromAppState","playerIndex","selectHandIndexFromAppState","handIndex","selectHandIndexFromState","selectFieldIndexFromAppState","fieldIndex","selectFieldIndexFromState","selectStartingHandCountFromAppState","startingHandCount","saveGameThunk","dispatch","getState","localStorage","SavedGame","JSON","stringify","e","console","error","nextPlayerAndSaveThunk","newGameThunk","names","map","player","name","forEach","PlaceTile","BagComp","_ref","react","className","concat","length","FieldKind","selectFieldFromAppState","createSelector","isUndefinedOrNull","selectFieldFromState","s","selectHandFromAppState","selectHandTileFromAppState","hand","selectHandTileFromState","AspectComp","width","height","children","viewBox","TileComp","tile","neverOwned","AspectComp_AspectComp","isOwned","isJoker","filter","Boolean","join","letter","BoardComp","connect","field","aFieldIndex","key","fieldKindToCssClass","kind","onClick","fieldIndexToSelect","handTile","oldField","fieldToSelect","get","fieldIndexA","fieldIndexB","TileComp_TileComp","k","Normal","DoubleLetter","DoubleWord","Start","TripleLetter","TripleWord","Error","fieldKindToLabel","selectWinnersFromAppState","Ended","winningScore","winners","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","push","err","return","selectIsGameDrawnFromAppState","selectIsGameDrawnFromState","selectWinnersNamesFromAppState","winnerNames","winner","last","rest","slice","selectWinnersNamesFromState","PlayersComp","playerBonuses","isEnabled","aPlayerIndex","prompt","trim","n","GameEndedComp","isGameDrawn","winnerName","PlayersComp_PlayersComp","HandComp","isNullOrUndefined","aHandIndex","ReplaceTiles","handIndexA","handIndexB","selectHandCountFromAppState","reduce","sum","selectHandCountFromState","getHandValue","memoizee","max","selectEmptyHandBonusFromAppState","selectPlayerBonusesFromAppState","emptyHandBonus","isNull","selectPlayerBonusesFromState","endGameThunk","getWordString","word","_","isWordStringValid","w","words","indexOf","MoveError","Direction","BOARD_SIZE","CENTER_FIELD_INDEX","getFieldIndexOffset","direction","Horizontal","getColumnIndex","getColumnLine","columnIndex","column","rowIndex","getRowIndex","Math","floor","getRowLine","firstFieldIndex","getWordFromLine","line","lineIndex","index","startLineIndex","endLineIndex","unshift","getWordsAt","horizontal","vertical","selectWordInfo","defaultMemoize","lastFieldIndex","colIndex","newColIndex","newRowIndex","Vertical","_getWordsAt","startFieldIndex","endFieldIndex","isThereAGap","selectWordInfoFromAppState","selectAllOwnedWords","_selectWordInfo","mainWord","selectAllOwnedWordsFromAppState","selectMoveErrors","errors","Set","add","NoTile","size","OneTile","NoDirection","touchesStart","touchesUnowned","InvalidWord","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","NoStart","NoConnection","Array","from","selectMoveErrorsFromState","getWordScore","wordMulti","tileScore","selectIsBingoFromAppState","handCount","selectIsBingoFromState","selectValidAndInvalidWordsFromAppState","valid","invalid","selectMoveScoreFromAppState","isBingo","PlaceTileButtonsComp","moveScore","moveErrors","disabled","window","confirm","skipCount","onChange","target","letters","ReplaceTilesButtonsComp","tilesToReplace","tiles","WordInfoComp","_ref$words","wordString","href","encodeURIComponent","rel","replace","AppComp","BoardComp_BoardComp","NotStarted","savedGame","parse","game","BagComp_BagComp","HandComp_HandComp","WordInfoComp_WordInfoComp","PlaceTileButtonsComp_PlaceTileButtonsComp","createAppState","split","flatMap","row","withInterface","count","range","appStateReducer","produce","action","i","shift","min","splice","random","_action$payload","_action$payload2","tileOnBoard","tileInHand","_action$payload3","tileA","tileB","_action$payload4","fieldATile","fieldBTile","fill","_state$bag","apply","Object","toConsumableArray","stateReducer","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","__webpack_require__","d","__webpack_exports__","store","configureStore","reducer","ReactDOM","render","react_default","createElement","es","AppComp_AppComp","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0b10f38c.chunk.js","sourcesContent":["export enum LocalStorageKey {\n\tSavedGame = 'game',\n}\n","export enum Mode {\n\tNotStarted = 'NotStarted',\n\tPlaceTile = 'PlaceTile',\n\tReplaceTiles = 'ReplaceTiles',\n\tEnded = 'Ended',\n}\n","import { Mode } from '../model/Mode'\nimport { IState } from '../model/State'\nimport { ITile } from '../model/Tile'\n\nexport const setGame = createAction<'setGame', { game: IState }>('setGame')\nexport const collectTiles = createAction<'collectTiles'>('collectTiles')\nexport const disownTiles = createAction<'disownTiles'>('disownTiles')\nexport const fillHand = createAction<'fillHand'>('fillHand')\nexport const nextPlayer = createAction<'nextPlayer'>('nextPlayer')\nexport const resetGame = createAction<'resetGame'>('resetGame')\nexport const score = createAction<'score'>('score')\nexport const selectField = createAction<\n\t'selectField',\n\t{ fieldIndex: number | null }\n>('selectField')\nexport const selectHand = createAction<\n\t'selectHand',\n\t{ handIndex: number | null }\n>('selectHand')\nexport const setJokerLetter = createAction<\n\t'setJokerLetter',\n\t{ letter: string }\n>('setJokerLetter')\nexport const setMode = createAction<'setMode', Mode>('setMode')\nexport const setPlayerName = createAction<\n\t'setPlayerName',\n\t{\n\t\tplayerIndex: number\n\t\tname: string\n\t}\n>('setPlayerName')\nexport const swapHandAndBoard = createAction<\n\t'swapHandAndBoard',\n\t{\n\t\tfieldIndex: number\n\t\thandIndex: number\n\t}\n>('swapHandAndBoard')\nexport const swapHands = createAction<\n\t'swapHands',\n\t{\n\t\thandIndexA: number\n\t\thandIndexB: number\n\t}\n>('swapHands')\nexport const swapTiles = createAction<\n\t'swapTiles',\n\t{\n\t\tfieldIndexA: number\n\t\tfieldIndexB: number\n\t}\n>('swapTiles')\nexport const toggleHandIndexToReplace = createAction<\n\t'toggleHandIndexToReplace',\n\t{\n\t\thandIndex: number\n\t}\n>('toggleHandIndexToReplace')\nexport const removeTilesToReplaceFromHand = createAction<\n\t'removeTilesToReplaceFromHand'\n>('removeTilesToReplaceFromHand')\nexport const deselectTilesToReplace = createAction<'deselectTilesToReplace'>(\n\t'deselectTilesToReplace',\n)\nexport const addTilesToBag = createAction<'addTilesToBag', { tiles: ITile[] }>(\n\t'addTilesToBag',\n)\nexport const incrementSkipCount = createAction<'incrementSkipCount'>(\n\t'incrementSkipCount',\n)\nexport const resetSkipCount = createAction<'resetSkipCount'>('resetSkipCount')\nexport const scoreBonuses = createAction<'scoreBonuses', ReadonlyArray<number>>(\n\t'scoreBonuses',\n)\n\nfunction createAction<T extends string, P = void>(type: T) {\n\tconst a = (payload: P) => ({ type, payload })\n\ta.type = type\n\treturn a\n}\n","import { IAppState } from '../model/AppState'\nimport { TBag } from '../model/Bag'\nimport { TBoard } from '../model/Board'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport { TPlayers } from '../model/Player'\nimport { IState } from '../model/State'\n\nexport const selectBoardFromAppState = (state: IAppState): TBoard => state.board\nexport const selectBoardFromState = (state: IState): TBoard =>\n\tselectBoardFromAppState(state.app)\nexport const selectBagFromState = (state: IState): TBag => state.app.bag\nexport const selectHandsFromAppState = (state: IAppState): THands => state.hands\nexport const selectHandsFromState = (state: IState): THands =>\n\tselectHandsFromAppState(state.app)\nexport const selectModeFromAppState = (state: IAppState): Mode => state.mode\nexport const selectModeFromState = (state: IState): Mode =>\n\tselectModeFromAppState(state.app)\nexport const selectHandIndicesToReplaceFromState = (\n\tstate: IState,\n): THandIndicesToReplace => state.app.handIndicesToReplace\nexport const selectPlayersFromAppState = (state: IAppState): TPlayers =>\n\tstate.players\nexport const selectPlayersFromState = (state: IState) =>\n\tselectPlayersFromAppState(state.app)\nexport const selectPlayerIndexFromAppState = (state: IAppState) =>\n\tstate.playerIndex\nexport const selectPlayerIndexFromState = (state: IState) =>\n\tselectPlayerIndexFromAppState(state.app)\nexport const selectHandIndexFromAppState = (state: IAppState) => state.handIndex\nexport const selectHandIndexFromState = (state: IState) =>\n\tselectHandIndexFromAppState(state.app)\nexport const selectFieldIndexFromAppState = (state: IAppState) =>\n\tstate.fieldIndex\nexport const selectFieldIndexFromState = (state: IState) =>\n\tselectFieldIndexFromAppState(state.app)\nexport const selectStartingHandCountFromAppState = (state: IAppState) =>\n\tstate.startingHandCount\nexport const selectStartingHandCountFromState = (state: IState) =>\n\tselectStartingHandCountFromAppState(state.app)\n","import { LocalStorageKey } from '../model/LocalStorageKey'\nimport { ThunkValue } from './ThunkValue'\n\nexport function saveGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\ttry {\n\t\t\tlocalStorage[LocalStorageKey.SavedGame] = JSON.stringify(getState())\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t}\n\t}\n}\n","import { nextPlayer } from './actions'\nimport { saveGameThunk } from './saveGameThunk'\nimport { ThunkValue } from './ThunkValue'\n\nexport function nextPlayerAndSaveThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tdispatch(nextPlayer())\n\t\tdispatch(saveGameThunk())\n\t}\n}\n","import {\n\tfillHand,\n\tnextPlayer,\n\tresetGame,\n\tsetMode,\n\tsetPlayerName,\n} from './actions'\nimport { Mode } from '../model/Mode'\nimport { selectPlayersFromState } from '../select/simpleSelectors'\nimport { nextPlayerAndSaveThunk } from './nextPlayerAndSaveThunk'\nimport { ThunkValue } from './ThunkValue'\n\nexport function newGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst state = getState()\n\t\tconst players = selectPlayersFromState(state)\n\t\tconst names = players.map(player => player.name)\n\t\tdispatch(resetGame())\n\t\tnames.forEach((name, playerIndex) => {\n\t\t\tdispatch(\n\t\t\t\tsetPlayerName({\n\t\t\t\t\tplayerIndex,\n\t\t\t\t\tname,\n\t\t\t\t}),\n\t\t\t)\n\t\t})\n\t\tdispatch(nextPlayer())\n\t\tdispatch(fillHand())\n\t\tdispatch(nextPlayer())\n\t\tdispatch(fillHand())\n\t\tdispatch(setMode(Mode.PlaceTile))\n\t\tdispatch(nextPlayerAndSaveThunk())\n\t}\n}\n","import * as React from 'react'\nimport { TBag } from '../model/Bag'\nimport './BagComp.css'\n\nexport function BagComp({ bag }: { bag: TBag }) {\n\treturn <div className='bag'>{`Lapkák a zsákban: ${bag.length}`}</div>\n}\n","export enum FieldKind {\n\tNormal = '-',\n\tStart = 's',\n\tDoubleLetter = 'l',\n\tTripleLetter = 'L',\n\tDoubleWord = 'w',\n\tTripleWord = 'W',\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport {\n\tselectBoardFromAppState,\n\tselectFieldIndexFromAppState,\n} from './simpleSelectors'\n\nexport const selectFieldFromAppState = createSelector(\n\t[selectBoardFromAppState, selectFieldIndexFromAppState],\n\t(board, fieldIndex) => {\n\t\treturn isUndefinedOrNull(fieldIndex) ? null : board[fieldIndex]\n\t},\n)\nexport const selectFieldFromState = (s: IState) =>\n\tselectFieldFromAppState(s.app)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport {\n\tselectHandsFromAppState,\n\tselectPlayerIndexFromAppState,\n} from './simpleSelectors'\n\nexport const selectHandFromAppState = createSelector(\n\t[selectHandsFromAppState, selectPlayerIndexFromAppState],\n\t(hands, playerIndex) => {\n\t\treturn isUndefinedOrNull(playerIndex) ? null : hands[playerIndex]\n\t},\n)\n\nexport const selectHandFromState = (s: IState) => selectHandsFromAppState(s.app)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport { selectHandFromAppState } from './selectHand'\nimport { selectHandIndexFromAppState } from './simpleSelectors'\n\nexport const selectHandTileFromAppState = createSelector(\n\t[selectHandFromAppState, selectHandIndexFromAppState],\n\t(hand, handIndex) => {\n\t\treturn hand && !isUndefinedOrNull(handIndex) ? hand[handIndex] : null\n\t},\n)\n\nexport const selectHandTileFromState = (state: IState) =>\n\tselectHandTileFromAppState(state.app)\n","import * as React from 'react'\nimport './AspectComp.css'\n\nexport function AspectComp({\n\twidth,\n\theight,\n\tchildren,\n}: React.PropsWithChildren<{\n\twidth: number\n\theight: number\n}>) {\n\treturn (\n\t\t<div className='aspect'>\n\t\t\t<svg viewBox={`0 0 ${width} ${height}`} />\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n","import * as React from 'react'\nimport { ITile } from '../model/Tile'\nimport { AspectComp } from './AspectComp'\nimport './TileComp.css'\n\nexport function TileComp({\n\ttile,\n\tneverOwned,\n}: {\n\ttile: ITile\n\tneverOwned?: boolean\n}) {\n\treturn (\n\t\t<AspectComp width={1} height={1}>\n\t\t\t<div\n\t\t\t\tclassName={[\n\t\t\t\t\t'tile',\n\t\t\t\t\t!neverOwned && tile.isOwned && 'is-owned',\n\t\t\t\t\ttile.isJoker && 'is-joker',\n\t\t\t\t]\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.join(' ')}\n\t\t\t>\n\t\t\t\t<div className='tile-letter'>{tile.letter}</div>\n\t\t\t\t<div className='tile-score'>{tile.score}</div>\n\t\t\t</div>\n\t\t</AspectComp>\n\t)\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { selectFieldThunk } from '../action/selectFieldThunk'\nimport { TBoard } from '../model/Board'\nimport { FieldKind } from '../model/FieldKind'\nimport { IState } from '../model/State'\nimport { selectBoardFromState } from '../select/simpleSelectors'\nimport { AspectComp } from './AspectComp'\nimport './BoardComp.css'\nimport { DispatchProp } from './DispatchProp'\nimport { TileComp } from './TileComp'\n\ninterface BoardCompPropsFromState {\n\tfieldIndex: number | null\n\tboard: TBoard\n}\nexport interface BoardCompProps extends BoardCompPropsFromState, DispatchProp {}\n\nexport const BoardComp = connect(\n\t(state: IState): BoardCompPropsFromState => ({\n\t\tboard: selectBoardFromState(state),\n\t\tfieldIndex: state.app.fieldIndex,\n\t}),\n)(({ fieldIndex, board, dispatch }: BoardCompProps) => {\n\treturn (\n\t\t<div className='board'>\n\t\t\t{board.map((field, aFieldIndex) => (\n\t\t\t\t<AspectComp key={aFieldIndex} width={1} height={1}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t'board-field',\n\t\t\t\t\t\t\tfieldKindToCssClass(field.kind),\n\t\t\t\t\t\t\taFieldIndex === fieldIndex && 'is-selected',\n\t\t\t\t\t\t]\n\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\tdispatch(selectFieldThunk(aFieldIndex))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{field.tile ? (\n\t\t\t\t\t\t\t<TileComp tile={field.tile} />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tfieldKindToLabel(field.kind)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</AspectComp>\n\t\t\t))}\n\t\t</div>\n\t)\n})\n\nfunction fieldKindToCssClass(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn 'is-normal'\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn 'is-double-letter'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn 'is-double-word'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'is-start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn 'is-triple-letter'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn 'is-triple-word'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp03n]: ${k}`)\n\t}\n}\n\nfunction fieldKindToLabel(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn ' '\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn '2×\\nBetű'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn '2×\\nSzó'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'Start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn '3×\\nBetű'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn '3×\\nSzó'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp079]: ${k}`)\n\t}\n}\n","import { get } from 'illa/FunctionUtil'\nimport { isUndefinedOrNull } from 'illa/Type'\nimport { selectField, swapHandAndBoard, swapTiles } from './actions'\nimport { Mode } from '../model/Mode'\nimport { selectFieldFromState } from '../select/selectField'\nimport { selectHandTileFromState } from '../select/selectHandTile'\nimport {\n\tselectBoardFromState,\n\tselectFieldIndexFromState,\n\tselectHandIndexFromState,\n\tselectModeFromState,\n} from '../select/simpleSelectors'\nimport { ThunkValue } from './ThunkValue'\n\nexport function selectFieldThunk(fieldIndexToSelect: number): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst state = getState()\n\t\tconst mode = selectModeFromState(state)\n\t\tif (mode !== Mode.PlaceTile) return\n\t\tconst handTile = selectHandTileFromState(state)\n\t\tconst oldField = selectFieldFromState(state)\n\t\tconst fieldToSelect = selectBoardFromState(state)[fieldIndexToSelect]\n\t\tif (!fieldToSelect.tile || fieldToSelect.tile.isOwned) {\n\t\t\tif (handTile) {\n\t\t\t\tdispatch(\n\t\t\t\t\tswapHandAndBoard({\n\t\t\t\t\t\thandIndex: selectHandIndexFromState(state)!,\n\t\t\t\t\t\tfieldIndex: fieldIndexToSelect,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tif (fieldToSelect === oldField) {\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\tselectField({\n\t\t\t\t\t\t\tfieldIndex: null,\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisUndefinedOrNull(oldField) ||\n\t\t\t\t\t\t(!get(() => oldField!.tile!.isOwned) &&\n\t\t\t\t\t\t\t!get(() => fieldToSelect.tile!.isOwned))\n\t\t\t\t\t) {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tselectField({\n\t\t\t\t\t\t\t\tfieldIndex: fieldToSelect.tile\n\t\t\t\t\t\t\t\t\t? fieldIndexToSelect\n\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tswapTiles({\n\t\t\t\t\t\t\t\tfieldIndexA: selectFieldIndexFromState(state)!,\n\t\t\t\t\t\t\t\tfieldIndexB: fieldIndexToSelect,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tdispatch(selectField({ fieldIndex: null }))\n\t\t}\n\t}\n}\n","import { createSelector } from 'reselect'\nimport { Mode } from '../model/Mode'\nimport { IPlayer } from '../model/Player'\nimport { IState } from '../model/State'\nimport {\n\tselectModeFromAppState,\n\tselectPlayersFromAppState,\n} from './simpleSelectors'\n\nexport const selectWinnersFromAppState = createSelector(\n\t[selectPlayersFromAppState, selectModeFromAppState],\n\t(players, mode) => {\n\t\tif (mode !== Mode.Ended) return []\n\t\tlet winningScore = -1\n\t\tlet winners: IPlayer[] = []\n\t\tfor (let player of players) {\n\t\t\tif (player.score > winningScore) {\n\t\t\t\twinningScore = player.score\n\t\t\t\twinners = [player]\n\t\t\t} else if (player.score === winningScore) {\n\t\t\t\twinners.push(player)\n\t\t\t}\n\t\t}\n\t\treturn winners\n\t},\n)\n\nexport const selectWinnersFromState = (state: IState) =>\n\tselectWinnersFromAppState(state.app)\n","import { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport { selectWinnersFromAppState } from './selectWinners'\nimport { selectPlayersFromAppState } from './simpleSelectors'\n\nexport const selectIsGameDrawnFromAppState = createSelector(\n\t[selectPlayersFromAppState, selectWinnersFromAppState],\n\t(players, winners) => {\n\t\treturn players.length === winners.length\n\t},\n)\n\nexport const selectIsGameDrawnFromState = (state: IState) =>\n\tselectIsGameDrawnFromAppState(state.app)\n","import { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport { selectWinnersFromAppState } from './selectWinners'\n\nexport const selectWinnersNamesFromAppState = createSelector(\n\t[selectWinnersFromAppState],\n\twinners => {\n\t\tif (winners.length === 0) return ``\n\t\tconst winnerNames = winners.map(winner => winner.name)\n\t\tconst last = winnerNames[winnerNames.length - 1]\n\t\tconst rest = winnerNames.slice(0, winnerNames.length - 1)\n\t\treturn rest.length ? `${rest.join(', ')} és ${last}` : last\n\t},\n)\n\nexport const selectWinnersNamesFromState = (state: IState) =>\n\tselectWinnersNamesFromAppState(state.app)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { setPlayerName } from '../action/actions'\nimport { saveGameThunk } from '../action/saveGameThunk'\nimport { numberToSignedString } from '../fun/numberToSignedString'\nimport { TPlayers } from '../model/Player'\nimport { IState } from '../model/State'\nimport { selectPlayersFromState } from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\nimport './PlayersComp.css'\n\nexport interface PlayersCompPropsFromStore {\n\tplayers: TPlayers\n\tplayerIndex: number | null\n\tplayerBonuses: ReadonlyArray<number> | null\n}\nexport interface PlayersCompProps\n\textends PlayersCompPropsFromStore,\n\t\tDispatchProp {\n\tisEnabled?: boolean\n}\n\nexport const PlayersComp = connect(\n\t(state: IState): PlayersCompPropsFromStore => ({\n\t\tplayers: selectPlayersFromState(state),\n\t\tplayerIndex: state.app.playerIndex,\n\t\tplayerBonuses: state.app.playerBonuses,\n\t}),\n)(\n\t({\n\t\tplayers,\n\t\tplayerIndex,\n\t\tplayerBonuses,\n\t\tdispatch,\n\t\tisEnabled,\n\t}: PlayersCompProps) => {\n\t\treturn (\n\t\t\t<table className='players'>\n\t\t\t\t<tbody>\n\t\t\t\t\t{players.map((player, aPlayerIndex) => (\n\t\t\t\t\t\t<tr className='player' key={aPlayerIndex}>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{isEnabled ? (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName='player-name-button'\n\t\t\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\t\t\tconst name = prompt(`Mi a neved?`)\n\t\t\t\t\t\t\t\t\t\t\tif (name && name.trim()) {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetPlayerName({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayerIndex: aPlayerIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: name.trim(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch(saveGameThunk())\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{player.name}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\tplayer.name\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t{isEnabled && (\n\t\t\t\t\t\t\t\t<td>{aPlayerIndex === playerIndex && `•`}</td>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{player.score}\n\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t{playerBonuses && (\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div className='player-bonus'>\n\t\t\t\t\t\t\t\t\t\t{numberToSignedString(\n\t\t\t\t\t\t\t\t\t\t\tplayerBonuses[aPlayerIndex],\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t)\n\t},\n)\n","export function numberToSignedString(n: number) {\n\tif (n >= 0) return `+${n}`\n\telse return n + ''\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { newGameThunk } from '../action/newGameThunk'\nimport { Mode } from '../model/Mode'\nimport { IState } from '../model/State'\nimport { selectIsGameDrawnFromState } from '../select/selectIsGameDrawn'\nimport { selectWinnersNamesFromState } from '../select/selectWinnersNames'\nimport { selectModeFromState } from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\nimport { PlayersComp } from './PlayersComp'\n\nexport interface GameEndedCompPropsFromStore {\n\tmode: Mode\n\twinnerName: string\n\tisGameDrawn: boolean\n}\nexport interface GameEndedCompProps\n\textends GameEndedCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const GameEndedComp = connect(\n\t(state: IState): GameEndedCompPropsFromStore => ({\n\t\tmode: selectModeFromState(state),\n\t\tisGameDrawn: selectIsGameDrawnFromState(state),\n\t\twinnerName: selectWinnersNamesFromState(state),\n\t}),\n)(({ dispatch, mode, winnerName, isGameDrawn }: GameEndedCompProps) => {\n\treturn (\n\t\t<>\n\t\t\t<div>{isGameDrawn ? `Döntetlen!` : `${winnerName} győzött!`}</div>\n\t\t\t<PlayersComp />\n\t\t\t<button\n\t\t\t\tonClick={e => {\n\t\t\t\t\tdispatch(newGameThunk())\n\t\t\t\t}}\n\t\t\t>{`Új játék`}</button>\n\t\t</>\n\t)\n})\n","import { get } from 'illa/FunctionUtil'\nimport { isUndefinedOrNull } from 'illa/Type'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { isNullOrUndefined } from 'util'\nimport {\n\tselectHand,\n\tswapHandAndBoard,\n\tswapHands,\n\ttoggleHandIndexToReplace,\n} from '../action/actions'\nimport { TBoard } from '../model/Board'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport { IState } from '../model/State'\nimport {\n\tselectBoardFromState,\n\tselectHandIndicesToReplaceFromState,\n\tselectHandsFromState,\n\tselectModeFromState,\n} from '../select/simpleSelectors'\nimport { AspectComp } from './AspectComp'\nimport { DispatchProp } from './DispatchProp'\nimport './HandComp.css'\nimport { TileComp } from './TileComp'\n\ninterface HandCompPropsFromState {\n\thands: THands\n\tplayerIndex: number | null\n\thandIndex: number | null\n\tboard: TBoard\n\tfieldIndex: number | null\n\tmode: Mode\n\thandIndicesToReplace: THandIndicesToReplace\n}\nexport interface HandCompProps extends HandCompPropsFromState, DispatchProp {}\n\nexport const HandComp = connect(\n\t(state: IState): HandCompPropsFromState => ({\n\t\thands: selectHandsFromState(state),\n\t\tplayerIndex: state.app.playerIndex,\n\t\thandIndex: state.app.handIndex,\n\t\tfieldIndex: state.app.fieldIndex,\n\t\tboard: selectBoardFromState(state),\n\t\thandIndicesToReplace: selectHandIndicesToReplaceFromState(state),\n\t\tmode: selectModeFromState(state),\n\t}),\n)(\n\t({\n\t\tboard,\n\t\tdispatch,\n\t\tfieldIndex,\n\t\thandIndex,\n\t\thandIndicesToReplace,\n\t\thands,\n\t\tmode,\n\t\tplayerIndex,\n\t}: HandCompProps) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{!isNullOrUndefined(playerIndex) && (\n\t\t\t\t\t<div className='hand'>\n\t\t\t\t\t\t{hands[playerIndex].map((tile, aHandIndex) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={aHandIndex}\n\t\t\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t\t\t'hand-slot',\n\t\t\t\t\t\t\t\t\thandIndex === aHandIndex && 'is-selected',\n\t\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex] &&\n\t\t\t\t\t\t\t\t\t\t'is-to-be-replaced',\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tif (mode === Mode.ReplaceTiles) {\n\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\ttoggleHandIndexToReplace({\n\t\t\t\t\t\t\t\t\t\t\t\thandIndex: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tget(() => board[fieldIndex!].tile)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\tswapHandAndBoard({\n\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfieldIndex: fieldIndex!,\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (handIndex === aHandIndex) {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\tselectHand({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tisUndefinedOrNull(handIndex)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectHand({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: hands[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayerIndex!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t][aHandIndex]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? aHandIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswapHands({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexA: handIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexB: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<AspectComp width={1} height={1}>\n\t\t\t\t\t\t\t\t\t{tile && (\n\t\t\t\t\t\t\t\t\t\t<TileComp tile={tile} neverOwned />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</AspectComp>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</>\n\t\t)\n\t},\n)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport { selectHandFromAppState } from './selectHand'\n\nexport const selectHandCountFromAppState = createSelector(\n\t[selectHandFromAppState],\n\thand =>\n\t\t(hand || []).reduce(\n\t\t\t(sum, tile) => sum + (isUndefinedOrNull(tile) ? 0 : 1),\n\t\t\t0,\n\t\t),\n)\n\nexport const selectHandCountFromState = (state: IState) =>\n\tselectHandCountFromAppState(state.app)\n","import memoizee from 'memoizee'\nimport { THand } from '../model/Hands'\n\nexport const getHandValue = memoizee(\n\t(hand: THand) => {\n\t\treturn hand.reduce((sum, tile) => sum + (tile ? tile.score : 0), 0)\n\t},\n\t{ max: 2 },\n)\n","import { createSelector } from 'reselect'\nimport { getHandValue } from '../fun/getHandValue'\nimport { IState } from '../model/State'\nimport { selectHandsFromAppState } from './simpleSelectors'\n\nexport const selectEmptyHandBonusFromAppState = createSelector(\n\t[selectHandsFromAppState],\n\thands => {\n\t\treturn hands.reduce((sum, hand) => sum + getHandValue(hand), 0)\n\t},\n)\n\nexport const selectEmptyHandBonusFromState = (state: IState) =>\n\tselectEmptyHandBonusFromAppState(state.app)\n","import { createSelector } from 'reselect'\nimport { isNull } from 'util'\nimport { getHandValue } from '../fun/getHandValue'\nimport { IState } from '../model/State'\nimport { selectEmptyHandBonusFromAppState } from './selectEmptyHandBonus'\nimport { selectHandsFromAppState } from './simpleSelectors'\n\nexport const selectPlayerBonusesFromAppState = createSelector(\n\t[selectHandsFromAppState, selectEmptyHandBonusFromAppState],\n\t(hands, emptyHandBonus) => {\n\t\treturn hands.map(hand => {\n\t\t\tif (hand.filter(isNull).length === 7) {\n\t\t\t\treturn emptyHandBonus\n\t\t\t} else {\n\t\t\t\treturn -getHandValue(hand)\n\t\t\t}\n\t\t})\n\t},\n)\n\nexport const selectPlayerBonusesFromState = (state: IState) =>\n\tselectPlayerBonusesFromAppState(state.app)\n","import { Mode } from '../model/Mode'\nimport { selectPlayerBonusesFromState } from '../select/selectPlayerBonuses'\nimport { scoreBonuses, setMode } from './actions'\nimport { ThunkValue } from './ThunkValue'\n\nexport function endGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst state = getState()\n\t\tdispatch(scoreBonuses(selectPlayerBonusesFromState(state)))\n\t\tdispatch(setMode(Mode.Ended))\n\t}\n}\n","import { IField } from '../model/Field'\n\nexport function getWordString(word: ReadonlyArray<IField>): string {\n\treturn word.map(_ => _.tile!.letter).join('')\n}\n","import words from '../res/words.json'\n\nexport function isWordStringValid(w: string): boolean {\n\treturn words.indexOf(w) >= 0\n}\n","export const BOARD_SIZE = 15\nexport const CENTER_FIELD_INDEX = BOARD_SIZE * 7 + 7\nexport const BINGO_SCORE = 50\n","export enum MoveError {\n\tNoTile,\n\tOneTile,\n\tNoDirection,\n\tNoStart,\n\tNoConnection,\n\tInvalidWord,\n}\n","export enum Direction {\n\tHorizontal,\n\tVertical,\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\n\nexport function getFieldIndexOffset(direction: Direction) {\n\treturn direction === Direction.Horizontal ? 1 : BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\n\nexport function getColumnIndex(fieldIndex: number) {\n\treturn fieldIndex % BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\n\nexport function getColumnLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst columnIndex = getColumnIndex(fieldIndex)\n\tconst column: IField[] = []\n\tfor (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n\t\tcolumn.push(board[rowIndex * BOARD_SIZE + columnIndex])\n\t}\n\treturn column\n}\n","import { BOARD_SIZE } from '../model/Constants'\n\nexport function getRowIndex(fieldIndex: number) {\n\treturn Math.floor(fieldIndex / BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getRowIndex } from './getRowIndex'\n\nexport function getRowLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst firstFieldIndex = getRowIndex(fieldIndex) * BOARD_SIZE\n\treturn board.slice(firstFieldIndex, firstFieldIndex + BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\n\nexport function getWordFromLine(\n\tline: ReadonlyArray<IField>,\n\tlineIndex: number,\n) {\n\tconst word: IField[] = []\n\tlet index = lineIndex\n\tlet startLineIndex = lineIndex\n\tlet endLineIndex = lineIndex\n\twhile (index >= 0) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.unshift(field)\n\t\tstartLineIndex = index\n\t\tindex--\n\t}\n\tindex = lineIndex + 1\n\twhile (index < BOARD_SIZE) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.push(field)\n\t\tendLineIndex = index\n\t\tindex++\n\t}\n\treturn {\n\t\tword: word.length > 1 ? word : [],\n\t\tstartLineIndex,\n\t\tendLineIndex,\n\t}\n}\n","import { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\nimport { getColumnLine } from './getColumnLine'\nimport { getRowIndex } from './getRowIndex'\nimport { getRowLine } from './getRowLine'\nimport { getWordFromLine } from './getWordFromLine'\n\nexport function getWordsAt(board: ReadonlyArray<IField>, fieldIndex: number) {\n\treturn {\n\t\thorizontal: getWordFromLine(\n\t\t\tgetRowLine(board, fieldIndex),\n\t\t\tgetColumnIndex(fieldIndex),\n\t\t),\n\t\tvertical: getWordFromLine(\n\t\t\tgetColumnLine(board, fieldIndex),\n\t\t\tgetRowIndex(fieldIndex),\n\t\t),\n\t}\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { defaultMemoize } from 'reselect'\nimport { getColumnIndex } from '../fun/getColumnIndex'\nimport { getRowIndex } from '../fun/getRowIndex'\nimport { getWordsAt } from '../fun/getWordsAt'\nimport { isThereAGap } from '../fun/isThereAGap'\nimport { IAppState } from '../model/AppState'\nimport { TBoard } from '../model/Board'\nimport { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\nimport { IState } from '../model/State'\n\nexport interface IWordInfo {\n\tfirstFieldIndex: number | null\n\tlastFieldIndex: number | null\n\tdirection: Direction | null\n}\n\nexport const selectWordInfo = defaultMemoize(\n\t(board: TBoard): IWordInfo => {\n\t\tlet firstFieldIndex: number | null = null\n\t\tlet lastFieldIndex: number | null = null\n\t\tlet colIndex: number | null = null\n\t\tlet rowIndex: number | null = null\n\t\tlet direction: Direction | null = null\n\n\t\tfor (let fieldIndex = 0; fieldIndex < board.length; fieldIndex++) {\n\t\t\tconst field = board[fieldIndex]\n\t\t\tif (field.tile && field.tile.isOwned) {\n\t\t\t\tif (isUndefinedOrNull(colIndex)) {\n\t\t\t\t\t// First field\n\t\t\t\t\tfirstFieldIndex = fieldIndex\n\t\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t\t\tcolIndex = getColumnIndex(fieldIndex)\n\t\t\t\t\trowIndex = getRowIndex(fieldIndex)\n\t\t\t\t} else {\n\t\t\t\t\tconst newColIndex = getColumnIndex(fieldIndex)\n\t\t\t\t\tconst newRowIndex = getRowIndex(fieldIndex)\n\t\t\t\t\tif (lastFieldIndex === firstFieldIndex) {\n\t\t\t\t\t\t// Second field\n\t\t\t\t\t\tif (colIndex === newColIndex) {\n\t\t\t\t\t\t\tdirection = Direction.Vertical\n\t\t\t\t\t\t} else if (rowIndex === newRowIndex) {\n\t\t\t\t\t\t\tdirection = Direction.Horizontal\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Third+ field\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(direction === Direction.Vertical &&\n\t\t\t\t\t\t\t\tcolIndex !== newColIndex) ||\n\t\t\t\t\t\t\t(direction === Direction.Horizontal &&\n\t\t\t\t\t\t\t\trowIndex !== newRowIndex)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdirection = null\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcolIndex = newColIndex\n\t\t\t\t\trowIndex = newRowIndex\n\t\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isUndefinedOrNull(firstFieldIndex)) {\n\t\t\tconst { horizontal, vertical } = getWordsAt(board, firstFieldIndex)\n\t\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\t\tif (horizontal.word.length) {\n\t\t\t\t\tdirection = Direction.Horizontal\n\t\t\t\t} else if (vertical.word.length) {\n\t\t\t\t\tdirection = Direction.Vertical\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (direction === Direction.Horizontal) {\n\t\t\t\tfirstFieldIndex =\n\t\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\t\thorizontal.startLineIndex\n\t\t\t\tlastFieldIndex =\n\t\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\t\thorizontal.endLineIndex\n\t\t\t} else if (direction === Direction.Vertical) {\n\t\t\t\tfirstFieldIndex =\n\t\t\t\t\tvertical.startLineIndex * BOARD_SIZE +\n\t\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t\t\tlastFieldIndex =\n\t\t\t\t\tvertical.endLineIndex * BOARD_SIZE +\n\t\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t\t!isUndefinedOrNull(direction) &&\n\t\t\tisThereAGap(board, firstFieldIndex, lastFieldIndex, direction)\n\t\t) {\n\t\t\tdirection = null\n\t\t}\n\t\treturn {\n\t\t\tfirstFieldIndex,\n\t\t\tlastFieldIndex,\n\t\t\tdirection,\n\t\t}\n\t},\n)\n\nexport const selectWordInfoFromAppState = (state: IAppState) =>\n\tselectWordInfo(state.board)\nexport const selectWordInfoFromState = (state: IState) =>\n\tselectWordInfoFromAppState(state.app)\n","import { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { getFieldIndexOffset } from './getNextFieldIndex'\n\nexport function isThereAGap(\n\tboard: ReadonlyArray<IField>,\n\tstartFieldIndex: number,\n\tendFieldIndex: number,\n\tdirection: Direction,\n) {\n\tfor (\n\t\tlet fieldIndex = startFieldIndex;\n\t\tfieldIndex <= endFieldIndex;\n\t\tfieldIndex += getFieldIndexOffset(direction)\n\t) {\n\t\tif (!board[fieldIndex].tile) return true\n\t}\n\treturn false\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { defaultMemoize } from 'reselect'\nimport { getFieldIndexOffset } from '../fun/getNextFieldIndex'\nimport { getWordsAt } from '../fun/getWordsAt'\nimport { IAppState } from '../model/AppState'\nimport { TBoard } from '../model/Board'\nimport { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { IState } from '../model/State'\nimport { selectWordInfo } from './selectWordInfo'\n\nexport const selectAllOwnedWords = defaultMemoize(\n\t(board: TBoard): IField[][] => {\n\t\tconst { firstFieldIndex, lastFieldIndex, direction } = selectWordInfo(\n\t\t\tboard,\n\t\t)\n\t\tconst words: IField[][] = []\n\t\tlet mainWord: IField[] | null = null\n\t\tif (\n\t\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t\t!isUndefinedOrNull(direction)\n\t\t) {\n\t\t\tlet fieldIndex = firstFieldIndex\n\t\t\tlet field = board[fieldIndex]\n\t\t\twhile (field && field.tile) {\n\t\t\t\tif (field.tile.isOwned) {\n\t\t\t\t\tconst { horizontal, vertical } = getWordsAt(\n\t\t\t\t\t\tboard,\n\t\t\t\t\t\tfieldIndex,\n\t\t\t\t\t)\n\t\t\t\t\tif (direction === Direction.Horizontal) {\n\t\t\t\t\t\twords.push(vertical.word)\n\t\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t\t// words.push(word.horizontal)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmainWord = horizontal.word\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twords.push(horizontal.word)\n\t\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t\t// words.push(word.vertical)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmainWord = vertical.word\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfieldIndex += getFieldIndexOffset(direction)\n\t\t\t\tif (fieldIndex > lastFieldIndex) break\n\t\t\t\tfield = board[fieldIndex]\n\t\t\t}\n\t\t}\n\t\tif (mainWord) words.push(mainWord)\n\t\treturn words.filter(_ => _.length > 0)\n\t},\n)\n\nexport const selectAllOwnedWordsFromAppState = (s: IAppState) =>\n\tselectAllOwnedWords(s.board)\nexport const selectAllOwnedWordsFromState = (s: IState) =>\n\tselectAllOwnedWordsFromAppState(s.app)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { getWordString } from '../fun/getWordString'\nimport { isWordStringValid } from '../fun/isWordStringValid'\nimport { CENTER_FIELD_INDEX } from '../model/Constants'\nimport { FieldKind } from '../model/FieldKind'\nimport { MoveError } from '../model/MoveError'\nimport { IState } from '../model/State'\nimport { selectAllOwnedWordsFromAppState } from './selectAllOwnedWords'\nimport { selectWordInfoFromAppState } from './selectWordInfo'\nimport { selectBoardFromAppState } from './simpleSelectors'\n\nexport const selectMoveErrors = createSelector(\n\t[\n\t\tselectBoardFromAppState,\n\t\tselectAllOwnedWordsFromAppState,\n\t\tselectWordInfoFromAppState,\n\t],\n\t(board, words, { firstFieldIndex, lastFieldIndex, direction }) => {\n\t\tconst errors: Set<MoveError> = new Set()\n\t\tif (isUndefinedOrNull(firstFieldIndex)) {\n\t\t\terrors.add(MoveError.NoTile)\n\t\t}\n\t\tif (errors.size === 0) {\n\t\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\t\terrors.add(MoveError.OneTile)\n\t\t\t}\n\t\t\tif (errors.size === 0) {\n\t\t\t\tif (isUndefinedOrNull(direction)) {\n\t\t\t\t\terrors.add(MoveError.NoDirection)\n\t\t\t\t}\n\t\t\t\tif (errors.size === 0) {\n\t\t\t\t\tlet touchesStart = false\n\t\t\t\t\tlet touchesUnowned = false\n\t\t\t\t\tfor (const word of words) {\n\t\t\t\t\t\tif (!isWordStringValid(getWordString(word))) {\n\t\t\t\t\t\t\terrors.add(MoveError.InvalidWord)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const field of word) {\n\t\t\t\t\t\t\tif (field.kind === FieldKind.Start) {\n\t\t\t\t\t\t\t\ttouchesStart = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (field.tile && !field.tile.isOwned) {\n\t\t\t\t\t\t\t\ttouchesUnowned = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isUndefinedOrNull(board[CENTER_FIELD_INDEX].tile)) {\n\t\t\t\t\t\terrors.add(MoveError.NoStart)\n\t\t\t\t\t} else if (!touchesUnowned && !touchesStart) {\n\t\t\t\t\t\terrors.add(MoveError.NoConnection)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Array.from(errors)\n\t},\n)\n\nexport const selectMoveErrorsFromState = (s: IState) => selectMoveErrors(s.app)\n","import { IField } from '../model/Field'\nimport { FieldKind } from '../model/FieldKind'\n\nexport function getWordScore(word: ReadonlyArray<IField>): number {\n\tlet wordMulti = 1\n\treturn (\n\t\tword.reduce((sum, field) => {\n\t\t\tconst tile = field.tile\n\t\t\tlet tileScore = 0\n\t\t\tif (tile) {\n\t\t\t\ttileScore = tile.score\n\t\t\t\tif (tile.isOwned) {\n\t\t\t\t\tswitch (field.kind) {\n\t\t\t\t\t\tcase FieldKind.DoubleLetter:\n\t\t\t\t\t\t\ttileScore *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleLetter:\n\t\t\t\t\t\t\ttileScore *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.Start:\n\t\t\t\t\t\tcase FieldKind.DoubleWord:\n\t\t\t\t\t\t\twordMulti *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleWord:\n\t\t\t\t\t\t\twordMulti *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sum + tileScore\n\t\t}, 0) * wordMulti\n\t)\n}\n","import { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport { selectHandCountFromAppState } from './selectHandCount'\nimport { selectStartingHandCountFromAppState } from './simpleSelectors'\n\nexport const selectIsBingoFromAppState = createSelector(\n\t[selectStartingHandCountFromAppState, selectHandCountFromAppState],\n\t(startingHandCount, handCount) => {\n\t\treturn startingHandCount === 7 && handCount === 0\n\t},\n)\n\nexport const selectIsBingoFromState = (state: IState) =>\n\tselectIsBingoFromAppState(state.app)\n","import { createSelector } from 'reselect'\nimport { getWordString } from '../fun/getWordString'\nimport { isWordStringValid } from '../fun/isWordStringValid'\nimport { IField } from '../model/Field'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { IState } from '../model/State'\nimport { selectAllOwnedWordsFromAppState } from './selectAllOwnedWords'\n\nexport const selectValidAndInvalidWordsFromAppState = createSelector(\n\t[selectAllOwnedWordsFromAppState],\n\t(words: IField[][]): IValidAndInvalidWords => {\n\t\tconst valid: IField[][] = []\n\t\tconst invalid: IField[][] = []\n\t\tfor (let word of words) {\n\t\t\tif (isWordStringValid(getWordString(word))) {\n\t\t\t\tvalid.push(word)\n\t\t\t} else {\n\t\t\t\tinvalid.push(word)\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tvalid,\n\t\t\tinvalid,\n\t\t}\n\t},\n)\n\nexport const selectValidAndInvalidWordsFromState = (s: IState) =>\n\tselectValidAndInvalidWordsFromAppState(s.app)\n","import { createSelector } from 'reselect'\nimport { getWordScore } from '../fun/getWordScore'\nimport { BINGO_SCORE } from '../model/Constants'\nimport { IState } from '../model/State'\nimport { selectIsBingoFromAppState } from './selectIsBingo'\nimport { selectValidAndInvalidWordsFromAppState } from './selectValidAndInvalidWords'\n\nexport const selectMoveScoreFromAppState = createSelector(\n\t[selectValidAndInvalidWordsFromAppState, selectIsBingoFromAppState],\n\t(words, isBingo): number => {\n\t\tlet score = 0\n\t\tfor (let word of words.valid) {\n\t\t\tscore += getWordScore(word)\n\t\t}\n\t\tif (words.valid.length && isBingo) score += BINGO_SCORE\n\t\treturn score\n\t},\n)\n\nexport const selectMoveScoreFromState = (s: IState) =>\n\tselectMoveScoreFromAppState(s.app)\n","import { get } from 'illa/FunctionUtil'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { collectTiles, setJokerLetter, setMode } from '../action/actions'\nimport { doneThunk } from '../action/doneThunk'\nimport { newGameThunk } from '../action/newGameThunk'\nimport { skipThunk } from '../action/skipThunk'\nimport { TBag } from '../model/Bag'\nimport { TBoard } from '../model/Board'\nimport { Mode } from '../model/Mode'\nimport { MoveError } from '../model/MoveError'\nimport { IState } from '../model/State'\nimport letters from '../res/letters.json'\nimport { selectMoveErrorsFromState } from '../select/selectMoveErrors'\nimport { selectMoveScoreFromState } from '../select/selectMoveScore'\nimport {\n\tselectBagFromState,\n\tselectBoardFromState,\n} from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\nimport './PlaceTileButtonsComp.css'\n\ninterface PlaceTileButtonsCompPropsFromStore {\n\tboard: TBoard\n\tfieldIndex: number | null\n\tbag: TBag\n\tmoveScore: number\n\tmoveErrors: MoveError[]\n}\nexport interface PlaceTileButtonsCompProps\n\textends PlaceTileButtonsCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const PlaceTileButtonsComp = connect(\n\t(state: IState): PlaceTileButtonsCompPropsFromStore => ({\n\t\tbag: selectBagFromState(state),\n\t\tboard: selectBoardFromState(state),\n\t\tfieldIndex: state.app.fieldIndex,\n\t\tmoveScore: selectMoveScoreFromState(state),\n\t\tmoveErrors: selectMoveErrorsFromState(state),\n\t}),\n)(\n\t({\n\t\tboard,\n\t\tfieldIndex,\n\t\tbag,\n\t\tmoveScore,\n\t\tmoveErrors,\n\t\tdispatch,\n\t}: PlaceTileButtonsCompProps) => {\n\t\treturn (\n\t\t\t<div className='buttons'>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={moveErrors.length > 0}\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(doneThunk())\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Oké`}\n\t\t\t\t\t{moveScore > 0 && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{`: `}\n\t\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\t\t{moveScore}\n\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Szedd össze`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={bag.length < 7}\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t\tdispatch(setMode(Mode.ReplaceTiles))\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Csere`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tif (window.confirm(`Biztos hogy nem teszel semmit?`)) {\n\t\t\t\t\t\t\tdispatch(skipThunk())\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Kihagyom`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\twindow.confirm(\n\t\t\t\t\t\t\t\t`Biztos hogy új játékot akarsz kezdeni?`,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdispatch(newGameThunk())\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Új játék`}\n\t\t\t\t</button>\n\t\t\t\t{get(() => board[fieldIndex!].tile!.isJoker) && (\n\t\t\t\t\t<select\n\t\t\t\t\t\tvalue={board[fieldIndex!].tile!.letter}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tdispatch(setJokerLetter({ letter: e.target.value }))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{letters.map((letter, index) => (\n\t\t\t\t\t\t\t<option key={index}>{letter.letter}</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t},\n)\n","import { selectHandCountFromState } from '../select/selectHandCount'\nimport { selectBagFromState } from '../select/simpleSelectors'\nimport { disownTiles, fillHand, resetSkipCount, score } from './actions'\nimport { endGameThunk } from './endGameThunk'\nimport { nextPlayerAndSaveThunk } from './nextPlayerAndSaveThunk'\nimport { ThunkValue } from './ThunkValue'\n\nexport function doneThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tdispatch(score())\n\t\tdispatch(disownTiles())\n\t\tdispatch(resetSkipCount())\n\t\tdispatch((dispatch, getState) => {\n\t\t\tconst state = getState()\n\t\t\tif (\n\t\t\t\tselectBagFromState(state).length ||\n\t\t\t\tselectHandCountFromState(state)\n\t\t\t) {\n\t\t\t\tdispatch(fillHand())\n\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t} else {\n\t\t\t\tdispatch(endGameThunk())\n\t\t\t}\n\t\t})\n\t}\n}\n","import { collectTiles, incrementSkipCount } from './actions'\nimport { endGameThunk } from './endGameThunk'\nimport { nextPlayerAndSaveThunk } from './nextPlayerAndSaveThunk'\nimport { ThunkValue } from './ThunkValue'\n\nexport function skipThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tdispatch(incrementSkipCount())\n\t\tdispatch((dispatch, getState) => {\n\t\t\tconst state = getState()\n\t\t\tif ((state.app.skipCount || 0) > 3) {\n\t\t\t\tdispatch(endGameThunk())\n\t\t\t} else {\n\t\t\t\tdispatch(collectTiles())\n\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t}\n\t\t})\n\t}\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport {\n\taddTilesToBag,\n\tdeselectTilesToReplace,\n\tfillHand,\n\tremoveTilesToReplaceFromHand,\n\tresetSkipCount,\n\tsetMode,\n} from '../action/actions'\nimport { nextPlayerAndSaveThunk } from '../action/nextPlayerAndSaveThunk'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport { IState } from '../model/State'\nimport { ITile } from '../model/Tile'\nimport {\n\tselectHandIndicesToReplaceFromState,\n\tselectHandsFromState,\n} from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\n\nexport interface ReplaceTilesButtonsCompPropsFromStore {\n\thands: THands\n\tplayerIndex: number | null\n\thandIndicesToReplace: THandIndicesToReplace\n}\nexport interface ReplaceTilesButtonsCompProps\n\textends ReplaceTilesButtonsCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const ReplaceTilesButtonsComp = connect(\n\t(state: IState): ReplaceTilesButtonsCompPropsFromStore => ({\n\t\thandIndicesToReplace: selectHandIndicesToReplaceFromState(state),\n\t\thands: selectHandsFromState(state),\n\t\tplayerIndex: state.app.playerIndex,\n\t}),\n)(\n\t({\n\t\thands,\n\t\tplayerIndex,\n\t\thandIndicesToReplace,\n\t\tdispatch,\n\t}: ReplaceTilesButtonsCompProps) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\t\t\tconst tilesToReplace = hand.filter(\n\t\t\t\t\t\t\t(tile, aHandIndex) =>\n\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex],\n\t\t\t\t\t\t) as ITile[]\n\t\t\t\t\t\tdispatch(removeTilesToReplaceFromHand())\n\t\t\t\t\t\tdispatch(deselectTilesToReplace())\n\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\tdispatch(addTilesToBag({ tiles: tilesToReplace }))\n\t\t\t\t\t\tdispatch(resetSkipCount())\n\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t\t\t}}\n\t\t\t\t>{`Csere`}</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(deselectTilesToReplace())\n\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t}}\n\t\t\t\t>{`Mégse`}</button>\n\t\t\t</>\n\t\t)\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { getWordScore } from '../fun/getWordScore'\nimport { getWordString } from '../fun/getWordString'\nimport { BINGO_SCORE } from '../model/Constants'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { MoveError } from '../model/MoveError'\nimport { IState } from '../model/State'\nimport { selectIsBingoFromState } from '../select/selectIsBingo'\nimport { selectMoveErrorsFromState } from '../select/selectMoveErrors'\nimport { selectValidAndInvalidWordsFromState } from '../select/selectValidAndInvalidWords'\nimport { DispatchProp } from './DispatchProp'\nimport './WordInfoComp.css'\n\nexport interface WordInfoCompPropsFromStore {\n\twords: IValidAndInvalidWords\n\terrors: MoveError[]\n\tisBingo: boolean\n}\nexport interface WordInfoCompProps\n\textends WordInfoCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const WordInfoComp = connect(\n\t(state: IState): WordInfoCompPropsFromStore => ({\n\t\twords: selectValidAndInvalidWordsFromState(state),\n\t\terrors: selectMoveErrorsFromState(state),\n\t\tisBingo: selectIsBingoFromState(state),\n\t}),\n)(\n\t({\n\t\twords: { valid, invalid },\n\t\terrors,\n\t\tisBingo,\n\t\tdispatch,\n\t}: WordInfoCompProps) => {\n\t\treturn (\n\t\t\t<div className='word-info'>\n\t\t\t\t{valid.length > 0 && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{isBingo && (\n\t\t\t\t\t\t\t<div className='bingo'>{`+${BINGO_SCORE} pont!`}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{`Érvényes szavak:`}\n\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t{valid.map((word, index) => {\n\t\t\t\t\t\t\t\tconst wordString = getWordString(word)\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t\t\t{index > 0 && <>{`, `}</>}\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tclassName='valid-word'\n\t\t\t\t\t\t\t\t\t\t\thref={`http://ertelmezo.oszk.hu/kereses.php?csakcimben=on&kereses=${encodeURIComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t`\"${wordString}\"`,\n\t\t\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{wordString.replace(' ', ' ')}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t\t<span className='word-score'>\n\t\t\t\t\t\t\t\t\t\t\t{getWordScore(word)}\n\t\t\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{invalid.length > 0 && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{`Érvénytelen szavak:`}\n\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t{invalid.map((word, index) => {\n\t\t\t\t\t\t\tconst wordString = getWordString(word)\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t\t{index > 0 && <>{`, `}</>}\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\tclassName='invalid-word'\n\t\t\t\t\t\t\t\t\t\thref={`http://ertelmezo.oszk.hu/kereses.php?csakcimben=on&kereses=${encodeURIComponent(\n\t\t\t\t\t\t\t\t\t\t\t`\"${wordString}\"`,\n\t\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{wordString.replace(' ', ' ')}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{errors.length > 0 && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{Array.from(errors)\n\t\t\t\t\t\t\t.map(e => {\n\t\t\t\t\t\t\t\tswitch (e) {\n\t\t\t\t\t\t\t\t\tcase MoveError.InvalidWord:\n\t\t\t\t\t\t\t\t\t\treturn `Van egy érvénytelen szavad!`\n\t\t\t\t\t\t\t\t\tcase MoveError.NoConnection:\n\t\t\t\t\t\t\t\t\t\treturn `Kapcsolódnod kell a meglévő lapkákhoz!`\n\t\t\t\t\t\t\t\t\tcase MoveError.NoDirection:\n\t\t\t\t\t\t\t\t\t\treturn `Egy vonalba tedd a lapkáid, hézag nélkül!`\n\t\t\t\t\t\t\t\t\tcase MoveError.NoStart:\n\t\t\t\t\t\t\t\t\t\treturn `Érintened kell a Start mezőt!`\n\t\t\t\t\t\t\t\t\tcase MoveError.NoTile:\n\t\t\t\t\t\t\t\t\t\treturn `Tégy le egy lapkát!`\n\t\t\t\t\t\t\t\t\tcase MoveError.OneTile:\n\t\t\t\t\t\t\t\t\t\treturn `Egy érvényes szóhoz legalább két lapka kell!`\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\treturn `[ppy6tx]: ${e}`\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.map((e, index) => (\n\t\t\t\t\t\t\t\t<div key={index}>{e}</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { loadGameThunk } from '../action/loadGameThunk'\nimport { newGameThunk } from '../action/newGameThunk'\nimport { savedGameExists } from '../fun/savedGameExists'\nimport { TBag } from '../model/Bag'\nimport { Mode } from '../model/Mode'\nimport { IState } from '../model/State'\nimport {\n\tselectBagFromState,\n\tselectModeFromState,\n} from '../select/simpleSelectors'\nimport './AppComp.css'\nimport { BagComp } from './BagComp'\nimport { BoardComp } from './BoardComp'\nimport { DispatchProp } from './DispatchProp'\nimport { GameEndedComp } from './GameEndedComp'\nimport { HandComp } from './HandComp'\nimport { PlaceTileButtonsComp } from './PlaceTileButtonsComp'\nimport { PlayersComp } from './PlayersComp'\nimport { ReplaceTilesButtonsComp } from './ReplaceTilesButtonsComp'\nimport { WordInfoComp } from './WordInfoComp'\n\ninterface IAppCompPropsFromState {\n\tmode: Mode\n\tbag: TBag\n}\nexport interface IAppCompProps extends IAppCompPropsFromState, DispatchProp {}\n\nexport const AppComp = connect(\n\t(state: IState): IAppCompPropsFromState => ({\n\t\tmode: selectModeFromState(state),\n\t\tbag: selectBagFromState(state),\n\t}),\n)(({ mode, bag, dispatch }: IAppCompProps) => {\n\treturn (\n\t\t<>\n\t\t\t<BoardComp />\n\t\t\t<div className='tools'>\n\t\t\t\t{mode === Mode.NotStarted && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{savedGameExists() && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tdispatch(loadGameThunk())\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>{`Folytatás`}</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\tdispatch(newGameThunk())\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>{`Új játék`}</button>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.PlaceTile && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<PlayersComp isEnabled />\n\t\t\t\t\t\t<BagComp bag={bag} />\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t<WordInfoComp />\n\t\t\t\t\t\t<PlaceTileButtonsComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.ReplaceTiles && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t<ReplaceTilesButtonsComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.Ended && <GameEndedComp />}\n\t\t\t</div>\n\t\t</>\n\t)\n})\n","import { get } from 'illa/FunctionUtil'\nimport { LocalStorageKey } from '../model/LocalStorageKey'\n\nexport function savedGameExists() {\n\treturn !!get(() => localStorage[LocalStorageKey.SavedGame])\n}\n","import { get } from 'illa/FunctionUtil'\nimport { setGame } from './actions'\nimport { LocalStorageKey } from '../model/LocalStorageKey'\nimport { IState } from '../model/State'\nimport { ThunkValue } from './ThunkValue'\n\nexport function loadGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst savedGame = get(\n\t\t\t() => JSON.parse(localStorage[LocalStorageKey.SavedGame]) as IState,\n\t\t)\n\t\tif (savedGame) {\n\t\t\tdispatch(setGame({ game: savedGame }))\n\t\t}\n\t}\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { Draft, produce } from 'immer'\nimport {\n\taddTilesToBag,\n\tcollectTiles,\n\tdeselectTilesToReplace,\n\tdisownTiles,\n\tfillHand,\n\tincrementSkipCount,\n\tnextPlayer,\n\tremoveTilesToReplaceFromHand,\n\tresetGame,\n\tresetSkipCount,\n\tscore,\n\tscoreBonuses,\n\tselectField,\n\tselectHand,\n\tsetGame,\n\tsetJokerLetter,\n\tsetMode,\n\tsetPlayerName,\n\tswapHandAndBoard,\n\tswapHands,\n\tswapTiles,\n\ttoggleHandIndexToReplace,\n} from '../action/actions'\nimport { TAction } from '../action/TAction'\nimport { selectHandCountFromAppState } from '../select/selectHandCount'\nimport { selectMoveScoreFromAppState } from '../select/selectMoveScore'\nimport { createBag, TBag } from './Bag'\nimport { createBoard, TBoard } from './Board'\nimport {\n\tcreateHandIndicesToReplace,\n\tTHandIndicesToReplace,\n} from './HandIndicesToReplace'\nimport { createHands, THands } from './Hands'\nimport { Mode } from './Mode'\nimport { createPlayers, TPlayers } from './Player'\nimport { ITile } from './Tile'\n\nexport interface IAppState {\n\treadonly mode: Mode\n\treadonly players: TPlayers\n\treadonly playerIndex: number | null\n\treadonly board: TBoard\n\treadonly bag: TBag\n\treadonly fieldIndex: number | null\n\treadonly handIndex: number | null\n\treadonly hands: THands\n\treadonly handIndicesToReplace: THandIndicesToReplace\n\treadonly startingHandCount: number | null\n\treadonly skipCount: number | null\n\treadonly playerBonuses: ReadonlyArray<number> | null\n}\n\nexport function createAppState(): IAppState {\n\treturn {\n\t\tmode: Mode.NotStarted,\n\t\tboard: createBoard(),\n\t\tbag: createBag(),\n\t\thands: createHands(),\n\t\tplayers: createPlayers(),\n\t\tplayerIndex: null,\n\t\tfieldIndex: null,\n\t\thandIndex: null,\n\t\thandIndicesToReplace: createHandIndicesToReplace(),\n\t\tstartingHandCount: null,\n\t\tskipCount: null,\n\t\tplayerBonuses: null,\n\t}\n}\n\nexport const appStateReducer = produce(\n\t(state: Draft<IAppState>, action: TAction) => {\n\t\tswitch (action.type) {\n\t\t\tcase collectTiles.type: {\n\t\t\t\tconst { board, playerIndex, hands } = state\n\t\t\t\tconst tiles: ITile[] = []\n\t\t\t\tfor (const field of board) {\n\t\t\t\t\tif (field.tile && field.tile.isOwned) {\n\t\t\t\t\t\tconst tile = field.tile\n\t\t\t\t\t\tfield.tile = null\n\t\t\t\t\t\ttiles.push(tile)\n\t\t\t\t\t\tif (tile.isJoker) tile.letter = ' '\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tfor (let i = 0; i < hand.length; i++) {\n\t\t\t\t\tif (isUndefinedOrNull(hand[i])) {\n\t\t\t\t\t\thand[i] = tiles.shift() || null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase disownTiles.type: {\n\t\t\t\tfor (const field of state.board) {\n\t\t\t\t\tif (field.tile) {\n\t\t\t\t\t\tfield.tile.isOwned = false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase fillHand.type: {\n\t\t\t\tconst { bag, hands, playerIndex } = state\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tconst count = Math.min(\n\t\t\t\t\tbag.length,\n\t\t\t\t\thand.reduce((sum, tile) => (tile ? sum : sum + 1), 0),\n\t\t\t\t)\n\t\t\t\tconst tiles: ITile[] = []\n\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\tconst tile = bag.splice(\n\t\t\t\t\t\tMath.floor(Math.random() * bag.length),\n\t\t\t\t\t\t1,\n\t\t\t\t\t)[0]\n\t\t\t\t\ttile.isOwned = true\n\t\t\t\t\ttiles.push(tile)\n\t\t\t\t}\n\t\t\t\tstate.hands[playerIndex!] = hand.map(tile =>\n\t\t\t\t\ttile ? tile : tiles.shift() || null,\n\t\t\t\t)\n\t\t\t\tstate.startingHandCount = selectHandCountFromAppState(state)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase nextPlayer.type: {\n\t\t\t\tconst { playerIndex } = state\n\t\t\t\tstate.playerIndex = isUndefinedOrNull(playerIndex)\n\t\t\t\t\t? 0\n\t\t\t\t\t: 1 - playerIndex\n\t\t\t\tstate.fieldIndex = null\n\t\t\t\tstate.handIndex = null\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase resetGame.type:\n\t\t\t\treturn createAppState()\n\t\t\tcase score.type: {\n\t\t\t\tconst { players, playerIndex } = state\n\t\t\t\tplayers[playerIndex!].score += selectMoveScoreFromAppState(\n\t\t\t\t\tstate,\n\t\t\t\t)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase selectField.type: {\n\t\t\t\tstate.fieldIndex = action.payload.fieldIndex\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase selectHand.type: {\n\t\t\t\tstate.handIndex = action.payload.handIndex\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase setJokerLetter.type: {\n\t\t\t\tconst { board, fieldIndex } = state\n\t\t\t\tboard[fieldIndex!].tile!.letter = action.payload.letter\n\t\t\t\tstate.fieldIndex = null\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase setMode.type: {\n\t\t\t\tconst mode = action.payload\n\t\t\t\tif (mode !== state.mode) {\n\t\t\t\t\tstate.fieldIndex = null\n\t\t\t\t\tstate.handIndex = null\n\t\t\t\t}\n\t\t\t\tstate.mode = mode\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase setPlayerName.type: {\n\t\t\t\tconst { playerIndex, name } = action.payload\n\t\t\t\tstate.players[playerIndex].name = name\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase swapHandAndBoard.type: {\n\t\t\t\tconst { board, hands, playerIndex } = state\n\t\t\t\tconst { fieldIndex, handIndex } = action.payload\n\t\t\t\tconst field = board[fieldIndex]\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tconst tileOnBoard = field.tile\n\t\t\t\tconst tileInHand = hand[handIndex]\n\t\t\t\tstate.fieldIndex =\n\t\t\t\t\ttileInHand && tileInHand.isJoker ? fieldIndex : null\n\t\t\t\tstate.handIndex = null\n\t\t\t\tboard[fieldIndex].tile = tileInHand\n\t\t\t\thand[handIndex] = tileOnBoard\n\t\t\t\tif (tileOnBoard && tileOnBoard.isJoker) {\n\t\t\t\t\ttileOnBoard.letter = ' '\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase swapHands.type: {\n\t\t\t\tconst { hands, playerIndex } = state\n\t\t\t\tconst { handIndexA, handIndexB } = action.payload\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tconst tileA = hand[handIndexA]\n\t\t\t\tconst tileB = hand[handIndexB]\n\t\t\t\tstate.handIndex = null\n\t\t\t\thand[handIndexA] = tileB\n\t\t\t\thand[handIndexB] = tileA\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase swapTiles.type: {\n\t\t\t\tconst { board } = state\n\t\t\t\tconst { fieldIndexA, fieldIndexB } = action.payload\n\t\t\t\tconst fieldATile = board[fieldIndexA].tile\n\t\t\t\tconst fieldBTile = board[fieldIndexB].tile\n\t\t\t\tstate.fieldIndex = null\n\t\t\t\tboard[fieldIndexA].tile = fieldBTile\n\t\t\t\tboard[fieldIndexB].tile = fieldATile\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase toggleHandIndexToReplace.type: {\n\t\t\t\tconst { handIndicesToReplace } = state\n\t\t\t\tconst { handIndex } = action.payload\n\t\t\t\thandIndicesToReplace[handIndex] = !handIndicesToReplace[\n\t\t\t\t\thandIndex\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase removeTilesToReplaceFromHand.type: {\n\t\t\t\tconst { handIndicesToReplace, playerIndex, hands } = state\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tstate.hands[playerIndex!] = hand.map((tile, index) =>\n\t\t\t\t\thandIndicesToReplace[index] ? null : tile,\n\t\t\t\t)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase deselectTilesToReplace.type: {\n\t\t\t\tstate.handIndicesToReplace.fill(false)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase addTilesToBag.type: {\n\t\t\t\tstate.bag.push(...action.payload.tiles)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase setGame.type:\n\t\t\t\treturn action.payload.game.app\n\t\t\tcase incrementSkipCount.type: {\n\t\t\t\tstate.skipCount = (state.skipCount || 0) + 1\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase resetSkipCount.type: {\n\t\t\t\tstate.skipCount = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase scoreBonuses.type: {\n\t\t\t\tstate.playerBonuses = action.payload as number[]\n\t\t\t\tstate.players.forEach((player, playerIndex) => {\n\t\t\t\t\tplayer.score += action.payload[playerIndex]\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault:\n\t\t}\n\t},\n\tcreateAppState(),\n)\n","import { withInterface } from 'illa/Type'\nimport { IField } from './Field'\nimport { FieldKind } from './FieldKind'\n\nexport type TBoard = ReadonlyArray<IField>\n\nexport function createBoard(): TBoard {\n\treturn `\nW--l---W---l--W\n-w---L---L---w-\n--w---l-l---w--\nl--w---l---w--l\n----w-----w----\n-L---L---L---L-\n--l---l-l---l--\nW--l---s---l--W\n--l---l-l---l--\n-L---L---L---L-\n----w-----w----\nl--w---l---w--l\n--w---l-l---w--\n-w---L---L---w-\nW--l---W---l--W\n`\n\t\t.trim()\n\t\t.split(/\\n/)\n\t\t.flatMap(row =>\n\t\t\trow.split('').map(letter =>\n\t\t\t\twithInterface<IField>({\n\t\t\t\t\tkind: letter as FieldKind,\n\t\t\t\t\ttile: null,\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n}\n","import { range } from 'illa/ArrayUtil'\nimport { withInterface } from 'illa/Type'\nimport letters from '../res/letters.json'\nimport { ITile } from './Tile'\n\nexport type TBag = ReadonlyArray<ITile>\n\nexport function createBag(): TBag {\n\treturn letters.flatMap(({ count, letter, score }) =>\n\t\trange(count).map(_ =>\n\t\t\twithInterface<ITile>({\n\t\t\t\tletter,\n\t\t\t\tscore,\n\t\t\t\tisOwned: false,\n\t\t\t\tisJoker: letter === ' ',\n\t\t\t}),\n\t\t),\n\t)\n}\n","import { range } from 'illa/ArrayUtil'\nimport { ITile } from './Tile'\n\nexport type THand = ReadonlyArray<ITile | null>\nexport type THands = ReadonlyArray<THand>\n\nexport function createHands(): THands {\n\treturn range(2).map(_ => range(7).map(_ => null))\n}\n","import { range } from 'illa/ArrayUtil'\nimport { withInterface } from 'illa/Type'\n\nexport interface IPlayer {\n\tname: string\n\tscore: number\n}\n\nexport type TPlayers = ReadonlyArray<IPlayer>\n\nexport function createPlayers(): TPlayers {\n\treturn range(2).map(_ =>\n\t\twithInterface<IPlayer>({\n\t\t\tname: `${_ + 1}. Játékos`,\n\t\t\tscore: 0,\n\t\t}),\n\t)\n}\n","import { range } from 'illa/ArrayUtil'\n\nexport type THandIndicesToReplace = ReadonlyArray<boolean>\n\nexport function createHandIndicesToReplace(): THandIndicesToReplace {\n\treturn range(7).map(_ => false)\n}\n","import { Draft, produce } from 'immer'\nimport { setMode } from '../action/actions'\nimport { TAction } from '../action/TAction'\nimport { appStateReducer, createAppState, IAppState } from './AppState'\nimport { Mode } from './Mode'\n\nexport interface IState {\n\treadonly app: IAppState\n}\n\nexport function createState(): IState {\n\treturn {\n\t\tapp: createAppState(),\n\t}\n}\n\nexport const stateReducer = produce((state: Draft<IState>, action: TAction) => {\n\tstate.app = appStateReducer(state.app, action) as Draft<IAppState>\n}, createAppState())\nstateReducer(undefined, setMode(Mode.Ended))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'normalize.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { configureStore } from 'redux-starter-kit'\nimport { AppComp } from './comp/AppComp'\nimport './index.css'\nimport { stateReducer } from './model/State'\nimport * as serviceWorker from './serviceWorker'\n\nexport const store = configureStore({\n\treducer: stateReducer,\n})\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<AppComp />\n\t</Provider>,\n\tdocument.getElementById('root'),\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}