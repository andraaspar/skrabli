{"version":3,"sources":["model/LocalStorageKey.tsx","action/actions.tsx","model/Mode.tsx","select/simpleSelectors.tsx","action/saveGameThunk.tsx","action/nextPlayerAndSaveThunk.tsx","action/newGameThunk.tsx","model/Constants.tsx","fun/getHandTileCount.tsx","select/selectHand.tsx","select/selectHandCount.tsx","select/selectIsBingo.tsx","comp/BagComp.tsx","select/selectField.tsx","model/FieldKind.tsx","select/selectHandTile.tsx","comp/AspectComp.tsx","comp/TileComp.tsx","comp/BoardComp.tsx","model/MoveError.tsx","action/selectFieldThunk.tsx","fun/getWordString.tsx","model/Direction.tsx","fun/isWordStringValid.tsx","fun/getNextFieldIndex.tsx","fun/getColumnIndex.tsx","fun/getColumnLine.tsx","fun/getRowIndex.tsx","fun/getRowLine.tsx","fun/getWordFromLine.tsx","fun/getWordsAt.tsx","select/selectWordInfo.tsx","fun/isThereAGap.tsx","select/selectAllOwnedWords.tsx","select/selectMoveErrors.tsx","comp/ErrorsComp.tsx","select/selectWinners.tsx","select/selectIsGameDrawn.tsx","select/selectWinnersNames.tsx","comp/PlayersComp.tsx","fun/numberToSignedString.tsx","comp/GameEndedComp.tsx","comp/HandComp.tsx","select/selectOwnValidAndInvalidWords.tsx","fun/getWordScore.tsx","comp/WordListComp.tsx","comp/OwnWordInfoComp.tsx","select/selectPlacedValidAndInvalidWords.tsx","comp/PlacedWordInfoComp.tsx","select/selectMoveScore.tsx","fun/getHandValue.tsx","select/selectEmptyHandBonus.tsx","select/selectPlayerBonuses.tsx","action/endGameThunk.tsx","comp/PlaceTileButtonsComp.tsx","action/doneThunk.tsx","action/skipThunk.tsx","comp/ReplaceTilesButtonsComp.tsx","comp/AppComp.tsx","fun/savedGameExists.tsx","action/loadGameThunk.tsx","model/AppState.tsx","model/Board.tsx","model/Bag.tsx","model/Hands.tsx","model/Player.tsx","model/HandIndicesToReplace.tsx","serviceWorker.ts","index.tsx"],"names":["LocalStorageKey","Mode","setGame","createAction","collectTiles","disownTiles","fillHand","nextPlayer","resetGame","score","setSelectedField","selectHand","setJokerLetter","setMode","setPlayerName","swapHandAndBoard","swapHands","swapTiles","toggleHandIndexToReplace","removeTilesToReplaceFromHand","deselectTilesToReplace","addTilesToBag","incrementSkipCount","resetSkipCount","scoreBonuses","type","a","payload","selectBoard","state","board","selectBag","bag","selectHands","hands","selectMode","mode","selectHandIndicesToReplace","handIndicesToReplace","selectPlayers","players","selectHandIndex","handIndex","selectFieldIndex","fieldIndex","saveGameThunk","dispatch","getState","localStorage","SavedGame","JSON","stringify","e","console","error","nextPlayerAndSaveThunk","newGameThunk","names","map","player","name","forEach","playerIndex","PlaceTile","BOARD_SIZE","CENTER_FIELD_INDEX","getHandTileCount","hand","reduce","sum","tile","isUndefinedOrNull","createSelector","selectHandCount","selectIsBingo","startingHandCount","handCount","BagComp","_ref","react","className","concat","length","FieldKind","selectField","selectHandTile","AspectComp","width","height","children","viewBox","TileComp","neverOwned","AspectComp_AspectComp","isOwned","isJoker","filter","Boolean","join","letter","MoveError","BoardComp","connect","field","aFieldIndex","key","fieldKindToCssClass","kind","onClick","fieldIndexToSelect","selectedFieldIndex","handTile","selectedField","fieldToSelect","fieldIndexA","fieldIndexB","TileComp_TileComp","k","Normal","DoubleLetter","DoubleWord","Start","TripleLetter","TripleWord","Error","fieldKindToLabel","getWordString","word","_","Direction","isWordStringValid","w","words","indexOf","getFieldIndexOffset","direction","Horizontal","getColumnIndex","getColumnLine","columnIndex","column","rowIndex","push","getRowIndex","Math","floor","getRowLine","firstFieldIndex","slice","getWordFromLine","line","lineIndex","index","startLineIndex","endLineIndex","unshift","getWordsAt","horizontal","vertical","selectWordInfo","lastFieldIndex","colIndex","newColIndex","newRowIndex","Vertical","_getWordsAt","startFieldIndex","endFieldIndex","isThereAGap","selectAllOwnedWords","mainWord","selectMoveErrors","errors","Set","add","NoTile","size","OneTile","NoDirection","touchesStart","touchesUnowned","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","InvalidWord","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","NoStart","NoConnection","Array","from","ErrorsComp","selectWinners","Ended","winningScore","winners","selectIsGameDrawn","selectWinnersNames","winnerNames","winner","last","rest","PlayersComp","playerBonuses","isEnabled","aPlayerIndex","prompt","trim","n","GameEndedComp","isGameDrawn","winnerName","PlayersComp_PlayersComp","HandComp","isNullOrUndefined","aHandIndex","ReplaceTiles","handIndexA","handIndexB","selectOwnValidAndInvalidWords","valid","invalid","getWordScore","wordMulti","tileScore","WordListComp","showScore","wordClassName","scoreClassName","label","wordString","href","encodeURIComponent","target","rel","replace","OwnWordInfoComp","selectPlacedValidAndInvalidWords","PlacedWordInfoComp","selectMoveScore","isBingo","getHandValue","memoizee","max","selectEmptyHandBonus","selectPlayerBonuses","emptyHandBonus","isNull","endGameThunk","PlaceTileButtonsComp","moveScore","moveErrors","disabled","window","confirm","skipCount","get","onChange","letters","ReplaceTilesButtonsComp","tilesToReplace","tiles","AppComp","BoardComp_BoardComp","NotStarted","savedGame","parse","game","app","BagComp_BagComp","HandComp_HandComp","OwnWordInfoComp_OwnWordInfoComp","ErrorsComp_ErrorsComp","PlaceTileButtonsComp_PlaceTileButtonsComp","PlacedWordInfoComp_PlacedWordInfoComp","createAppState","split","flatMap","row","withInterface","count","range","appStateReducer","produce","action","i","shift","min","splice","random","newHand","_action$payload","_action$payload2","tileOnBoard","tileInHand","_action$payload3","tileA","tileB","_action$payload4","fieldATile","fieldBTile","fill","_state$bag","apply","Object","toConsumableArray","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","__webpack_require__","d","__webpack_exports__","store","configureStore","reducer","ReactDOM","render","react_default","createElement","es","AppComp_AppComp","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a0b2ff4c.chunk.js","sourcesContent":["export enum LocalStorageKey {\n\tSavedGame = 'game',\n}\n","import { IAppState } from '../model/AppState'\nimport { Mode } from '../model/Mode'\nimport { ITile } from '../model/Tile'\n\nexport const setGame = createAction<'setGame', { game: IAppState }>('setGame')\nexport const collectTiles = createAction<'collectTiles'>('collectTiles')\nexport const disownTiles = createAction<'disownTiles'>('disownTiles')\nexport const fillHand = createAction<'fillHand'>('fillHand')\nexport const nextPlayer = createAction<'nextPlayer'>('nextPlayer')\nexport const resetGame = createAction<'resetGame'>('resetGame')\nexport const score = createAction<'score', number>('score')\nexport const setSelectedField = createAction<\n\t'setSelectedField',\n\t{ fieldIndex: number | null }\n>('setSelectedField')\nexport const selectHand = createAction<\n\t'selectHand',\n\t{ handIndex: number | null }\n>('selectHand')\nexport const setJokerLetter = createAction<\n\t'setJokerLetter',\n\t{ letter: string }\n>('setJokerLetter')\nexport const setMode = createAction<'setMode', Mode>('setMode')\nexport const setPlayerName = createAction<\n\t'setPlayerName',\n\t{\n\t\tplayerIndex: number\n\t\tname: string\n\t}\n>('setPlayerName')\nexport const swapHandAndBoard = createAction<\n\t'swapHandAndBoard',\n\t{\n\t\tfieldIndex: number\n\t\thandIndex: number\n\t}\n>('swapHandAndBoard')\nexport const swapHands = createAction<\n\t'swapHands',\n\t{\n\t\thandIndexA: number\n\t\thandIndexB: number\n\t}\n>('swapHands')\nexport const swapTiles = createAction<\n\t'swapTiles',\n\t{\n\t\tfieldIndexA: number\n\t\tfieldIndexB: number\n\t}\n>('swapTiles')\nexport const toggleHandIndexToReplace = createAction<\n\t'toggleHandIndexToReplace',\n\t{\n\t\thandIndex: number\n\t}\n>('toggleHandIndexToReplace')\nexport const removeTilesToReplaceFromHand = createAction<\n\t'removeTilesToReplaceFromHand'\n>('removeTilesToReplaceFromHand')\nexport const deselectTilesToReplace = createAction<'deselectTilesToReplace'>(\n\t'deselectTilesToReplace',\n)\nexport const addTilesToBag = createAction<'addTilesToBag', { tiles: ITile[] }>(\n\t'addTilesToBag',\n)\nexport const incrementSkipCount = createAction<'incrementSkipCount'>(\n\t'incrementSkipCount',\n)\nexport const resetSkipCount = createAction<'resetSkipCount'>('resetSkipCount')\nexport const scoreBonuses = createAction<'scoreBonuses', ReadonlyArray<number>>(\n\t'scoreBonuses',\n)\n\nfunction createAction<T extends string, P = void>(type: T) {\n\tconst a = (payload: P) => ({ type, payload })\n\ta.type = type\n\treturn a\n}\n","export enum Mode {\n\tNotStarted = 'NotStarted',\n\tPlaceTile = 'PlaceTile',\n\tReplaceTiles = 'ReplaceTiles',\n\tEnded = 'Ended',\n}\n","import { IAppState } from '../model/AppState'\nimport { TBag } from '../model/Bag'\nimport { TBoard } from '../model/Board'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\n\nexport const selectBoard = (state: IAppState): TBoard => state.board\nexport const selectBag = (state: IAppState): TBag => state.bag\nexport const selectHands = (state: IAppState): THands => state.hands\nexport const selectMode = (state: IAppState): Mode => state.mode\nexport const selectHandIndicesToReplace = (\n\tstate: IAppState,\n): THandIndicesToReplace => state.handIndicesToReplace\nexport const selectPlayers = (state: IAppState) => state.players\nexport const selectPlayerIndex = (state: IAppState) => state.playerIndex\nexport const selectHandIndex = (state: IAppState) => state.handIndex\nexport const selectFieldIndex = (state: IAppState) => state.fieldIndex\nexport const selectStartingHandCount = (state: IAppState) =>\n\tstate.startingHandCount\n","import { LocalStorageKey } from '../model/LocalStorageKey'\nimport { ThunkValue } from './ThunkValue'\n\nexport function saveGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\ttry {\n\t\t\tlocalStorage[LocalStorageKey.SavedGame] = JSON.stringify(getState())\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t}\n\t}\n}\n","import { nextPlayer } from './actions'\nimport { saveGameThunk } from './saveGameThunk'\nimport { ThunkValue } from './ThunkValue'\n\nexport function nextPlayerAndSaveThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tdispatch(nextPlayer())\n\t\tdispatch(saveGameThunk())\n\t}\n}\n","import { Mode } from '../model/Mode'\nimport { selectPlayers } from '../select/simpleSelectors'\nimport {\n\tfillHand,\n\tnextPlayer,\n\tresetGame,\n\tsetMode,\n\tsetPlayerName,\n} from './actions'\nimport { nextPlayerAndSaveThunk } from './nextPlayerAndSaveThunk'\nimport { ThunkValue } from './ThunkValue'\n\nexport function newGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst state = getState()\n\t\tconst players = selectPlayers(state)\n\t\tconst names = players.map(player => player.name)\n\t\tdispatch(resetGame())\n\t\tnames.forEach((name, playerIndex) => {\n\t\t\tdispatch(\n\t\t\t\tsetPlayerName({\n\t\t\t\t\tplayerIndex,\n\t\t\t\t\tname,\n\t\t\t\t}),\n\t\t\t)\n\t\t})\n\t\tdispatch(nextPlayer())\n\t\tdispatch(fillHand())\n\t\tdispatch(nextPlayer())\n\t\tdispatch(fillHand())\n\t\tdispatch(setMode(Mode.PlaceTile))\n\t\tdispatch(nextPlayerAndSaveThunk())\n\t}\n}\n","export const BOARD_SIZE = 15\nexport const CENTER_FIELD_INDEX = BOARD_SIZE * 7 + 7\nexport const BINGO_SCORE = 50\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { THand } from '../model/Hands'\n\nexport function getHandTileCount(hand: THand | null) {\n\treturn (hand || []).reduce(\n\t\t(sum, tile) => sum + (isUndefinedOrNull(tile) ? 0 : 1),\n\t\t0,\n\t)\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { selectHands, selectPlayerIndex } from './simpleSelectors'\n\nexport const selectHand = createSelector(\n\t[selectHands, selectPlayerIndex],\n\t(hands, playerIndex) => {\n\t\treturn isUndefinedOrNull(playerIndex) ? null : hands[playerIndex]\n\t},\n)\n","import { createSelector } from 'reselect'\nimport { getHandTileCount } from '../fun/getHandTileCount'\nimport { selectHand } from './selectHand'\n\nexport const selectHandCount = createSelector(\n\t[selectHand],\n\tgetHandTileCount,\n)\n","import { createSelector } from 'reselect'\nimport { selectHandCount } from './selectHandCount'\nimport { selectStartingHandCount } from './simpleSelectors'\n\nexport const selectIsBingo = createSelector(\n\t[selectStartingHandCount, selectHandCount],\n\t(startingHandCount, handCount) => {\n\t\treturn startingHandCount === 7 && handCount === 0\n\t},\n)\n","import * as React from 'react'\nimport { TBag } from '../model/Bag'\nimport './BagComp.css'\n\nexport function BagComp({ bag }: { bag: TBag }) {\n\treturn <div className='bag'>{`Lapkák a zsákban: ${bag.length}`}</div>\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { selectBoard, selectFieldIndex } from './simpleSelectors'\n\nexport const selectField = createSelector(\n\t[selectBoard, selectFieldIndex],\n\t(board, fieldIndex) => {\n\t\treturn isUndefinedOrNull(fieldIndex) ? null : board[fieldIndex]\n\t},\n)\n","export enum FieldKind {\n\tNormal = '-',\n\tStart = 's',\n\tDoubleLetter = 'l',\n\tTripleLetter = 'L',\n\tDoubleWord = 'w',\n\tTripleWord = 'W',\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { selectHand } from './selectHand'\nimport { selectHandIndex } from './simpleSelectors'\n\nexport const selectHandTile = createSelector(\n\t[selectHand, selectHandIndex],\n\t(hand, handIndex) => {\n\t\treturn hand && !isUndefinedOrNull(handIndex) ? hand[handIndex] : null\n\t},\n)\n","import * as React from 'react'\nimport './AspectComp.css'\n\nexport function AspectComp({\n\twidth,\n\theight,\n\tchildren,\n}: React.PropsWithChildren<{\n\twidth: number\n\theight: number\n}>) {\n\treturn (\n\t\t<div className='aspect'>\n\t\t\t<svg viewBox={`0 0 ${width} ${height}`} />\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n","import * as React from 'react'\nimport { ITile } from '../model/Tile'\nimport { AspectComp } from './AspectComp'\nimport './TileComp.css'\n\nexport function TileComp({\n\ttile,\n\tneverOwned,\n}: {\n\ttile: ITile\n\tneverOwned?: boolean\n}) {\n\treturn (\n\t\t<AspectComp width={1} height={1}>\n\t\t\t<div\n\t\t\t\tclassName={[\n\t\t\t\t\t'tile',\n\t\t\t\t\t!neverOwned && tile.isOwned && 'is-owned',\n\t\t\t\t\ttile.isJoker && 'is-joker',\n\t\t\t\t]\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.join(' ')}\n\t\t\t>\n\t\t\t\t<div className='tile-letter'>{tile.letter}</div>\n\t\t\t\t<div className='tile-score'>{tile.score}</div>\n\t\t\t</div>\n\t\t</AspectComp>\n\t)\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { selectFieldThunk } from '../action/selectFieldThunk'\nimport { IAppState } from '../model/AppState'\nimport { TBoard } from '../model/Board'\nimport { FieldKind } from '../model/FieldKind'\nimport { selectBoard } from '../select/simpleSelectors'\nimport { AspectComp } from './AspectComp'\nimport './BoardComp.css'\nimport { DispatchProp } from './DispatchProp'\nimport { TileComp } from './TileComp'\n\ninterface BoardCompPropsFromState {\n\tfieldIndex: number | null\n\tboard: TBoard\n}\nexport interface BoardCompProps extends BoardCompPropsFromState, DispatchProp {}\n\nexport const BoardComp = connect(\n\t(state: IAppState): BoardCompPropsFromState => ({\n\t\tboard: selectBoard(state),\n\t\tfieldIndex: state.fieldIndex,\n\t}),\n)(({ fieldIndex, board, dispatch }: BoardCompProps) => {\n\treturn (\n\t\t<div className='board'>\n\t\t\t{board.map((field, aFieldIndex) => (\n\t\t\t\t<AspectComp key={aFieldIndex} width={1} height={1}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t'board-field',\n\t\t\t\t\t\t\tfieldKindToCssClass(field.kind),\n\t\t\t\t\t\t\taFieldIndex === fieldIndex && 'is-selected',\n\t\t\t\t\t\t]\n\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\tdispatch(selectFieldThunk(aFieldIndex))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{field.tile ? (\n\t\t\t\t\t\t\t<TileComp tile={field.tile} />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tfieldKindToLabel(field.kind)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</AspectComp>\n\t\t\t))}\n\t\t</div>\n\t)\n})\n\nfunction fieldKindToCssClass(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn 'is-normal'\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn 'is-double-letter'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn 'is-double-word'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'is-start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn 'is-triple-letter'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn 'is-triple-word'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp03n]: ${k}`)\n\t}\n}\n\nfunction fieldKindToLabel(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn ' '\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn '2×\\nBetű'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn '2×\\nSzó'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'Start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn '3×\\nBetű'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn '3×\\nSzó'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp079]: ${k}`)\n\t}\n}\n","export enum MoveError {\n\tNoTile,\n\tOneTile,\n\tNoDirection,\n\tNoStart,\n\tNoConnection,\n\tInvalidWord,\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { Mode } from '../model/Mode'\nimport { selectField } from '../select/selectField'\nimport { selectHandTile } from '../select/selectHandTile'\nimport {\n\tselectBoard,\n\tselectFieldIndex,\n\tselectHandIndex,\n\tselectMode,\n} from '../select/simpleSelectors'\nimport { setSelectedField, swapHandAndBoard, swapTiles } from './actions'\nimport { ThunkValue } from './ThunkValue'\n\nexport function selectFieldThunk(fieldIndexToSelect: number): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst state = getState()\n\t\tconst { fieldIndex: selectedFieldIndex } = state\n\t\tconst mode = selectMode(state)\n\t\tif (mode !== Mode.PlaceTile) return\n\t\tconst handTile = selectHandTile(state)\n\t\tconst selectedField = selectField(state)\n\t\tconst fieldToSelect = selectBoard(state)[fieldIndexToSelect]\n\t\tif (\n\t\t\t!isUndefinedOrNull(selectedField) &&\n\t\t\t(selectedField.tile &&\n\t\t\t\tselectedField.tile.isOwned &&\n\t\t\t\t(!fieldToSelect.tile || fieldToSelect.tile.isOwned))\n\t\t) {\n\t\t\tdispatch(\n\t\t\t\tswapTiles({\n\t\t\t\t\tfieldIndexA: selectFieldIndex(state)!,\n\t\t\t\t\tfieldIndexB: fieldIndexToSelect,\n\t\t\t\t}),\n\t\t\t)\n\t\t} else if (\n\t\t\thandTile &&\n\t\t\t(!fieldToSelect.tile || fieldToSelect.tile.isOwned)\n\t\t) {\n\t\t\tdispatch(\n\t\t\t\tswapHandAndBoard({\n\t\t\t\t\thandIndex: selectHandIndex(state)!,\n\t\t\t\t\tfieldIndex: fieldIndexToSelect,\n\t\t\t\t}),\n\t\t\t)\n\t\t} else if (\n\t\t\tselectedFieldIndex === fieldIndexToSelect ||\n\t\t\t!fieldToSelect.tile\n\t\t) {\n\t\t\tdispatch(\n\t\t\t\tsetSelectedField({\n\t\t\t\t\tfieldIndex: null,\n\t\t\t\t}),\n\t\t\t)\n\t\t} else {\n\t\t\tdispatch(\n\t\t\t\tsetSelectedField({\n\t\t\t\t\tfieldIndex: fieldIndexToSelect,\n\t\t\t\t}),\n\t\t\t)\n\t\t}\n\t}\n}\n","import { IField } from '../model/Field'\n\nexport function getWordString(word: ReadonlyArray<IField>): string {\n\treturn word.map(_ => _.tile!.letter).join('')\n}\n","export enum Direction {\n\tHorizontal,\n\tVertical,\n}\n","import words from '../res/words.json'\n\nexport function isWordStringValid(w: string): boolean {\n\treturn words.indexOf(w) >= 0\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\n\nexport function getFieldIndexOffset(direction: Direction) {\n\treturn direction === Direction.Horizontal ? 1 : BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\n\nexport function getColumnIndex(fieldIndex: number) {\n\treturn fieldIndex % BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\n\nexport function getColumnLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst columnIndex = getColumnIndex(fieldIndex)\n\tconst column: IField[] = []\n\tfor (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n\t\tcolumn.push(board[rowIndex * BOARD_SIZE + columnIndex])\n\t}\n\treturn column\n}\n","import { BOARD_SIZE } from '../model/Constants'\n\nexport function getRowIndex(fieldIndex: number) {\n\treturn Math.floor(fieldIndex / BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getRowIndex } from './getRowIndex'\n\nexport function getRowLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst firstFieldIndex = getRowIndex(fieldIndex) * BOARD_SIZE\n\treturn board.slice(firstFieldIndex, firstFieldIndex + BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\n\nexport function getWordFromLine(\n\tline: ReadonlyArray<IField>,\n\tlineIndex: number,\n) {\n\tconst word: IField[] = []\n\tlet index = lineIndex\n\tlet startLineIndex = lineIndex\n\tlet endLineIndex = lineIndex\n\twhile (index >= 0) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.unshift(field)\n\t\tstartLineIndex = index\n\t\tindex--\n\t}\n\tindex = lineIndex + 1\n\twhile (index < BOARD_SIZE) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.push(field)\n\t\tendLineIndex = index\n\t\tindex++\n\t}\n\treturn {\n\t\tword: word.length > 1 ? word : [],\n\t\tstartLineIndex,\n\t\tendLineIndex,\n\t}\n}\n","import { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\nimport { getColumnLine } from './getColumnLine'\nimport { getRowIndex } from './getRowIndex'\nimport { getRowLine } from './getRowLine'\nimport { getWordFromLine } from './getWordFromLine'\n\nexport function getWordsAt(board: ReadonlyArray<IField>, fieldIndex: number) {\n\treturn {\n\t\thorizontal: getWordFromLine(\n\t\t\tgetRowLine(board, fieldIndex),\n\t\t\tgetColumnIndex(fieldIndex),\n\t\t),\n\t\tvertical: getWordFromLine(\n\t\t\tgetColumnLine(board, fieldIndex),\n\t\t\tgetRowIndex(fieldIndex),\n\t\t),\n\t}\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { getColumnIndex } from '../fun/getColumnIndex'\nimport { getRowIndex } from '../fun/getRowIndex'\nimport { getWordsAt } from '../fun/getWordsAt'\nimport { isThereAGap } from '../fun/isThereAGap'\nimport { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\nimport { selectBoard } from './simpleSelectors'\n\nexport interface IWordInfo {\n\tfirstFieldIndex: number | null\n\tlastFieldIndex: number | null\n\tdirection: Direction | null\n}\n\nexport const selectWordInfo = createSelector(\n\t[selectBoard],\n\t(board): IWordInfo => {\n\t\tlet firstFieldIndex: number | null = null\n\t\tlet lastFieldIndex: number | null = null\n\t\tlet colIndex: number | null = null\n\t\tlet rowIndex: number | null = null\n\t\tlet direction: Direction | null = null\n\n\t\tfor (let fieldIndex = 0; fieldIndex < board.length; fieldIndex++) {\n\t\t\tconst field = board[fieldIndex]\n\t\t\tif (field.tile && field.tile.isOwned) {\n\t\t\t\tif (isUndefinedOrNull(colIndex)) {\n\t\t\t\t\t// First field\n\t\t\t\t\tfirstFieldIndex = fieldIndex\n\t\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t\t\tcolIndex = getColumnIndex(fieldIndex)\n\t\t\t\t\trowIndex = getRowIndex(fieldIndex)\n\t\t\t\t} else {\n\t\t\t\t\tconst newColIndex = getColumnIndex(fieldIndex)\n\t\t\t\t\tconst newRowIndex = getRowIndex(fieldIndex)\n\t\t\t\t\tif (lastFieldIndex === firstFieldIndex) {\n\t\t\t\t\t\t// Second field\n\t\t\t\t\t\tif (colIndex === newColIndex) {\n\t\t\t\t\t\t\tdirection = Direction.Vertical\n\t\t\t\t\t\t} else if (rowIndex === newRowIndex) {\n\t\t\t\t\t\t\tdirection = Direction.Horizontal\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Third+ field\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(direction === Direction.Vertical &&\n\t\t\t\t\t\t\t\tcolIndex !== newColIndex) ||\n\t\t\t\t\t\t\t(direction === Direction.Horizontal &&\n\t\t\t\t\t\t\t\trowIndex !== newRowIndex)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdirection = null\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcolIndex = newColIndex\n\t\t\t\t\trowIndex = newRowIndex\n\t\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isUndefinedOrNull(firstFieldIndex)) {\n\t\t\tconst { horizontal, vertical } = getWordsAt(board, firstFieldIndex)\n\t\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\t\tif (horizontal.word.length) {\n\t\t\t\t\tdirection = Direction.Horizontal\n\t\t\t\t} else if (vertical.word.length) {\n\t\t\t\t\tdirection = Direction.Vertical\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (direction === Direction.Horizontal) {\n\t\t\t\tfirstFieldIndex =\n\t\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\t\thorizontal.startLineIndex\n\t\t\t\tlastFieldIndex =\n\t\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\t\thorizontal.endLineIndex\n\t\t\t} else if (direction === Direction.Vertical) {\n\t\t\t\tfirstFieldIndex =\n\t\t\t\t\tvertical.startLineIndex * BOARD_SIZE +\n\t\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t\t\tlastFieldIndex =\n\t\t\t\t\tvertical.endLineIndex * BOARD_SIZE +\n\t\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t\t!isUndefinedOrNull(direction) &&\n\t\t\tisThereAGap(board, firstFieldIndex, lastFieldIndex, direction)\n\t\t) {\n\t\t\tdirection = null\n\t\t}\n\t\treturn {\n\t\t\tfirstFieldIndex,\n\t\t\tlastFieldIndex,\n\t\t\tdirection,\n\t\t}\n\t},\n)\n","import { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { getFieldIndexOffset } from './getNextFieldIndex'\n\nexport function isThereAGap(\n\tboard: ReadonlyArray<IField>,\n\tstartFieldIndex: number,\n\tendFieldIndex: number,\n\tdirection: Direction,\n) {\n\tfor (\n\t\tlet fieldIndex = startFieldIndex;\n\t\tfieldIndex <= endFieldIndex;\n\t\tfieldIndex += getFieldIndexOffset(direction)\n\t) {\n\t\tif (!board[fieldIndex].tile) return true\n\t}\n\treturn false\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { getFieldIndexOffset } from '../fun/getNextFieldIndex'\nimport { getWordsAt } from '../fun/getWordsAt'\nimport { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { selectWordInfo } from './selectWordInfo'\nimport { selectBoard } from './simpleSelectors'\n\nexport const selectAllOwnedWords = createSelector(\n\t[selectBoard, selectWordInfo],\n\t(board, { firstFieldIndex, lastFieldIndex, direction }): IField[][] => {\n\t\tconst words: IField[][] = []\n\t\tlet mainWord: IField[] | null = null\n\t\tif (\n\t\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t\t!isUndefinedOrNull(direction)\n\t\t) {\n\t\t\tlet fieldIndex = firstFieldIndex\n\t\t\tlet field = board[fieldIndex]\n\t\t\twhile (field && field.tile) {\n\t\t\t\tif (field.tile.isOwned) {\n\t\t\t\t\tconst { horizontal, vertical } = getWordsAt(\n\t\t\t\t\t\tboard,\n\t\t\t\t\t\tfieldIndex,\n\t\t\t\t\t)\n\t\t\t\t\tif (direction === Direction.Horizontal) {\n\t\t\t\t\t\twords.push(vertical.word)\n\t\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t\t// words.push(word.horizontal)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmainWord = horizontal.word\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twords.push(horizontal.word)\n\t\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t\t// words.push(word.vertical)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmainWord = vertical.word\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfieldIndex += getFieldIndexOffset(direction)\n\t\t\t\tif (fieldIndex > lastFieldIndex) break\n\t\t\t\tfield = board[fieldIndex]\n\t\t\t}\n\t\t}\n\t\tif (mainWord) words.push(mainWord)\n\t\treturn words.filter(_ => _.length > 0)\n\t},\n)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { getWordString } from '../fun/getWordString'\nimport { isWordStringValid } from '../fun/isWordStringValid'\nimport { CENTER_FIELD_INDEX } from '../model/Constants'\nimport { FieldKind } from '../model/FieldKind'\nimport { MoveError } from '../model/MoveError'\nimport { selectAllOwnedWords } from './selectAllOwnedWords'\nimport { selectWordInfo } from './selectWordInfo'\nimport { selectBoard } from './simpleSelectors'\n\nexport const selectMoveErrors = createSelector(\n\t[selectBoard, selectAllOwnedWords, selectWordInfo],\n\t(board, words, { firstFieldIndex, lastFieldIndex, direction }) => {\n\t\tconst errors: Set<MoveError> = new Set()\n\t\tif (isUndefinedOrNull(firstFieldIndex)) {\n\t\t\terrors.add(MoveError.NoTile)\n\t\t}\n\t\tif (errors.size === 0) {\n\t\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\t\terrors.add(MoveError.OneTile)\n\t\t\t}\n\t\t\tif (errors.size === 0) {\n\t\t\t\tif (isUndefinedOrNull(direction)) {\n\t\t\t\t\terrors.add(MoveError.NoDirection)\n\t\t\t\t}\n\t\t\t\tif (errors.size === 0) {\n\t\t\t\t\tlet touchesStart = false\n\t\t\t\t\tlet touchesUnowned = false\n\t\t\t\t\tfor (const word of words) {\n\t\t\t\t\t\tif (!isWordStringValid(getWordString(word))) {\n\t\t\t\t\t\t\terrors.add(MoveError.InvalidWord)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const field of word) {\n\t\t\t\t\t\t\tif (field.kind === FieldKind.Start) {\n\t\t\t\t\t\t\t\ttouchesStart = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (field.tile && !field.tile.isOwned) {\n\t\t\t\t\t\t\t\ttouchesUnowned = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isUndefinedOrNull(board[CENTER_FIELD_INDEX].tile)) {\n\t\t\t\t\t\terrors.add(MoveError.NoStart)\n\t\t\t\t\t} else if (!touchesUnowned && !touchesStart) {\n\t\t\t\t\t\terrors.add(MoveError.NoConnection)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Array.from(errors)\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { IAppState } from '../model/AppState'\nimport { MoveError } from '../model/MoveError'\nimport { selectMoveErrors } from '../select/selectMoveErrors'\nimport { DispatchProp } from './DispatchProp'\nimport './ErrorsComp.css'\n\ninterface ErrorsCompPropsFromState {\n\terrors: MoveError[]\n}\nexport interface ErrorsCompProps\n\textends ErrorsCompPropsFromState,\n\t\tDispatchProp {}\n\nexport const ErrorsComp = connect(\n\t(state: IAppState): ErrorsCompPropsFromState => ({\n\t\terrors: selectMoveErrors(state),\n\t}),\n)(({ dispatch, errors }: ErrorsCompProps) => {\n\treturn (\n\t\t<>\n\t\t\t{errors.length > 0 && (\n\t\t\t\t<div className='errors'>\n\t\t\t\t\t{Array.from(errors)\n\t\t\t\t\t\t.map(e => {\n\t\t\t\t\t\t\tswitch (e) {\n\t\t\t\t\t\t\t\tcase MoveError.InvalidWord:\n\t\t\t\t\t\t\t\t\treturn `Van egy érvénytelen szavad!`\n\t\t\t\t\t\t\t\tcase MoveError.NoConnection:\n\t\t\t\t\t\t\t\t\treturn `Kapcsolódnod kell a meglévő lapkákhoz!`\n\t\t\t\t\t\t\t\tcase MoveError.NoDirection:\n\t\t\t\t\t\t\t\t\treturn `Egy vonalba tedd a lapkáid, hézag nélkül!`\n\t\t\t\t\t\t\t\tcase MoveError.NoStart:\n\t\t\t\t\t\t\t\t\treturn `Érintened kell a Start mezőt!`\n\t\t\t\t\t\t\t\tcase MoveError.NoTile:\n\t\t\t\t\t\t\t\t\treturn `Tégy le egy lapkát!`\n\t\t\t\t\t\t\t\tcase MoveError.OneTile:\n\t\t\t\t\t\t\t\t\treturn `Egy érvényes szóhoz legalább két lapka kell!`\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\treturn `[ppy6tx]: ${e}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map((e, index) => (\n\t\t\t\t\t\t\t<div key={index}>{e}</div>\n\t\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t)\n})\n","import { createSelector } from 'reselect'\nimport { Mode } from '../model/Mode'\nimport { IPlayer } from '../model/Player'\nimport { selectMode, selectPlayers } from './simpleSelectors'\n\nexport const selectWinners = createSelector(\n\t[selectPlayers, selectMode],\n\t(players, mode) => {\n\t\tif (mode !== Mode.Ended) return []\n\t\tlet winningScore = -1\n\t\tlet winners: IPlayer[] = []\n\t\tfor (let player of players) {\n\t\t\tif (player.score > winningScore) {\n\t\t\t\twinningScore = player.score\n\t\t\t\twinners = [player]\n\t\t\t} else if (player.score === winningScore) {\n\t\t\t\twinners.push(player)\n\t\t\t}\n\t\t}\n\t\treturn winners\n\t},\n)\n","import { createSelector } from 'reselect'\nimport { selectWinners } from './selectWinners'\nimport { selectPlayers } from './simpleSelectors'\n\nexport const selectIsGameDrawn = createSelector(\n\t[selectPlayers, selectWinners],\n\t(players, winners) => {\n\t\treturn players.length === winners.length\n\t},\n)\n","import { createSelector } from 'reselect'\nimport { selectWinners } from './selectWinners'\n\nexport const selectWinnersNames = createSelector(\n\t[selectWinners],\n\twinners => {\n\t\tif (winners.length === 0) return ``\n\t\tconst winnerNames = winners.map(winner => winner.name)\n\t\tconst last = winnerNames[winnerNames.length - 1]\n\t\tconst rest = winnerNames.slice(0, winnerNames.length - 1)\n\t\treturn rest.length ? `${rest.join(', ')} és ${last}` : last\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { setPlayerName } from '../action/actions'\nimport { saveGameThunk } from '../action/saveGameThunk'\nimport { numberToSignedString } from '../fun/numberToSignedString'\nimport { IAppState } from '../model/AppState'\nimport { TPlayers } from '../model/Player'\nimport { selectPlayers } from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\nimport './PlayersComp.css'\n\nexport interface PlayersCompPropsFromStore {\n\tplayers: TPlayers\n\tplayerIndex: number | null\n\tplayerBonuses: ReadonlyArray<number> | null\n}\nexport interface PlayersCompProps\n\textends PlayersCompPropsFromStore,\n\t\tDispatchProp {\n\tisEnabled?: boolean\n}\n\nexport const PlayersComp = connect(\n\t(state: IAppState): PlayersCompPropsFromStore => ({\n\t\tplayers: selectPlayers(state),\n\t\tplayerIndex: state.playerIndex,\n\t\tplayerBonuses: state.playerBonuses,\n\t}),\n)(\n\t({\n\t\tplayers,\n\t\tplayerIndex,\n\t\tplayerBonuses,\n\t\tdispatch,\n\t\tisEnabled,\n\t}: PlayersCompProps) => {\n\t\treturn (\n\t\t\t<table className='players'>\n\t\t\t\t<tbody>\n\t\t\t\t\t{players.map((player, aPlayerIndex) => (\n\t\t\t\t\t\t<tr className='player' key={aPlayerIndex}>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{isEnabled ? (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName='player-name-button'\n\t\t\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\t\t\tconst name = prompt(`Mi a neved?`)\n\t\t\t\t\t\t\t\t\t\t\tif (name && name.trim()) {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetPlayerName({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayerIndex: aPlayerIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: name.trim(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch(saveGameThunk())\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{player.name}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\tplayer.name\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t{isEnabled && (\n\t\t\t\t\t\t\t\t<td>{aPlayerIndex === playerIndex && `•`}</td>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{player.score}\n\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t{playerBonuses && (\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<div className='player-bonus'>\n\t\t\t\t\t\t\t\t\t\t{numberToSignedString(\n\t\t\t\t\t\t\t\t\t\t\tplayerBonuses[aPlayerIndex],\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t)\n\t},\n)\n","export function numberToSignedString(n: number) {\n\tif (n >= 0) return `+${n}`\n\telse return n + ''\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { newGameThunk } from '../action/newGameThunk'\nimport { IAppState } from '../model/AppState'\nimport { Mode } from '../model/Mode'\nimport { selectIsGameDrawn } from '../select/selectIsGameDrawn'\nimport { selectWinnersNames } from '../select/selectWinnersNames'\nimport { selectMode } from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\nimport { PlayersComp } from './PlayersComp'\n\nexport interface GameEndedCompPropsFromStore {\n\tmode: Mode\n\twinnerName: string\n\tisGameDrawn: boolean\n}\nexport interface GameEndedCompProps\n\textends GameEndedCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const GameEndedComp = connect(\n\t(state: IAppState): GameEndedCompPropsFromStore => ({\n\t\tmode: selectMode(state),\n\t\tisGameDrawn: selectIsGameDrawn(state),\n\t\twinnerName: selectWinnersNames(state),\n\t}),\n)(({ dispatch, mode, winnerName, isGameDrawn }: GameEndedCompProps) => {\n\treturn (\n\t\t<>\n\t\t\t<div>{isGameDrawn ? `Döntetlen!` : `${winnerName} győzött!`}</div>\n\t\t\t<PlayersComp />\n\t\t\t<button\n\t\t\t\tonClick={e => {\n\t\t\t\t\tdispatch(newGameThunk())\n\t\t\t\t}}\n\t\t\t>{`Új játék`}</button>\n\t\t</>\n\t)\n})\n","import { isUndefinedOrNull } from 'illa/Type'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { isNullOrUndefined } from 'util'\nimport {\n\tselectHand,\n\tswapHandAndBoard,\n\tswapHands,\n\ttoggleHandIndexToReplace,\n} from '../action/actions'\nimport { IAppState } from '../model/AppState'\nimport { TBoard } from '../model/Board'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport {\n\tselectBoard,\n\tselectHandIndicesToReplace,\n\tselectHands,\n\tselectMode,\n} from '../select/simpleSelectors'\nimport { AspectComp } from './AspectComp'\nimport { DispatchProp } from './DispatchProp'\nimport './HandComp.css'\nimport { TileComp } from './TileComp'\n\ninterface HandCompPropsFromState {\n\thands: THands\n\tplayerIndex: number | null\n\thandIndex: number | null\n\tboard: TBoard\n\tfieldIndex: number | null\n\tmode: Mode\n\thandIndicesToReplace: THandIndicesToReplace\n}\nexport interface HandCompProps extends HandCompPropsFromState, DispatchProp {}\n\nexport const HandComp = connect(\n\t(state: IAppState): HandCompPropsFromState => ({\n\t\thands: selectHands(state),\n\t\tplayerIndex: state.playerIndex,\n\t\thandIndex: state.handIndex,\n\t\tfieldIndex: state.fieldIndex,\n\t\tboard: selectBoard(state),\n\t\thandIndicesToReplace: selectHandIndicesToReplace(state),\n\t\tmode: selectMode(state),\n\t}),\n)(\n\t({\n\t\tboard,\n\t\tdispatch,\n\t\tfieldIndex,\n\t\thandIndex,\n\t\thandIndicesToReplace,\n\t\thands,\n\t\tmode,\n\t\tplayerIndex,\n\t}: HandCompProps) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{!isNullOrUndefined(playerIndex) && (\n\t\t\t\t\t<div className='hand'>\n\t\t\t\t\t\t{hands[playerIndex].map((tile, aHandIndex) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={aHandIndex}\n\t\t\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t\t\t'hand-slot',\n\t\t\t\t\t\t\t\t\thandIndex === aHandIndex && 'is-selected',\n\t\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex] &&\n\t\t\t\t\t\t\t\t\t\t'is-to-be-replaced',\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tif (mode === Mode.ReplaceTiles) {\n\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\ttoggleHandIndexToReplace({\n\t\t\t\t\t\t\t\t\t\t\t\thandIndex: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconst field = fieldIndex\n\t\t\t\t\t\t\t\t\t\t\t? board[fieldIndex]\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\tconst tile = field && field.tile\n\t\t\t\t\t\t\t\t\t\tif (field && (!tile || tile.isOwned)) {\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\tswapHandAndBoard({\n\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfieldIndex: fieldIndex!,\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (handIndex === aHandIndex) {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\tselectHand({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tisUndefinedOrNull(handIndex)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectHand({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: hands[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayerIndex!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t][aHandIndex]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? aHandIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswapHands({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexA: handIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexB: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<AspectComp width={1} height={1}>\n\t\t\t\t\t\t\t\t\t{tile && (\n\t\t\t\t\t\t\t\t\t\t<TileComp tile={tile} neverOwned />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</AspectComp>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</>\n\t\t)\n\t},\n)\n","import { createSelector } from 'reselect'\nimport { getWordString } from '../fun/getWordString'\nimport { isWordStringValid } from '../fun/isWordStringValid'\nimport { IField } from '../model/Field'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { selectAllOwnedWords } from './selectAllOwnedWords'\n\nexport const selectOwnValidAndInvalidWords = createSelector(\n\t[selectAllOwnedWords],\n\t(words: IField[][]): IValidAndInvalidWords | null => {\n\t\tconst valid: IField[][] = []\n\t\tconst invalid: IField[][] = []\n\t\tfor (let word of words) {\n\t\t\tif (isWordStringValid(getWordString(word))) {\n\t\t\t\tvalid.push(word)\n\t\t\t} else {\n\t\t\t\tinvalid.push(word)\n\t\t\t}\n\t\t}\n\t\tif (valid.length > 0 || invalid.length > 0) {\n\t\t\treturn {\n\t\t\t\tvalid,\n\t\t\t\tinvalid,\n\t\t\t}\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t},\n)\n","import { IField } from '../model/Field'\nimport { FieldKind } from '../model/FieldKind'\n\nexport function getWordScore(word: ReadonlyArray<IField>): number {\n\tlet wordMulti = 1\n\treturn (\n\t\tword.reduce((sum, field) => {\n\t\t\tconst tile = field.tile\n\t\t\tlet tileScore = 0\n\t\t\tif (tile) {\n\t\t\t\ttileScore = tile.score\n\t\t\t\tif (tile.isOwned) {\n\t\t\t\t\tswitch (field.kind) {\n\t\t\t\t\t\tcase FieldKind.DoubleLetter:\n\t\t\t\t\t\t\ttileScore *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleLetter:\n\t\t\t\t\t\t\ttileScore *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.Start:\n\t\t\t\t\t\tcase FieldKind.DoubleWord:\n\t\t\t\t\t\t\twordMulti *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleWord:\n\t\t\t\t\t\t\twordMulti *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sum + tileScore\n\t\t}, 0) * wordMulti\n\t)\n}\n","import * as React from 'react'\nimport { getWordScore } from '../fun/getWordScore'\nimport { getWordString } from '../fun/getWordString'\nimport { IField } from '../model/Field'\n\nexport interface WordListCompProps {\n\twords: ReadonlyArray<ReadonlyArray<IField>>\n\tshowScore?: boolean\n\twordClassName?: string\n\tscoreClassName?: string\n\tlabel: React.ReactChild\n}\n\nexport function WordListComp({\n\twords,\n\tshowScore,\n\twordClassName,\n\tscoreClassName,\n\tlabel,\n}: WordListCompProps) {\n\treturn (\n\t\t<>\n\t\t\t{words.length > 0 && (\n\t\t\t\t<div>\n\t\t\t\t\t{label}\n\t\t\t\t\t{`: `}\n\t\t\t\t\t{words.map((word, index) => {\n\t\t\t\t\t\tconst wordString = getWordString(word)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t{index > 0 && <>{`, `}</>}\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tclassName={wordClassName}\n\t\t\t\t\t\t\t\t\thref={`http://ertelmezo.oszk.hu/kereses.php?csakcimben=on&kereses=${encodeURIComponent(\n\t\t\t\t\t\t\t\t\t\t`\"${wordString}\"`,\n\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{wordString.replace(' ', ' ')}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t{showScore && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t\t<span className={scoreClassName}>\n\t\t\t\t\t\t\t\t\t\t\t{getWordScore(word)}\n\t\t\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t)\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { IAppState } from '../model/AppState'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { selectOwnValidAndInvalidWords } from '../select/selectOwnValidAndInvalidWords'\nimport { DispatchProp } from './DispatchProp'\nimport './OwnWordInfoComp.css'\nimport { WordListComp } from './WordListComp'\n\nexport interface OwnWordInfoCompPropsFromStore {\n\twords: IValidAndInvalidWords | null\n}\nexport interface OwnWordInfoCompProps\n\textends OwnWordInfoCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const OwnWordInfoComp = connect(\n\t(state: IAppState): OwnWordInfoCompPropsFromStore => ({\n\t\twords: selectOwnValidAndInvalidWords(state),\n\t}),\n)(({ words, dispatch }: OwnWordInfoCompProps) => {\n\treturn (\n\t\t<>\n\t\t\t{words && (\n\t\t\t\t<div className='own-word-info'>\n\t\t\t\t\t<WordListComp\n\t\t\t\t\t\twords={words.valid}\n\t\t\t\t\t\tlabel={`Érvényes szavak`}\n\t\t\t\t\t\tshowScore\n\t\t\t\t\t\twordClassName='valid-word'\n\t\t\t\t\t\tscoreClassName='word-score'\n\t\t\t\t\t/>\n\t\t\t\t\t<WordListComp\n\t\t\t\t\t\twords={words.invalid}\n\t\t\t\t\t\tlabel={`Érvényetelen szavak`}\n\t\t\t\t\t\twordClassName='invalid-word'\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t)\n})\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { getWordsAt } from '../fun/getWordsAt'\nimport { getWordString } from '../fun/getWordString'\nimport { isWordStringValid } from '../fun/isWordStringValid'\nimport { IField } from '../model/Field'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { selectBoard, selectFieldIndex } from './simpleSelectors'\n\nexport const selectPlacedValidAndInvalidWords = createSelector(\n\t[selectFieldIndex, selectBoard],\n\t(fieldIndex, board): IValidAndInvalidWords | null => {\n\t\tif (isUndefinedOrNull(fieldIndex)) return null\n\t\tconst field = board[fieldIndex]\n\t\tif (!field || !field.tile || field.tile.isOwned) return null\n\t\tconst w = getWordsAt(board, fieldIndex)\n\t\tconst words = [w.horizontal.word, w.vertical.word].filter(\n\t\t\tword => word.length > 1,\n\t\t)\n\t\tconst valid: IField[][] = []\n\t\tconst invalid: IField[][] = []\n\t\tfor (let word of words) {\n\t\t\tif (isWordStringValid(getWordString(word))) {\n\t\t\t\tvalid.push(word)\n\t\t\t} else {\n\t\t\t\tinvalid.push(word)\n\t\t\t}\n\t\t}\n\t\tif (valid.length > 0 || invalid.length > 0) {\n\t\t\treturn {\n\t\t\t\tvalid,\n\t\t\t\tinvalid,\n\t\t\t}\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { IAppState } from '../model/AppState'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { selectPlacedValidAndInvalidWords } from '../select/selectPlacedValidAndInvalidWords'\nimport { DispatchProp } from './DispatchProp'\nimport './PlacedWordInfoComp.css'\nimport { WordListComp } from './WordListComp'\n\nexport interface PlacedWordInfoCompPropsFromStore {\n\twords: IValidAndInvalidWords | null\n}\nexport interface PlacedWordInfoCompProps\n\textends PlacedWordInfoCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const PlacedWordInfoComp = connect(\n\t(state: IAppState): PlacedWordInfoCompPropsFromStore => ({\n\t\twords: selectPlacedValidAndInvalidWords(state),\n\t}),\n)(({ words, dispatch }: PlacedWordInfoCompProps) => {\n\treturn (\n\t\t<>\n\t\t\t{words && (\n\t\t\t\t<div className='placed-word-info'>\n\t\t\t\t\t<WordListComp\n\t\t\t\t\t\twords={words.valid}\n\t\t\t\t\t\tlabel={`Szavak a választott mezőn`}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t)\n})\n","import { createSelector } from 'reselect'\nimport { getWordScore } from '../fun/getWordScore'\nimport { BINGO_SCORE } from '../model/Constants'\nimport { selectIsBingo } from './selectIsBingo'\nimport { selectOwnValidAndInvalidWords } from './selectOwnValidAndInvalidWords'\n\nexport const selectMoveScore = createSelector(\n\t[selectOwnValidAndInvalidWords, selectIsBingo],\n\t(words, isBingo): number => {\n\t\tlet score = 0\n\t\tif (words) {\n\t\t\tfor (let word of words.valid) {\n\t\t\t\tscore += getWordScore(word)\n\t\t\t}\n\t\t\tif (words.valid.length && isBingo) score += BINGO_SCORE\n\t\t}\n\t\treturn score\n\t},\n)\n","import memoizee from 'memoizee'\nimport { THand } from '../model/Hands'\n\nexport const getHandValue = memoizee(\n\t(hand: THand) => {\n\t\treturn hand.reduce((sum, tile) => sum + (tile ? tile.score : 0), 0)\n\t},\n\t{ max: 2 },\n)\n","import { createSelector } from 'reselect'\nimport { getHandValue } from '../fun/getHandValue'\nimport { selectHands } from './simpleSelectors'\n\nexport const selectEmptyHandBonus = createSelector(\n\t[selectHands],\n\thands => {\n\t\treturn hands.reduce((sum, hand) => sum + getHandValue(hand), 0)\n\t},\n)\n","import { createSelector } from 'reselect'\nimport { isNull } from 'util'\nimport { getHandValue } from '../fun/getHandValue'\nimport { selectEmptyHandBonus } from './selectEmptyHandBonus'\nimport { selectHands } from './simpleSelectors'\n\nexport const selectPlayerBonuses = createSelector(\n\t[selectHands, selectEmptyHandBonus],\n\t(hands, emptyHandBonus) => {\n\t\treturn hands.map(hand => {\n\t\t\tif (hand.filter(isNull).length === 7) {\n\t\t\t\treturn emptyHandBonus\n\t\t\t} else {\n\t\t\t\treturn -getHandValue(hand)\n\t\t\t}\n\t\t})\n\t},\n)\n","import { Mode } from '../model/Mode'\nimport { selectPlayerBonuses } from '../select/selectPlayerBonuses'\nimport { scoreBonuses, setMode } from './actions'\nimport { ThunkValue } from './ThunkValue'\n\nexport function endGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst state = getState()\n\t\tdispatch(scoreBonuses(selectPlayerBonuses(state)))\n\t\tdispatch(setMode(Mode.Ended))\n\t}\n}\n","import { get } from 'illa/FunctionUtil'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { collectTiles, setJokerLetter, setMode } from '../action/actions'\nimport { doneThunk } from '../action/doneThunk'\nimport { newGameThunk } from '../action/newGameThunk'\nimport { skipThunk } from '../action/skipThunk'\nimport { IAppState } from '../model/AppState'\nimport { TBag } from '../model/Bag'\nimport { TBoard } from '../model/Board'\nimport { Mode } from '../model/Mode'\nimport { MoveError } from '../model/MoveError'\nimport letters from '../res/letters.json'\nimport { selectMoveErrors } from '../select/selectMoveErrors'\nimport { selectMoveScore } from '../select/selectMoveScore'\nimport { selectBag, selectBoard } from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\nimport './PlaceTileButtonsComp.css'\n\ninterface PlaceTileButtonsCompPropsFromStore {\n\tboard: TBoard\n\tfieldIndex: number | null\n\tbag: TBag\n\tmoveScore: number\n\tmoveErrors: MoveError[]\n}\nexport interface PlaceTileButtonsCompProps\n\textends PlaceTileButtonsCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const PlaceTileButtonsComp = connect(\n\t(state: IAppState): PlaceTileButtonsCompPropsFromStore => ({\n\t\tbag: selectBag(state),\n\t\tboard: selectBoard(state),\n\t\tfieldIndex: state.fieldIndex,\n\t\tmoveScore: selectMoveScore(state),\n\t\tmoveErrors: selectMoveErrors(state),\n\t}),\n)(\n\t({\n\t\tboard,\n\t\tfieldIndex,\n\t\tbag,\n\t\tmoveScore,\n\t\tmoveErrors,\n\t\tdispatch,\n\t}: PlaceTileButtonsCompProps) => {\n\t\treturn (\n\t\t\t<div className='buttons'>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={moveErrors.length > 0}\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(doneThunk())\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Oké`}\n\t\t\t\t\t{moveScore > 0 && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{`: `}\n\t\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\t\t{moveScore}\n\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Szedd össze`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={bag.length < 7}\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t\tdispatch(setMode(Mode.ReplaceTiles))\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Csere`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tif (window.confirm(`Biztos hogy nem teszel semmit?`)) {\n\t\t\t\t\t\t\tdispatch(skipThunk())\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Kihagyom`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\twindow.confirm(\n\t\t\t\t\t\t\t\t`Biztos hogy új játékot akarsz kezdeni?`,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdispatch(newGameThunk())\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Új játék`}\n\t\t\t\t</button>\n\t\t\t\t{get(() => board[fieldIndex!].tile!.isJoker) && (\n\t\t\t\t\t<select\n\t\t\t\t\t\tvalue={board[fieldIndex!].tile!.letter}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tdispatch(setJokerLetter({ letter: e.target.value }))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{letters.map((letter, index) => (\n\t\t\t\t\t\t\t<option key={index}>{letter.letter}</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t},\n)\n","import { selectHandCount } from '../select/selectHandCount'\nimport { selectMoveScore } from '../select/selectMoveScore'\nimport { selectBag } from '../select/simpleSelectors'\nimport { disownTiles, fillHand, resetSkipCount, score } from './actions'\nimport { endGameThunk } from './endGameThunk'\nimport { nextPlayerAndSaveThunk } from './nextPlayerAndSaveThunk'\nimport { ThunkValue } from './ThunkValue'\n\nexport function doneThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tdispatch(score(selectMoveScore(getState())))\n\t\tdispatch(disownTiles())\n\t\tdispatch(resetSkipCount())\n\t\tdispatch((dispatch, getState) => {\n\t\t\tconst state = getState()\n\t\t\tif (selectBag(state).length || selectHandCount(state)) {\n\t\t\t\tdispatch(fillHand())\n\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t} else {\n\t\t\t\tdispatch(endGameThunk())\n\t\t\t}\n\t\t})\n\t}\n}\n","import { collectTiles, incrementSkipCount } from './actions'\nimport { endGameThunk } from './endGameThunk'\nimport { nextPlayerAndSaveThunk } from './nextPlayerAndSaveThunk'\nimport { ThunkValue } from './ThunkValue'\n\nexport function skipThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tdispatch(incrementSkipCount())\n\t\tdispatch((dispatch, getState) => {\n\t\t\tconst state = getState()\n\t\t\tif ((state.skipCount || 0) > 3) {\n\t\t\t\tdispatch(endGameThunk())\n\t\t\t} else {\n\t\t\t\tdispatch(collectTiles())\n\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t}\n\t\t})\n\t}\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport {\n\taddTilesToBag,\n\tdeselectTilesToReplace,\n\tfillHand,\n\tremoveTilesToReplaceFromHand,\n\tresetSkipCount,\n\tsetMode,\n} from '../action/actions'\nimport { nextPlayerAndSaveThunk } from '../action/nextPlayerAndSaveThunk'\nimport { IAppState } from '../model/AppState'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport { ITile } from '../model/Tile'\nimport {\n\tselectHandIndicesToReplace,\n\tselectHands,\n} from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\n\nexport interface ReplaceTilesButtonsCompPropsFromStore {\n\thands: THands\n\tplayerIndex: number | null\n\thandIndicesToReplace: THandIndicesToReplace\n}\nexport interface ReplaceTilesButtonsCompProps\n\textends ReplaceTilesButtonsCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const ReplaceTilesButtonsComp = connect(\n\t(state: IAppState): ReplaceTilesButtonsCompPropsFromStore => ({\n\t\thandIndicesToReplace: selectHandIndicesToReplace(state),\n\t\thands: selectHands(state),\n\t\tplayerIndex: state.playerIndex,\n\t}),\n)(\n\t({\n\t\thands,\n\t\tplayerIndex,\n\t\thandIndicesToReplace,\n\t\tdispatch,\n\t}: ReplaceTilesButtonsCompProps) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\t\t\tconst tilesToReplace = hand.filter(\n\t\t\t\t\t\t\t(tile, aHandIndex) =>\n\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex],\n\t\t\t\t\t\t) as ITile[]\n\t\t\t\t\t\tdispatch(removeTilesToReplaceFromHand())\n\t\t\t\t\t\tdispatch(deselectTilesToReplace())\n\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\tdispatch(addTilesToBag({ tiles: tilesToReplace }))\n\t\t\t\t\t\tdispatch(resetSkipCount())\n\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t\t\t}}\n\t\t\t\t>{`Csere`}</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(deselectTilesToReplace())\n\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t}}\n\t\t\t\t>{`Mégse`}</button>\n\t\t\t</>\n\t\t)\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { loadGameThunk } from '../action/loadGameThunk'\nimport { newGameThunk } from '../action/newGameThunk'\nimport { savedGameExists } from '../fun/savedGameExists'\nimport { IAppState } from '../model/AppState'\nimport { TBag } from '../model/Bag'\nimport { BINGO_SCORE } from '../model/Constants'\nimport { Mode } from '../model/Mode'\nimport { selectIsBingo } from '../select/selectIsBingo'\nimport { selectBag, selectMode } from '../select/simpleSelectors'\nimport './AppComp.css'\nimport { BagComp } from './BagComp'\nimport { BoardComp } from './BoardComp'\nimport { DispatchProp } from './DispatchProp'\nimport { ErrorsComp } from './ErrorsComp'\nimport { GameEndedComp } from './GameEndedComp'\nimport { HandComp } from './HandComp'\nimport { OwnWordInfoComp } from './OwnWordInfoComp'\nimport { PlacedWordInfoComp } from './PlacedWordInfoComp'\nimport { PlaceTileButtonsComp } from './PlaceTileButtonsComp'\nimport { PlayersComp } from './PlayersComp'\nimport { ReplaceTilesButtonsComp } from './ReplaceTilesButtonsComp'\n\ninterface IAppCompPropsFromState {\n\tmode: Mode\n\tbag: TBag\n\tisBingo: boolean\n}\nexport interface IAppCompProps extends IAppCompPropsFromState, DispatchProp {}\n\nexport const AppComp = connect(\n\t(state: IAppState): IAppCompPropsFromState => ({\n\t\tmode: selectMode(state),\n\t\tbag: selectBag(state),\n\t\tisBingo: selectIsBingo(state),\n\t}),\n)(({ mode, bag, isBingo, dispatch }: IAppCompProps) => {\n\treturn (\n\t\t<>\n\t\t\t<BoardComp />\n\t\t\t<div className='tools'>\n\t\t\t\t{mode === Mode.NotStarted && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{savedGameExists() && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tdispatch(loadGameThunk())\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>{`Folytatás`}</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\tdispatch(newGameThunk())\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>{`Új játék`}</button>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.PlaceTile && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<PlayersComp isEnabled />\n\t\t\t\t\t\t<BagComp bag={bag} />\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t{isBingo && (\n\t\t\t\t\t\t\t<div className='bingo'>{`+${BINGO_SCORE} pont!`}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<OwnWordInfoComp />\n\t\t\t\t\t\t<ErrorsComp />\n\t\t\t\t\t\t<PlaceTileButtonsComp />\n\t\t\t\t\t\t<PlacedWordInfoComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.ReplaceTiles && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t<ReplaceTilesButtonsComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.Ended && <GameEndedComp />}\n\t\t\t</div>\n\t\t</>\n\t)\n})\n","import { get } from 'illa/FunctionUtil'\nimport { LocalStorageKey } from '../model/LocalStorageKey'\n\nexport function savedGameExists() {\n\treturn !!get(() => localStorage[LocalStorageKey.SavedGame])\n}\n","import { get } from 'illa/FunctionUtil'\nimport { IAppState } from '../model/AppState'\nimport { LocalStorageKey } from '../model/LocalStorageKey'\nimport { setGame } from './actions'\nimport { ThunkValue } from './ThunkValue'\n\nexport function loadGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst savedGame = get(() =>\n\t\t\tJSON.parse(localStorage[LocalStorageKey.SavedGame]),\n\t\t)\n\t\tif (savedGame) {\n\t\t\tconst game: IAppState = savedGame.app || savedGame\n\t\t\tif (game) {\n\t\t\t\tdispatch(setGame({ game }))\n\t\t\t}\n\t\t}\n\t}\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { Draft, produce } from 'immer'\nimport {\n\taddTilesToBag,\n\tcollectTiles,\n\tdeselectTilesToReplace,\n\tdisownTiles,\n\tfillHand,\n\tincrementSkipCount,\n\tnextPlayer,\n\tremoveTilesToReplaceFromHand,\n\tresetGame,\n\tresetSkipCount,\n\tscore,\n\tscoreBonuses,\n\tselectHand,\n\tsetGame,\n\tsetJokerLetter,\n\tsetMode,\n\tsetPlayerName,\n\tsetSelectedField,\n\tswapHandAndBoard,\n\tswapHands,\n\tswapTiles,\n\ttoggleHandIndexToReplace,\n} from '../action/actions'\nimport { TAction } from '../action/TAction'\nimport { getHandTileCount } from '../fun/getHandTileCount'\nimport { createBag, TBag } from './Bag'\nimport { createBoard, TBoard } from './Board'\nimport {\n\tcreateHandIndicesToReplace,\n\tTHandIndicesToReplace,\n} from './HandIndicesToReplace'\nimport { createHands, THands } from './Hands'\nimport { Mode } from './Mode'\nimport { createPlayers, TPlayers } from './Player'\nimport { ITile } from './Tile'\n\nexport interface IAppState {\n\treadonly mode: Mode\n\treadonly players: TPlayers\n\treadonly playerIndex: number | null\n\treadonly board: TBoard\n\treadonly bag: TBag\n\treadonly fieldIndex: number | null\n\treadonly handIndex: number | null\n\treadonly hands: THands\n\treadonly handIndicesToReplace: THandIndicesToReplace\n\treadonly startingHandCount: number | null\n\treadonly skipCount: number | null\n\treadonly playerBonuses: ReadonlyArray<number> | null\n}\n\nexport function createAppState(): IAppState {\n\treturn {\n\t\tmode: Mode.NotStarted,\n\t\tboard: createBoard(),\n\t\tbag: createBag(),\n\t\thands: createHands(),\n\t\tplayers: createPlayers(),\n\t\tplayerIndex: null,\n\t\tfieldIndex: null,\n\t\thandIndex: null,\n\t\thandIndicesToReplace: createHandIndicesToReplace(),\n\t\tstartingHandCount: null,\n\t\tskipCount: null,\n\t\tplayerBonuses: null,\n\t}\n}\n\nexport const appStateReducer = produce(\n\t(state: Draft<IAppState>, action: TAction) => {\n\t\tswitch (action.type) {\n\t\t\tcase collectTiles.type: {\n\t\t\t\tconst { board, playerIndex, hands } = state\n\t\t\t\tconst tiles: ITile[] = []\n\t\t\t\tfor (const field of board) {\n\t\t\t\t\tif (field.tile && field.tile.isOwned) {\n\t\t\t\t\t\tconst tile = field.tile\n\t\t\t\t\t\tfield.tile = null\n\t\t\t\t\t\ttiles.push(tile)\n\t\t\t\t\t\tif (tile.isJoker) tile.letter = ' '\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tfor (let i = 0; i < hand.length; i++) {\n\t\t\t\t\tif (isUndefinedOrNull(hand[i])) {\n\t\t\t\t\t\thand[i] = tiles.shift() || null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase disownTiles.type: {\n\t\t\t\tfor (const field of state.board) {\n\t\t\t\t\tif (field.tile) {\n\t\t\t\t\t\tfield.tile.isOwned = false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase fillHand.type: {\n\t\t\t\tconst { bag, hands, playerIndex } = state\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tconst count = Math.min(\n\t\t\t\t\tbag.length,\n\t\t\t\t\thand.length - getHandTileCount(hand),\n\t\t\t\t)\n\t\t\t\tconst tiles: ITile[] = []\n\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\tconst tile = bag.splice(\n\t\t\t\t\t\tMath.floor(Math.random() * bag.length),\n\t\t\t\t\t\t1,\n\t\t\t\t\t)[0]\n\t\t\t\t\ttile.isOwned = true\n\t\t\t\t\ttiles.push(tile)\n\t\t\t\t}\n\t\t\t\tconst newHand = (state.hands[playerIndex!] = hand.map(tile =>\n\t\t\t\t\ttile ? tile : tiles.shift() || null,\n\t\t\t\t))\n\t\t\t\tstate.startingHandCount = getHandTileCount(newHand)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase nextPlayer.type: {\n\t\t\t\tconst { playerIndex } = state\n\t\t\t\tstate.playerIndex = isUndefinedOrNull(playerIndex)\n\t\t\t\t\t? 0\n\t\t\t\t\t: 1 - playerIndex\n\t\t\t\tstate.fieldIndex = null\n\t\t\t\tstate.handIndex = null\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase resetGame.type:\n\t\t\t\treturn createAppState()\n\t\t\tcase score.type: {\n\t\t\t\tconst { players, playerIndex } = state\n\t\t\t\tplayers[playerIndex!].score += action.payload\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase setSelectedField.type: {\n\t\t\t\tstate.fieldIndex = action.payload.fieldIndex\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase selectHand.type: {\n\t\t\t\tstate.handIndex = action.payload.handIndex\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase setJokerLetter.type: {\n\t\t\t\tconst { board, fieldIndex } = state\n\t\t\t\tboard[fieldIndex!].tile!.letter = action.payload.letter\n\t\t\t\tstate.fieldIndex = null\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase setMode.type: {\n\t\t\t\tconst mode = action.payload\n\t\t\t\tif (mode !== state.mode) {\n\t\t\t\t\tstate.fieldIndex = null\n\t\t\t\t\tstate.handIndex = null\n\t\t\t\t}\n\t\t\t\tstate.mode = mode\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase setPlayerName.type: {\n\t\t\t\tconst { playerIndex, name } = action.payload\n\t\t\t\tstate.players[playerIndex].name = name\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase swapHandAndBoard.type: {\n\t\t\t\tconst { board, hands, playerIndex } = state\n\t\t\t\tconst { fieldIndex, handIndex } = action.payload\n\t\t\t\tconst field = board[fieldIndex]\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tconst tileOnBoard = field.tile\n\t\t\t\tconst tileInHand = hand[handIndex]\n\t\t\t\tstate.fieldIndex =\n\t\t\t\t\ttileInHand && tileInHand.isJoker ? fieldIndex : null\n\t\t\t\tstate.handIndex = null\n\t\t\t\tfield.tile = tileInHand\n\t\t\t\thand[handIndex] = tileOnBoard\n\t\t\t\tif (tileOnBoard && tileOnBoard.isJoker) {\n\t\t\t\t\ttileOnBoard.letter = ' '\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase swapHands.type: {\n\t\t\t\tconst { hands, playerIndex } = state\n\t\t\t\tconst { handIndexA, handIndexB } = action.payload\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tconst tileA = hand[handIndexA]\n\t\t\t\tconst tileB = hand[handIndexB]\n\t\t\t\tstate.handIndex = null\n\t\t\t\thand[handIndexA] = tileB\n\t\t\t\thand[handIndexB] = tileA\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase swapTiles.type: {\n\t\t\t\tconst { board } = state\n\t\t\t\tconst { fieldIndexA, fieldIndexB } = action.payload\n\t\t\t\tconst fieldATile = board[fieldIndexA].tile\n\t\t\t\tconst fieldBTile = board[fieldIndexB].tile\n\t\t\t\tstate.fieldIndex = null\n\t\t\t\tboard[fieldIndexA].tile = fieldBTile\n\t\t\t\tboard[fieldIndexB].tile = fieldATile\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase toggleHandIndexToReplace.type: {\n\t\t\t\tconst { handIndicesToReplace } = state\n\t\t\t\tconst { handIndex } = action.payload\n\t\t\t\thandIndicesToReplace[handIndex] = !handIndicesToReplace[\n\t\t\t\t\thandIndex\n\t\t\t\t]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase removeTilesToReplaceFromHand.type: {\n\t\t\t\tconst { handIndicesToReplace, playerIndex, hands } = state\n\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\tstate.hands[playerIndex!] = hand.map((tile, index) =>\n\t\t\t\t\thandIndicesToReplace[index] ? null : tile,\n\t\t\t\t)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase deselectTilesToReplace.type: {\n\t\t\t\tstate.handIndicesToReplace.fill(false)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase addTilesToBag.type: {\n\t\t\t\tstate.bag.push(...action.payload.tiles)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase setGame.type:\n\t\t\t\treturn action.payload.game\n\t\t\tcase incrementSkipCount.type: {\n\t\t\t\tstate.skipCount = (state.skipCount || 0) + 1\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase resetSkipCount.type: {\n\t\t\t\tstate.skipCount = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase scoreBonuses.type: {\n\t\t\t\tstate.playerBonuses = action.payload as number[]\n\t\t\t\tstate.players.forEach((player, playerIndex) => {\n\t\t\t\t\tplayer.score += action.payload[playerIndex]\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault:\n\t\t}\n\t},\n\tcreateAppState(),\n)\n","import { withInterface } from 'illa/Type'\nimport { IField } from './Field'\nimport { FieldKind } from './FieldKind'\n\nexport type TBoard = ReadonlyArray<IField>\n\nexport function createBoard(): TBoard {\n\treturn `\nW--l---W---l--W\n-w---L---L---w-\n--w---l-l---w--\nl--w---l---w--l\n----w-----w----\n-L---L---L---L-\n--l---l-l---l--\nW--l---s---l--W\n--l---l-l---l--\n-L---L---L---L-\n----w-----w----\nl--w---l---w--l\n--w---l-l---w--\n-w---L---L---w-\nW--l---W---l--W\n`\n\t\t.trim()\n\t\t.split(/\\n/)\n\t\t.flatMap(row =>\n\t\t\trow.split('').map(letter =>\n\t\t\t\twithInterface<IField>({\n\t\t\t\t\tkind: letter as FieldKind,\n\t\t\t\t\ttile: null,\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n}\n","import { range } from 'illa/ArrayUtil'\nimport { withInterface } from 'illa/Type'\nimport letters from '../res/letters.json'\nimport { ITile } from './Tile'\n\nexport type TBag = ReadonlyArray<ITile>\n\nexport function createBag(): TBag {\n\treturn letters.flatMap(({ count, letter, score }) =>\n\t\trange(count).map(_ =>\n\t\t\twithInterface<ITile>({\n\t\t\t\tletter,\n\t\t\t\tscore,\n\t\t\t\tisOwned: false,\n\t\t\t\tisJoker: letter === ' ',\n\t\t\t}),\n\t\t),\n\t)\n}\n","import { range } from 'illa/ArrayUtil'\nimport { ITile } from './Tile'\n\nexport type THand = ReadonlyArray<ITile | null>\nexport type THands = ReadonlyArray<THand>\n\nexport function createHands(): THands {\n\treturn range(2).map(_ => range(7).map(_ => null))\n}\n","import { range } from 'illa/ArrayUtil'\nimport { withInterface } from 'illa/Type'\n\nexport interface IPlayer {\n\tname: string\n\tscore: number\n}\n\nexport type TPlayers = ReadonlyArray<IPlayer>\n\nexport function createPlayers(): TPlayers {\n\treturn range(2).map(_ =>\n\t\twithInterface<IPlayer>({\n\t\t\tname: `${_ + 1}. Játékos`,\n\t\t\tscore: 0,\n\t\t}),\n\t)\n}\n","import { range } from 'illa/ArrayUtil'\n\nexport type THandIndicesToReplace = ReadonlyArray<boolean>\n\nexport function createHandIndicesToReplace(): THandIndicesToReplace {\n\treturn range(7).map(_ => false)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'normalize.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { configureStore } from 'redux-starter-kit'\nimport { AppComp } from './comp/AppComp'\nimport './index.css'\nimport { appStateReducer } from './model/AppState'\nimport * as serviceWorker from './serviceWorker'\n\nexport const store = configureStore({\n\treducer: appStateReducer,\n})\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<AppComp />\n\t</Provider>,\n\tdocument.getElementById('root'),\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}