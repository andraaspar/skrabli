{"version":3,"sources":["model/Mode.tsx","model/actions.tsx","select/simpleSelectors.tsx","comp/BagComp.tsx","model/FieldKind.tsx","select/selectField.tsx","select/selectHand.tsx","select/selectHandTile.tsx","comp/AspectComp.tsx","comp/TileComp.tsx","comp/BoardComp.tsx","action/selectFieldThunk.tsx","comp/HandComp.tsx","fun/getWordString.tsx","fun/isWordStringValid.tsx","model/Constants.tsx","model/MoveError.tsx","model/Direction.tsx","fun/getNextFieldIndex.tsx","fun/getColumnIndex.tsx","fun/getColumnLine.tsx","fun/getRowIndex.tsx","fun/getRowLine.tsx","fun/getWordFromLine.tsx","fun/getWordsAt.tsx","select/selectWordInfo.tsx","fun/isThereAGap.tsx","select/selectAllOwnedWords.tsx","select/selectMoveErrors.tsx","select/selectValidAndInvalidWords.tsx","fun/getWordScore.tsx","select/selectMoveScore.tsx","comp/PlaceTileButtonsComp.tsx","action/saveGameThunk.tsx","comp/PlayersComp.tsx","comp/ReplaceTilesButtonsComp.tsx","comp/WordInfoComp.tsx","comp/AppComp.tsx","model/AppState.tsx","model/Board.tsx","model/Bag.tsx","model/Hands.tsx","model/Player.tsx","model/HandIndicesToReplace.tsx","serviceWorker.ts","index.tsx"],"names":["Mode","collectTiles","createAction","disownTiles","fillHand","nextPlayer","resetGame","score","selectField","selectHand","setJokerLetter","setMode","setPlayerName","swapHandAndBoard","swapHands","swapTiles","toggleHandIndexToReplace","removeTilesToReplaceFromHand","deselectTilesToReplace","addTilesToBag","selectBoardFromAppState","state","board","selectBoardFromState","app","selectBagFromState","bag","selectHandsFromAppState","hands","selectHandsFromState","selectModeFromState","mode","selectHandIndicesToReplaceFromState","handIndicesToReplace","selectPlayersFromState","players","selectPlayerIndexFromAppState","playerIndex","selectHandIndexFromAppState","handIndex","selectHandIndexFromState","selectFieldIndexFromAppState","fieldIndex","selectFieldIndexFromState","BagComp","_ref","react","className","concat","length","FieldKind","selectFieldFromAppState","createSelector","isUndefinedOrNull","selectFieldFromState","s","selectHandFromAppState","selectHandTileFromAppState","hand","selectHandTileFromState","AspectComp","width","height","children","viewBox","TileComp","tile","neverOwned","AspectComp_AspectComp","isOwned","isJoker","filter","Boolean","join","letter","BoardComp","connect","dispatch","map","field","aFieldIndex","key","fieldKindToCssClass","kind","onClick","e","fieldIndexToSelect","getState","PlaceTile","handTile","oldField","fieldToSelect","get","fieldIndexA","fieldIndexB","TileComp_TileComp","k","Normal","DoubleLetter","DoubleWord","Start","TripleLetter","TripleWord","Error","fieldKindToLabel","HandComp","isNullOrUndefined","aHandIndex","ReplaceTiles","handIndexA","handIndexB","getWordString","word","_","isWordStringValid","w","words","indexOf","MoveError","Direction","BOARD_SIZE","CENTER_FIELD_INDEX","getFieldIndexOffset","direction","Horizontal","getColumnIndex","getColumnLine","columnIndex","column","rowIndex","push","getRowIndex","Math","floor","getRowLine","firstFieldIndex","slice","getWordFromLine","line","lineIndex","index","startLineIndex","endLineIndex","unshift","getWordsAt","horizontal","vertical","selectWordInfo","defaultMemoize","lastFieldIndex","colIndex","newColIndex","newRowIndex","Vertical","_getWordsAt","startFieldIndex","endFieldIndex","isThereAGap","selectWordInfoFromAppState","selectAllOwnedWords","_selectWordInfo","mainWord","selectAllOwnedWordsFromAppState","selectMoveErrors","errors","Set","add","NoTile","size","OneTile","NoDirection","touchesStart","touchesUnowned","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","InvalidWord","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","NoStart","NoConnection","Array","from","selectMoveErrorsFromState","selectValidAndInvalidWords","valid","invalid","getWordScore","wordMulti","reduce","sum","tileScore","selectMoveScore","PlaceTileButtonsComp","moveScore","moveErrors","disabled","localStorage","JSON","stringify","confirm","onChange","target","letters","PlayersComp","player","aPlayerIndex","name","prompt","trim","ReplaceTilesButtonsComp","tilesToReplace","tiles","WordInfoComp","_ref$words","wordString","href","encodeURIComponent","replace","AppComp","BoardComp_BoardComp","NotStarted","BagComp_BagComp","HandComp_HandComp","WordInfoComp_WordInfoComp","PlaceTileButtonsComp_PlaceTileButtonsComp","Finished","createAppState","split","flatMap","row","withInterface","count","range","appStateReducer","createReducer","_withInterface","Object","defineProperty","type","action","i","shift","min","splice","random","payload","_action$payload","_action$payload2","tileOnBoard","tileInHand","_action$payload3","tileA","tileB","_action$payload4","fieldATile","fieldBTile","fill","_state$bag","apply","toConsumableArray","window","location","hostname","match","__webpack_require__","d","__webpack_exports__","store","configureStore","reducer","preloadedState","parse","ReactDOM","render","react_default","a","createElement","es","AppComp_AppComp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a877308.chunk.js","sourcesContent":["export enum Mode {\n\tNotStarted = 'NotStarted',\n\tPlaceTile = 'PlaceTile',\n\tReplaceTiles = 'ReplaceTiles',\n\tFinished = 'Finished',\n}\n","import { createAction } from 'redux-starter-kit'\nimport { Mode } from './Mode'\nimport { ITile } from './Tile'\n\nexport const collectTiles = createAction<{}>('collectTiles')\nexport const disownTiles = createAction<{}>('disownTiles')\nexport const fillHand = createAction<{}>('fillHand')\nexport const nextPlayer = createAction<{}>('nextPlayer')\nexport const resetGame = createAction<{}>('resetGame')\nexport const score = createAction<{}>('score')\nexport const selectField = createAction<{ fieldIndex: number | null }>(\n\t'selectField',\n)\nexport const selectHand = createAction<{ handIndex: number | null }>(\n\t'selectHand',\n)\nexport const setJokerLetter = createAction<{ letter: string }>('setJokerLetter')\nexport const setMode = createAction<Mode>('setMode')\nexport const setPlayerName = createAction<{\n\tplayerIndex: number\n\tname: string\n}>('setPlayerName')\nexport const swapHandAndBoard = createAction<{\n\tfieldIndex: number\n\thandIndex: number\n}>('swapHandAndBoard')\nexport const swapHands = createAction<{\n\thandIndexA: number\n\thandIndexB: number\n}>('swapHands')\nexport const swapTiles = createAction<{\n\tfieldIndexA: number\n\tfieldIndexB: number\n}>('swapTiles')\nexport const toggleHandIndexToReplace = createAction<{\n\thandIndex: number\n}>('toggleHandIndexToReplace')\nexport const removeTilesToReplaceFromHand = createAction<{}>(\n\t'removeTilesToReplaceFromHand',\n)\nexport const deselectTilesToReplace = createAction<{}>('deselectTilesToReplace')\nexport const addTilesToBag = createAction<{ tiles: ITile[] }>('addTilesToBag')\n","import { TState } from '../index'\nimport { IAppState } from '../model/AppState'\nimport { TBag } from '../model/Bag'\nimport { TBoard } from '../model/Board'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport { TPlayers } from '../model/Player'\n\nexport const selectBoardFromAppState = (state: IAppState): TBoard => state.board\nexport const selectBoardFromState = (state: TState): TBoard =>\n\tselectBoardFromAppState(state.app)\nexport const selectBagFromState = (state: TState): TBag => state.app.bag\nexport const selectHandsFromAppState = (state: IAppState): THands => state.hands\nexport const selectHandsFromState = (state: TState): THands =>\n\tselectHandsFromAppState(state.app)\nexport const selectModeFromState = (state: TState): Mode => state.app.mode\nexport const selectHandIndicesToReplaceFromState = (\n\tstate: TState,\n): THandIndicesToReplace => state.app.handIndicesToReplace\nexport const selectPlayersFromState = (state: TState): TPlayers =>\n\tstate.app.players\nexport const selectPlayerIndexFromAppState = (state: IAppState) =>\n\tstate.playerIndex\nexport const selectPlayerIndexFromState = (state: TState) =>\n\tselectPlayerIndexFromAppState(state.app)\nexport const selectHandIndexFromAppState = (state: IAppState) => state.handIndex\nexport const selectHandIndexFromState = (state: TState) =>\n\tselectHandIndexFromAppState(state.app)\nexport const selectFieldIndexFromAppState = (state: IAppState) =>\n\tstate.fieldIndex\nexport const selectFieldIndexFromState = (state: TState) =>\n\tselectFieldIndexFromAppState(state.app)\n","import * as React from 'react'\nimport { TBag } from '../model/Bag'\nimport './BagComp.css'\n\nexport function BagComp({ bag }: { bag: TBag }) {\n\treturn <div className='bag'>{`Lapkák a zsákban: ${bag.length}`}</div>\n}\n","export enum FieldKind {\n\tNormal = '-',\n\tStart = 's',\n\tDoubleLetter = 'l',\n\tTripleLetter = 'L',\n\tDoubleWord = 'w',\n\tTripleWord = 'W',\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { TState } from '../index'\nimport {\n\tselectBoardFromAppState,\n\tselectFieldIndexFromAppState,\n} from './simpleSelectors'\n\nexport const selectFieldFromAppState = createSelector(\n\t[selectBoardFromAppState, selectFieldIndexFromAppState],\n\t(board, fieldIndex) => {\n\t\treturn isUndefinedOrNull(fieldIndex) ? null : board[fieldIndex]\n\t},\n)\nexport const selectFieldFromState = (s: TState) =>\n\tselectFieldFromAppState(s.app)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { TState } from '../index'\nimport {\n\tselectHandsFromAppState,\n\tselectPlayerIndexFromAppState,\n} from './simpleSelectors'\n\nexport const selectHandFromAppState = createSelector(\n\t[selectHandsFromAppState, selectPlayerIndexFromAppState],\n\t(hands, playerIndex) => {\n\t\treturn isUndefinedOrNull(playerIndex) ? null : hands[playerIndex]\n\t},\n)\n\nexport const selectHandFromState = (s: TState) => selectHandsFromAppState(s.app)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { TState } from '../index'\nimport { selectHandFromAppState } from './selectHand'\nimport { selectHandIndexFromAppState } from './simpleSelectors'\n\nexport const selectHandTileFromAppState = createSelector(\n\t[selectHandFromAppState, selectHandIndexFromAppState],\n\t(hand, handIndex) => {\n\t\treturn hand && !isUndefinedOrNull(handIndex) ? hand[handIndex] : null\n\t},\n)\n\nexport const selectHandTileFromState = (state: TState) =>\n\tselectHandTileFromAppState(state.app)\n","import * as React from 'react'\nimport './AspectComp.css'\n\nexport function AspectComp({\n\twidth,\n\theight,\n\tchildren,\n}: React.PropsWithChildren<{\n\twidth: number\n\theight: number\n}>) {\n\treturn (\n\t\t<div className='aspect'>\n\t\t\t<svg viewBox={`0 0 ${width} ${height}`} />\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n","import * as React from 'react'\nimport { ITile } from '../model/Tile'\nimport { AspectComp } from './AspectComp'\nimport './TileComp.css'\n\nexport function TileComp({\n\ttile,\n\tneverOwned,\n}: {\n\ttile: ITile\n\tneverOwned?: boolean\n}) {\n\treturn (\n\t\t<AspectComp width={1} height={1}>\n\t\t\t<div\n\t\t\t\tclassName={[\n\t\t\t\t\t'tile',\n\t\t\t\t\t!neverOwned && tile.isOwned && 'is-owned',\n\t\t\t\t\ttile.isJoker && 'is-joker',\n\t\t\t\t]\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.join(' ')}\n\t\t\t>\n\t\t\t\t<div className='tile-letter'>{tile.letter}</div>\n\t\t\t\t<div className='tile-score'>{tile.score}</div>\n\t\t\t</div>\n\t\t</AspectComp>\n\t)\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { selectFieldThunk } from '../action/selectFieldThunk'\nimport { TState } from '../index'\nimport { TBoard } from '../model/Board'\nimport { FieldKind } from '../model/FieldKind'\nimport { selectBoardFromState } from '../select/simpleSelectors'\nimport { AspectComp } from './AspectComp'\nimport './BoardComp.css'\nimport { DispatchProp } from './DispatchProp'\nimport { TileComp } from './TileComp'\n\ninterface BoardCompPropsFromState {\n\tfieldIndex: number | null\n\tboard: TBoard\n}\nexport interface BoardCompProps extends BoardCompPropsFromState, DispatchProp {}\n\nexport const BoardComp = connect(\n\t(state: TState): BoardCompPropsFromState => ({\n\t\tboard: selectBoardFromState(state),\n\t\tfieldIndex: state.app.fieldIndex,\n\t}),\n)(({ fieldIndex, board, dispatch }: BoardCompProps) => {\n\treturn (\n\t\t<div className='board'>\n\t\t\t{board.map((field, aFieldIndex) => (\n\t\t\t\t<AspectComp key={aFieldIndex} width={1} height={1}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t'board-field',\n\t\t\t\t\t\t\tfieldKindToCssClass(field.kind),\n\t\t\t\t\t\t\taFieldIndex === fieldIndex && 'is-selected',\n\t\t\t\t\t\t]\n\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\tdispatch(selectFieldThunk(aFieldIndex))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{field.tile ? (\n\t\t\t\t\t\t\t<TileComp tile={field.tile} />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tfieldKindToLabel(field.kind)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</AspectComp>\n\t\t\t))}\n\t\t</div>\n\t)\n})\n\nfunction fieldKindToCssClass(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn 'is-normal'\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn 'is-double-letter'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn 'is-double-word'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'is-start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn 'is-triple-letter'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn 'is-triple-word'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp03n]: ${k}`)\n\t}\n}\n\nfunction fieldKindToLabel(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn ' '\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn '2×\\nBetű'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn '2×\\nSzó'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'Start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn '3×\\nBetű'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn '3×\\nSzó'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp079]: ${k}`)\n\t}\n}\n","import { get } from 'illa/FunctionUtil'\nimport { isUndefinedOrNull } from 'illa/Type'\nimport { selectField, swapHandAndBoard, swapTiles } from '../model/actions'\nimport { Mode } from '../model/Mode'\nimport { selectFieldFromState } from '../select/selectField'\nimport { selectHandTileFromState } from '../select/selectHandTile'\nimport {\n\tselectBoardFromState,\n\tselectFieldIndexFromState,\n\tselectHandIndexFromState,\n\tselectModeFromState,\n} from '../select/simpleSelectors'\nimport { ThunkValue } from './ThunkValue'\n\nexport function selectFieldThunk(fieldIndexToSelect: number): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst state = getState()\n\t\tconst mode = selectModeFromState(state)\n\t\tif (mode !== Mode.PlaceTile) return\n\t\tconst handTile = selectHandTileFromState(state)\n\t\tconst oldField = selectFieldFromState(state)\n\t\tconst fieldToSelect = selectBoardFromState(state)[fieldIndexToSelect]\n\t\tif (!fieldToSelect.tile || fieldToSelect.tile.isOwned) {\n\t\t\tif (handTile) {\n\t\t\t\tdispatch(\n\t\t\t\t\tswapHandAndBoard({\n\t\t\t\t\t\thandIndex: selectHandIndexFromState(state)!,\n\t\t\t\t\t\tfieldIndex: fieldIndexToSelect,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tif (fieldToSelect === oldField) {\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\tselectField({\n\t\t\t\t\t\t\tfieldIndex: null,\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisUndefinedOrNull(oldField) ||\n\t\t\t\t\t\t(!get(() => oldField!.tile!.isOwned) &&\n\t\t\t\t\t\t\t!get(() => fieldToSelect.tile!.isOwned))\n\t\t\t\t\t) {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tselectField({\n\t\t\t\t\t\t\t\tfieldIndex: fieldToSelect.tile\n\t\t\t\t\t\t\t\t\t? fieldIndexToSelect\n\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tswapTiles({\n\t\t\t\t\t\t\t\tfieldIndexA: selectFieldIndexFromState(state)!,\n\t\t\t\t\t\t\t\tfieldIndexB: fieldIndexToSelect,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tdispatch(selectField({ fieldIndex: null }))\n\t\t}\n\t}\n}\n","import { get } from 'illa/FunctionUtil'\nimport { isUndefinedOrNull } from 'illa/Type'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { isNullOrUndefined } from 'util'\nimport { TState } from '../index'\nimport {\n\tselectHand,\n\tswapHandAndBoard,\n\tswapHands,\n\ttoggleHandIndexToReplace,\n} from '../model/actions'\nimport { TBoard } from '../model/Board'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport {\n\tselectBoardFromState,\n\tselectHandIndicesToReplaceFromState,\n\tselectHandsFromState,\n\tselectModeFromState,\n} from '../select/simpleSelectors'\nimport { AspectComp } from './AspectComp'\nimport { DispatchProp } from './DispatchProp'\nimport './HandComp.css'\nimport { TileComp } from './TileComp'\n\ninterface HandCompPropsFromState {\n\thands: THands\n\tplayerIndex: number | null\n\thandIndex: number | null\n\tboard: TBoard\n\tfieldIndex: number | null\n\tmode: Mode\n\thandIndicesToReplace: THandIndicesToReplace\n}\nexport interface HandCompProps extends HandCompPropsFromState, DispatchProp {}\n\nexport const HandComp = connect(\n\t(state: TState): HandCompPropsFromState => ({\n\t\thands: selectHandsFromState(state),\n\t\tplayerIndex: state.app.playerIndex,\n\t\thandIndex: state.app.handIndex,\n\t\tfieldIndex: state.app.fieldIndex,\n\t\tboard: selectBoardFromState(state),\n\t\thandIndicesToReplace: selectHandIndicesToReplaceFromState(state),\n\t\tmode: selectModeFromState(state),\n\t}),\n)(\n\t({\n\t\tboard,\n\t\tdispatch,\n\t\tfieldIndex,\n\t\thandIndex,\n\t\thandIndicesToReplace,\n\t\thands,\n\t\tmode,\n\t\tplayerIndex,\n\t}: HandCompProps) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{!isNullOrUndefined(playerIndex) && (\n\t\t\t\t\t<div className='hand'>\n\t\t\t\t\t\t{hands[playerIndex].map((tile, aHandIndex) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={aHandIndex}\n\t\t\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t\t\t'hand-slot',\n\t\t\t\t\t\t\t\t\thandIndex === aHandIndex && 'is-selected',\n\t\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex] &&\n\t\t\t\t\t\t\t\t\t\t'is-to-be-replaced',\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tif (mode === Mode.ReplaceTiles) {\n\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\ttoggleHandIndexToReplace({\n\t\t\t\t\t\t\t\t\t\t\t\thandIndex: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tget(() => board[fieldIndex!].tile)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\tswapHandAndBoard({\n\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfieldIndex: fieldIndex!,\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (handIndex === aHandIndex) {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\tselectHand({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tisUndefinedOrNull(handIndex)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectHand({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: hands[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayerIndex!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t][aHandIndex]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? aHandIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswapHands({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexA: handIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexB: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<AspectComp width={1} height={1}>\n\t\t\t\t\t\t\t\t\t{tile && (\n\t\t\t\t\t\t\t\t\t\t<TileComp tile={tile} neverOwned />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</AspectComp>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</>\n\t\t)\n\t},\n)\n","import { IField } from '../model/Field'\n\nexport function getWordString(word: ReadonlyArray<IField>): string {\n\treturn word.map(_ => _.tile!.letter).join('')\n}\n","import words from '../res/words.json'\n\nexport function isWordStringValid(w: string): boolean {\n\treturn words.indexOf(w) >= 0\n}\n","export const BOARD_SIZE = 15\nexport const CENTER_FIELD_INDEX = BOARD_SIZE * 7 + 7\n","export enum MoveError {\n\tNoTile,\n\tOneTile,\n\tNoDirection,\n\tNoStart,\n\tNoConnection,\n\tInvalidWord,\n}\n","export enum Direction {\n\tHorizontal,\n\tVertical,\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\n\nexport function getFieldIndexOffset(direction: Direction) {\n\treturn direction === Direction.Horizontal ? 1 : BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\n\nexport function getColumnIndex(fieldIndex: number) {\n\treturn fieldIndex % BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\n\nexport function getColumnLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst columnIndex = getColumnIndex(fieldIndex)\n\tconst column: IField[] = []\n\tfor (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n\t\tcolumn.push(board[rowIndex * BOARD_SIZE + columnIndex])\n\t}\n\treturn column\n}\n","import { BOARD_SIZE } from '../model/Constants'\n\nexport function getRowIndex(fieldIndex: number) {\n\treturn Math.floor(fieldIndex / BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getRowIndex } from './getRowIndex'\n\nexport function getRowLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst firstFieldIndex = getRowIndex(fieldIndex) * BOARD_SIZE\n\treturn board.slice(firstFieldIndex, firstFieldIndex + BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\n\nexport function getWordFromLine(\n\tline: ReadonlyArray<IField>,\n\tlineIndex: number,\n) {\n\tconst word: IField[] = []\n\tlet index = lineIndex\n\tlet startLineIndex = lineIndex\n\tlet endLineIndex = lineIndex\n\twhile (index >= 0) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.unshift(field)\n\t\tstartLineIndex = index\n\t\tindex--\n\t}\n\tindex = lineIndex + 1\n\twhile (index < BOARD_SIZE) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.push(field)\n\t\tendLineIndex = index\n\t\tindex++\n\t}\n\treturn {\n\t\tword: word.length > 1 ? word : [],\n\t\tstartLineIndex,\n\t\tendLineIndex,\n\t}\n}\n","import { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\nimport { getColumnLine } from './getColumnLine'\nimport { getRowIndex } from './getRowIndex'\nimport { getRowLine } from './getRowLine'\nimport { getWordFromLine } from './getWordFromLine'\n\nexport function getWordsAt(board: ReadonlyArray<IField>, fieldIndex: number) {\n\treturn {\n\t\thorizontal: getWordFromLine(\n\t\t\tgetRowLine(board, fieldIndex),\n\t\t\tgetColumnIndex(fieldIndex),\n\t\t),\n\t\tvertical: getWordFromLine(\n\t\t\tgetColumnLine(board, fieldIndex),\n\t\t\tgetRowIndex(fieldIndex),\n\t\t),\n\t}\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { defaultMemoize } from 'reselect'\nimport { getColumnIndex } from '../fun/getColumnIndex'\nimport { getRowIndex } from '../fun/getRowIndex'\nimport { getWordsAt } from '../fun/getWordsAt'\nimport { isThereAGap } from '../fun/isThereAGap'\nimport { TState } from '../index'\nimport { IAppState } from '../model/AppState'\nimport { TBoard } from '../model/Board'\nimport { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\n\nexport interface IWordInfo {\n\tfirstFieldIndex: number | null\n\tlastFieldIndex: number | null\n\tdirection: Direction | null\n}\n\nexport const selectWordInfo = defaultMemoize(\n\t(board: TBoard): IWordInfo => {\n\t\tlet firstFieldIndex: number | null = null\n\t\tlet lastFieldIndex: number | null = null\n\t\tlet colIndex: number | null = null\n\t\tlet rowIndex: number | null = null\n\t\tlet direction: Direction | null = null\n\n\t\tfor (let fieldIndex = 0; fieldIndex < board.length; fieldIndex++) {\n\t\t\tconst field = board[fieldIndex]\n\t\t\tif (field.tile && field.tile.isOwned) {\n\t\t\t\tif (isUndefinedOrNull(colIndex)) {\n\t\t\t\t\t// First field\n\t\t\t\t\tfirstFieldIndex = fieldIndex\n\t\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t\t\tcolIndex = getColumnIndex(fieldIndex)\n\t\t\t\t\trowIndex = getRowIndex(fieldIndex)\n\t\t\t\t} else {\n\t\t\t\t\tconst newColIndex = getColumnIndex(fieldIndex)\n\t\t\t\t\tconst newRowIndex = getRowIndex(fieldIndex)\n\t\t\t\t\tif (lastFieldIndex === firstFieldIndex) {\n\t\t\t\t\t\t// Second field\n\t\t\t\t\t\tif (colIndex === newColIndex) {\n\t\t\t\t\t\t\tdirection = Direction.Vertical\n\t\t\t\t\t\t} else if (rowIndex === newRowIndex) {\n\t\t\t\t\t\t\tdirection = Direction.Horizontal\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Third+ field\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(direction === Direction.Vertical &&\n\t\t\t\t\t\t\t\tcolIndex !== newColIndex) ||\n\t\t\t\t\t\t\t(direction === Direction.Horizontal &&\n\t\t\t\t\t\t\t\trowIndex !== newRowIndex)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdirection = null\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcolIndex = newColIndex\n\t\t\t\t\trowIndex = newRowIndex\n\t\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isUndefinedOrNull(firstFieldIndex)) {\n\t\t\tconst { horizontal, vertical } = getWordsAt(board, firstFieldIndex)\n\t\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\t\tif (horizontal.word.length) {\n\t\t\t\t\tdirection = Direction.Horizontal\n\t\t\t\t} else if (vertical.word.length) {\n\t\t\t\t\tdirection = Direction.Vertical\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (direction === Direction.Horizontal) {\n\t\t\t\tfirstFieldIndex =\n\t\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\t\thorizontal.startLineIndex\n\t\t\t\tlastFieldIndex =\n\t\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\t\thorizontal.endLineIndex\n\t\t\t} else if (direction === Direction.Vertical) {\n\t\t\t\tfirstFieldIndex =\n\t\t\t\t\tvertical.startLineIndex * BOARD_SIZE +\n\t\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t\t\tlastFieldIndex =\n\t\t\t\t\tvertical.endLineIndex * BOARD_SIZE +\n\t\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t\t!isUndefinedOrNull(direction) &&\n\t\t\tisThereAGap(board, firstFieldIndex, lastFieldIndex, direction)\n\t\t) {\n\t\t\tdirection = null\n\t\t}\n\t\treturn {\n\t\t\tfirstFieldIndex,\n\t\t\tlastFieldIndex,\n\t\t\tdirection,\n\t\t}\n\t},\n)\n\nexport const selectWordInfoFromAppState = (state: IAppState) =>\n\tselectWordInfo(state.board)\nexport const selectWordInfoFromState = (state: TState) =>\n\tselectWordInfoFromAppState(state.app)\n","import { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { getFieldIndexOffset } from './getNextFieldIndex'\n\nexport function isThereAGap(\n\tboard: ReadonlyArray<IField>,\n\tstartFieldIndex: number,\n\tendFieldIndex: number,\n\tdirection: Direction,\n) {\n\tfor (\n\t\tlet fieldIndex = startFieldIndex;\n\t\tfieldIndex <= endFieldIndex;\n\t\tfieldIndex += getFieldIndexOffset(direction)\n\t) {\n\t\tif (!board[fieldIndex].tile) return true\n\t}\n\treturn false\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { defaultMemoize } from 'reselect'\nimport { getFieldIndexOffset } from '../fun/getNextFieldIndex'\nimport { getWordsAt } from '../fun/getWordsAt'\nimport { TState } from '../index'\nimport { IAppState } from '../model/AppState'\nimport { TBoard } from '../model/Board'\nimport { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { selectWordInfo } from './selectWordInfo'\n\nexport const selectAllOwnedWords = defaultMemoize(\n\t(board: TBoard): IField[][] => {\n\t\tconst { firstFieldIndex, lastFieldIndex, direction } = selectWordInfo(\n\t\t\tboard,\n\t\t)\n\t\tconst words: IField[][] = []\n\t\tlet mainWord: IField[] | null = null\n\t\tif (\n\t\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t\t!isUndefinedOrNull(direction)\n\t\t) {\n\t\t\tlet fieldIndex = firstFieldIndex\n\t\t\tlet field = board[fieldIndex]\n\t\t\twhile (field && field.tile) {\n\t\t\t\tif (field.tile.isOwned) {\n\t\t\t\t\tconst { horizontal, vertical } = getWordsAt(\n\t\t\t\t\t\tboard,\n\t\t\t\t\t\tfieldIndex,\n\t\t\t\t\t)\n\t\t\t\t\tif (direction == Direction.Horizontal) {\n\t\t\t\t\t\twords.push(vertical.word)\n\t\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t\t// words.push(word.horizontal)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmainWord = horizontal.word\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twords.push(horizontal.word)\n\t\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t\t// words.push(word.vertical)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmainWord = vertical.word\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfieldIndex += getFieldIndexOffset(direction)\n\t\t\t\tif (fieldIndex > lastFieldIndex) break\n\t\t\t\tfield = board[fieldIndex]\n\t\t\t}\n\t\t}\n\t\tif (mainWord) words.push(mainWord)\n\t\treturn words.filter(_ => _.length > 0)\n\t},\n)\n\nexport const selectAllOwnedWordsFromAppState = (s: IAppState) =>\n\tselectAllOwnedWords(s.board)\nexport const selectAllOwnedWordsFromState = (s: TState) =>\n\tselectAllOwnedWordsFromAppState(s.app)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { getWordString } from '../fun/getWordString'\nimport { isWordStringValid } from '../fun/isWordStringValid'\nimport { TState } from '../index'\nimport { CENTER_FIELD_INDEX } from '../model/Constants'\nimport { FieldKind } from '../model/FieldKind'\nimport { MoveError } from '../model/MoveError'\nimport { selectAllOwnedWordsFromAppState } from './selectAllOwnedWords'\nimport { selectWordInfoFromAppState } from './selectWordInfo'\nimport { selectBoardFromAppState } from './simpleSelectors'\n\nexport const selectMoveErrors = createSelector(\n\t[\n\t\tselectBoardFromAppState,\n\t\tselectAllOwnedWordsFromAppState,\n\t\tselectWordInfoFromAppState,\n\t],\n\t(board, words, { firstFieldIndex, lastFieldIndex, direction }) => {\n\t\tconst errors: Set<MoveError> = new Set()\n\t\tif (isUndefinedOrNull(firstFieldIndex)) {\n\t\t\terrors.add(MoveError.NoTile)\n\t\t}\n\t\tif (errors.size === 0) {\n\t\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\t\terrors.add(MoveError.OneTile)\n\t\t\t}\n\t\t\tif (errors.size === 0) {\n\t\t\t\tif (isUndefinedOrNull(direction)) {\n\t\t\t\t\terrors.add(MoveError.NoDirection)\n\t\t\t\t}\n\t\t\t\tif (errors.size === 0) {\n\t\t\t\t\tlet touchesStart = false\n\t\t\t\t\tlet touchesUnowned = false\n\t\t\t\t\tfor (const word of words) {\n\t\t\t\t\t\tif (!isWordStringValid(getWordString(word))) {\n\t\t\t\t\t\t\terrors.add(MoveError.InvalidWord)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const field of word) {\n\t\t\t\t\t\t\tif (field.kind === FieldKind.Start) {\n\t\t\t\t\t\t\t\ttouchesStart = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (field.tile && !field.tile.isOwned) {\n\t\t\t\t\t\t\t\ttouchesUnowned = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isUndefinedOrNull(board[CENTER_FIELD_INDEX].tile)) {\n\t\t\t\t\t\terrors.add(MoveError.NoStart)\n\t\t\t\t\t} else if (!touchesUnowned && !touchesStart) {\n\t\t\t\t\t\terrors.add(MoveError.NoConnection)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Array.from(errors)\n\t},\n)\n\nexport const selectMoveErrorsFromState = (s: TState) => selectMoveErrors(s.app)\n","import { createSelector } from 'reselect'\nimport { TState } from '../index'\nimport { IField } from '../model/Field'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { getWordString } from '../fun/getWordString'\nimport { isWordStringValid } from '../fun/isWordStringValid'\nimport { selectAllOwnedWordsFromAppState } from './selectAllOwnedWords'\n\nexport const selectValidAndInvalidWords = createSelector(\n\t[selectAllOwnedWordsFromAppState],\n\t(words: IField[][]): IValidAndInvalidWords => {\n\t\tconst valid: IField[][] = []\n\t\tconst invalid: IField[][] = []\n\t\tfor (let word of words) {\n\t\t\tif (isWordStringValid(getWordString(word))) {\n\t\t\t\tvalid.push(word)\n\t\t\t} else {\n\t\t\t\tinvalid.push(word)\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tvalid,\n\t\t\tinvalid,\n\t\t}\n\t},\n)\n\nexport const selectValidAndInvalidWordsFromState = (s: TState) =>\n\tselectValidAndInvalidWords(s.app)\n","import { IField } from '../model/Field'\nimport { FieldKind } from '../model/FieldKind'\n\nexport function getWordScore(word: ReadonlyArray<IField>): number {\n\tlet wordMulti = 1\n\treturn (\n\t\tword.reduce((sum, field) => {\n\t\t\tconst tile = field.tile\n\t\t\tlet tileScore = 0\n\t\t\tif (tile) {\n\t\t\t\ttileScore = tile.score\n\t\t\t\tif (tile.isOwned) {\n\t\t\t\t\tswitch (field.kind) {\n\t\t\t\t\t\tcase FieldKind.DoubleLetter:\n\t\t\t\t\t\t\ttileScore *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleLetter:\n\t\t\t\t\t\t\ttileScore *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.Start:\n\t\t\t\t\t\tcase FieldKind.DoubleWord:\n\t\t\t\t\t\t\twordMulti *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleWord:\n\t\t\t\t\t\t\twordMulti *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sum + tileScore\n\t\t}, 0) * wordMulti\n\t)\n}\n","import { createSelector } from 'reselect'\nimport { TState } from '../index'\nimport { selectValidAndInvalidWords } from './selectValidAndInvalidWords'\nimport { getWordScore } from '../fun/getWordScore'\n\nexport const selectMoveScore = createSelector(\n\t[selectValidAndInvalidWords],\n\t(words): number => {\n\t\tlet score = 0\n\t\tfor (let word of words.valid) {\n\t\t\tscore += getWordScore(word)\n\t\t}\n\t\treturn score\n\t},\n)\n\nexport const selectMoveScoreFromState = (s: TState) => selectMoveScore(s.app)\n","import { get } from 'illa/FunctionUtil'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { saveGameThunk } from '../action/saveGameThunk'\nimport { TState } from '../index'\nimport {\n\tcollectTiles,\n\tdisownTiles,\n\tfillHand,\n\tnextPlayer,\n\tresetGame,\n\tscore,\n\tsetJokerLetter,\n\tsetMode,\n} from '../model/actions'\nimport { TBag } from '../model/Bag'\nimport { TBoard } from '../model/Board'\nimport { Mode } from '../model/Mode'\nimport { MoveError } from '../model/MoveError'\nimport letters from '../res/letters.json'\nimport { selectMoveErrorsFromState } from '../select/selectMoveErrors'\nimport { selectMoveScoreFromState } from '../select/selectMoveScore'\nimport {\n\tselectBagFromState,\n\tselectBoardFromState,\n} from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\nimport './PlaceTileButtonsComp.css'\n\ninterface PlaceTileButtonsCompPropsFromStore {\n\tboard: TBoard\n\tfieldIndex: number | null\n\tbag: TBag\n\tmoveScore: number\n\tmoveErrors: MoveError[]\n}\nexport interface PlaceTileButtonsCompProps\n\textends PlaceTileButtonsCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const PlaceTileButtonsComp = connect(\n\t(state: TState): PlaceTileButtonsCompPropsFromStore => ({\n\t\tbag: selectBagFromState(state),\n\t\tboard: selectBoardFromState(state),\n\t\tfieldIndex: state.app.fieldIndex,\n\t\tmoveScore: selectMoveScoreFromState(state),\n\t\tmoveErrors: selectMoveErrorsFromState(state),\n\t}),\n)(\n\t({\n\t\tboard,\n\t\tfieldIndex,\n\t\tbag,\n\t\tmoveScore,\n\t\tmoveErrors,\n\t\tdispatch,\n\t}: PlaceTileButtonsCompProps) => {\n\t\treturn (\n\t\t\t<div className='buttons'>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={moveErrors.length > 0}\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(score())\n\t\t\t\t\t\tdispatch(disownTiles())\n\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\tdispatch(nextPlayer())\n\t\t\t\t\t\tdispatch(saveGameThunk())\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Oké`}\n\t\t\t\t\t{moveScore > 0 && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{`: `}\n\t\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\t\t{moveScore}\n\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Szedd össze`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={bag.length < 7}\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t\tdispatch(setMode(Mode.ReplaceTiles))\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Csere`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tif (confirm(`Biztos hogy nem teszel semmit?`)) {\n\t\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t\t\tdispatch(nextPlayer())\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Kihagyom`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tif (confirm(`Biztos hogy új játékot akarsz kezdeni?`)) {\n\t\t\t\t\t\t\tdispatch(resetGame())\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Új játék`}\n\t\t\t\t</button>\n\t\t\t\t{get(() => board[fieldIndex!].tile!.isJoker) && (\n\t\t\t\t\t<select\n\t\t\t\t\t\tvalue={board[fieldIndex!].tile!.letter}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tdispatch(setJokerLetter({ letter: e.target.value }))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{letters.map((letter, index) => (\n\t\t\t\t\t\t\t<option key={index}>{letter.letter}</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t},\n)\n","import { ThunkValue } from './ThunkValue'\n\nexport function saveGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tlocalStorage['game'] = JSON.stringify(getState())\n\t}\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { TState } from '../index'\nimport { setPlayerName } from '../model/actions'\nimport { TPlayers } from '../model/Player'\nimport { selectPlayersFromState } from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\n\nexport interface PlayersCompPropsFromStore {\n\tplayers: TPlayers\n\tplayerIndex: number | null\n}\nexport interface PlayersCompProps\n\textends PlayersCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const PlayersComp = connect(\n\t(state: TState): PlayersCompPropsFromStore => ({\n\t\tplayers: selectPlayersFromState(state),\n\t\tplayerIndex: state.app.playerIndex,\n\t}),\n)(({ players, playerIndex, dispatch }: PlayersCompProps) => {\n\treturn (\n\t\t<table className='players'>\n\t\t\t<tbody>\n\t\t\t\t{players.map((player, aPlayerIndex) => (\n\t\t\t\t\t<tr className='player' key={aPlayerIndex}>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName='player-name-button'\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tconst name = prompt(`Mi a neved?`)\n\t\t\t\t\t\t\t\t\tif (name && name.trim()) {\n\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\tsetPlayerName({\n\t\t\t\t\t\t\t\t\t\t\t\tplayerIndex: aPlayerIndex,\n\t\t\t\t\t\t\t\t\t\t\t\tname: name.trim(),\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{player.name}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>{aPlayerIndex === playerIndex && `•`}</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{player.score}\n\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n})\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { TState } from '../index'\nimport {\n\taddTilesToBag,\n\tdeselectTilesToReplace,\n\tfillHand,\n\tnextPlayer,\n\tremoveTilesToReplaceFromHand,\n\tsetMode,\n} from '../model/actions'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport { ITile } from '../model/Tile'\nimport {\n\tselectHandIndicesToReplaceFromState,\n\tselectHandsFromState,\n} from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\n\nexport interface ReplaceTilesButtonsCompPropsFromStore {\n\thands: THands\n\tplayerIndex: number | null\n\thandIndicesToReplace: THandIndicesToReplace\n}\nexport interface ReplaceTilesButtonsCompProps\n\textends ReplaceTilesButtonsCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const ReplaceTilesButtonsComp = connect(\n\t(state: TState): ReplaceTilesButtonsCompPropsFromStore => ({\n\t\thandIndicesToReplace: selectHandIndicesToReplaceFromState(state),\n\t\thands: selectHandsFromState(state),\n\t\tplayerIndex: state.app.playerIndex,\n\t}),\n)(\n\t({\n\t\thands,\n\t\tplayerIndex,\n\t\thandIndicesToReplace,\n\t\tdispatch,\n\t}: ReplaceTilesButtonsCompProps) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\t\t\tconst tilesToReplace = hand.filter(\n\t\t\t\t\t\t\t(tile, aHandIndex) =>\n\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex],\n\t\t\t\t\t\t) as ITile[]\n\t\t\t\t\t\tdispatch(removeTilesToReplaceFromHand())\n\t\t\t\t\t\tdispatch(deselectTilesToReplace())\n\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\tdispatch(addTilesToBag({ tiles: tilesToReplace }))\n\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t\tdispatch(nextPlayer())\n\t\t\t\t\t}}\n\t\t\t\t>{`Csere`}</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(deselectTilesToReplace())\n\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t}}\n\t\t\t\t>{`Mégse`}</button>\n\t\t\t</>\n\t\t)\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { getWordScore } from '../fun/getWordScore'\nimport { getWordString } from '../fun/getWordString'\nimport { TState } from '../index'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { MoveError } from '../model/MoveError'\nimport { selectMoveErrorsFromState } from '../select/selectMoveErrors'\nimport { selectValidAndInvalidWordsFromState } from '../select/selectValidAndInvalidWords'\nimport { DispatchProp } from './DispatchProp'\nimport './WordInfoComp.css'\n\nexport interface WordInfoCompPropsFromStore {\n\twords: IValidAndInvalidWords\n\terrors: MoveError[]\n}\nexport interface WordInfoCompProps\n\textends WordInfoCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const WordInfoComp = connect(\n\t(state: TState): WordInfoCompPropsFromStore => ({\n\t\twords: selectValidAndInvalidWordsFromState(state),\n\t\terrors: selectMoveErrorsFromState(state),\n\t}),\n)(({ words: { valid, invalid }, errors, dispatch }: WordInfoCompProps) => {\n\treturn (\n\t\t<div className='word-info'>\n\t\t\t{valid.length > 0 && (\n\t\t\t\t<div>\n\t\t\t\t\t{`Érvényes szavak:`}\n\t\t\t\t\t{` `}\n\t\t\t\t\t{valid.map((word, index) => {\n\t\t\t\t\t\tconst wordString = getWordString(word)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t{index > 0 && <>{`, `}</>}\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tclassName='valid-word'\n\t\t\t\t\t\t\t\t\thref={`http://ertelmezo.oszk.hu/kereses.php?csakcimben=on&kereses=${encodeURIComponent(\n\t\t\t\t\t\t\t\t\t\t`\"${wordString}\"`,\n\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{wordString.replace(' ', ' ')}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t<span className='word-score'>\n\t\t\t\t\t\t\t\t\t{getWordScore(word)}\n\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{invalid.length > 0 && (\n\t\t\t\t<div>\n\t\t\t\t\t{`Érvénytelen szavak:`}\n\t\t\t\t\t{` `}\n\t\t\t\t\t{invalid.map((word, index) => {\n\t\t\t\t\t\tconst wordString = getWordString(word)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t{index > 0 && <>{`, `}</>}\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tclassName='invalid-word'\n\t\t\t\t\t\t\t\t\thref={`http://ertelmezo.oszk.hu/kereses.php?csakcimben=on&kereses=${encodeURIComponent(\n\t\t\t\t\t\t\t\t\t\t`\"${wordString}\"`,\n\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{wordString.replace(' ', ' ')}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{errors.length > 0 && (\n\t\t\t\t<div>\n\t\t\t\t\t{Array.from(errors)\n\t\t\t\t\t\t.map(e => {\n\t\t\t\t\t\t\tswitch (e) {\n\t\t\t\t\t\t\t\tcase MoveError.InvalidWord:\n\t\t\t\t\t\t\t\t\treturn `Van egy érvénytelen szavad!`\n\t\t\t\t\t\t\t\tcase MoveError.NoConnection:\n\t\t\t\t\t\t\t\t\treturn `Kapcsolódnod kell a meglévő lapkákhoz!`\n\t\t\t\t\t\t\t\tcase MoveError.NoDirection:\n\t\t\t\t\t\t\t\t\treturn `Egy vonalba tedd a lapkáid, hézag nélkül!`\n\t\t\t\t\t\t\t\tcase MoveError.NoStart:\n\t\t\t\t\t\t\t\t\treturn `Érintened kell a Start mezőt!`\n\t\t\t\t\t\t\t\tcase MoveError.NoTile:\n\t\t\t\t\t\t\t\t\treturn `Tégy le egy lapkát!`\n\t\t\t\t\t\t\t\tcase MoveError.OneTile:\n\t\t\t\t\t\t\t\t\treturn `Egy érvényes szóhoz legalább két lapka kell!`\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\treturn `[ppy6tx]: ${e}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map((e, index) => (\n\t\t\t\t\t\t\t<div key={index}>{e}</div>\n\t\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t)\n})\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { TState } from '../index'\nimport { fillHand, nextPlayer, resetGame, setMode } from '../model/actions'\nimport { TBag } from '../model/Bag'\nimport { Mode } from '../model/Mode'\nimport {\n\tselectBagFromState,\n\tselectModeFromState,\n} from '../select/simpleSelectors'\nimport './AppComp.css'\nimport { BagComp } from './BagComp'\nimport { BoardComp } from './BoardComp'\nimport { DispatchProp } from './DispatchProp'\nimport { HandComp } from './HandComp'\nimport { PlaceTileButtonsComp } from './PlaceTileButtonsComp'\nimport { PlayersComp } from './PlayersComp'\nimport { ReplaceTilesButtonsComp } from './ReplaceTilesButtonsComp'\nimport { WordInfoComp } from './WordInfoComp'\n\ninterface IAppCompPropsFromState {\n\tmode: Mode\n\tbag: TBag\n}\nexport interface IAppCompProps extends IAppCompPropsFromState, DispatchProp {}\n\nexport const AppComp = connect(\n\t(state: TState): IAppCompPropsFromState => ({\n\t\tmode: selectModeFromState(state),\n\t\tbag: selectBagFromState(state),\n\t}),\n)(({ mode, bag, dispatch }: IAppCompProps) => {\n\treturn (\n\t\t<>\n\t\t\t<BoardComp />\n\t\t\t<div className='tools'>\n\t\t\t\t{mode === Mode.NotStarted && (\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\tdispatch(resetGame())\n\t\t\t\t\t\t\tdispatch(nextPlayer())\n\t\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\t\tdispatch(nextPlayer())\n\t\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\t\tdispatch(nextPlayer())\n\t\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>{`Új játék`}</button>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.PlaceTile && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<PlayersComp />\n\t\t\t\t\t\t<BagComp bag={bag} />\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t<WordInfoComp />\n\t\t\t\t\t\t<PlaceTileButtonsComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.ReplaceTiles && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t<ReplaceTilesButtonsComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.Finished && <></>}\n\t\t\t</div>\n\t\t</>\n\t)\n})\n","import { isUndefinedOrNull, withInterface } from 'illa/Type'\nimport { createReducer, PayloadAction } from 'redux-starter-kit'\nimport { CaseReducersMapObject } from 'redux-starter-kit/src/createReducer'\nimport { selectMoveScore } from '../select/selectMoveScore'\nimport {\n\taddTilesToBag,\n\tcollectTiles,\n\tdeselectTilesToReplace,\n\tdisownTiles,\n\tfillHand,\n\tnextPlayer,\n\tremoveTilesToReplaceFromHand,\n\tresetGame,\n\tscore,\n\tselectField,\n\tselectHand,\n\tsetJokerLetter,\n\tsetMode,\n\tsetPlayerName,\n\tswapHandAndBoard,\n\tswapHands,\n\tswapTiles,\n\ttoggleHandIndexToReplace,\n} from './actions'\nimport { createBag, TBag } from './Bag'\nimport { createBoard, TBoard } from './Board'\nimport {\n\tcreateHandIndicesToReplace,\n\tTHandIndicesToReplace,\n} from './HandIndicesToReplace'\nimport { createHands, THands } from './Hands'\nimport { Mode } from './Mode'\nimport { createPlayers, TPlayers } from './Player'\nimport { ITile } from './Tile'\n\nexport interface IAppState {\n\treadonly mode: Mode\n\treadonly players: TPlayers\n\treadonly playerIndex: number | null\n\treadonly board: TBoard\n\treadonly bag: TBag\n\treadonly fieldIndex: number | null\n\treadonly handIndex: number | null\n\treadonly hands: THands\n\treadonly handIndicesToReplace: THandIndicesToReplace\n}\n\nexport function createAppState(): IAppState {\n\treturn {\n\t\tmode: Mode.NotStarted,\n\t\tboard: createBoard(),\n\t\tbag: createBag(),\n\t\thands: createHands(),\n\t\tplayers: createPlayers(),\n\t\tplayerIndex: null,\n\t\tfieldIndex: null,\n\t\thandIndex: null,\n\t\thandIndicesToReplace: createHandIndicesToReplace(),\n\t}\n}\n\nexport const appStateReducer = createReducer(\n\tcreateAppState(),\n\twithInterface<CaseReducersMapObject<IAppState, PayloadAction<any>>>({\n\t\t[collectTiles.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof collectTiles>,\n\t\t) => {\n\t\t\tconst { board, playerIndex, hands } = state\n\t\t\tconst tiles: ITile[] = []\n\t\t\tfor (const field of board) {\n\t\t\t\tif (field.tile && field.tile.isOwned) {\n\t\t\t\t\tconst tile = field.tile\n\t\t\t\t\tfield.tile = null\n\t\t\t\t\ttiles.push(tile)\n\t\t\t\t\tif (tile.isJoker) tile.letter = ' '\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tfor (let i = 0; i < hand.length; i++) {\n\t\t\t\tif (isUndefinedOrNull(hand[i])) {\n\t\t\t\t\thand[i] = tiles.shift() || null\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[disownTiles.type]: (state, action: ReturnType<typeof disownTiles>) => {\n\t\t\tfor (const field of state.board) {\n\t\t\t\tif (field.tile) {\n\t\t\t\t\tfield.tile.isOwned = false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[fillHand.type]: (state, action: ReturnType<typeof fillHand>) => {\n\t\t\tconst { bag, hands, playerIndex } = state\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tconst count = Math.min(\n\t\t\t\tbag.length,\n\t\t\t\thand.reduce((sum, tile) => (tile ? sum : sum + 1), 0),\n\t\t\t)\n\t\t\tconst tiles: ITile[] = []\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst tile = bag.splice(\n\t\t\t\t\tMath.floor(Math.random() * bag.length),\n\t\t\t\t\t1,\n\t\t\t\t)[0]\n\t\t\t\ttile.isOwned = true\n\t\t\t\ttiles.push(tile)\n\t\t\t}\n\t\t\tstate.hands[playerIndex!] = hand.map(tile =>\n\t\t\t\ttile ? tile : tiles.shift() || null,\n\t\t\t)\n\t\t},\n\t\t[nextPlayer.type]: (state, action: ReturnType<typeof nextPlayer>) => {\n\t\t\tconst { playerIndex } = state\n\t\t\tstate.playerIndex = isUndefinedOrNull(playerIndex)\n\t\t\t\t? 0\n\t\t\t\t: 1 - playerIndex\n\t\t\tstate.fieldIndex = null\n\t\t\tstate.handIndex = null\n\t\t},\n\t\t[resetGame.type]: (state, action: ReturnType<typeof resetGame>) => {\n\t\t\treturn createAppState()\n\t\t},\n\t\t[score.type]: (state, action: ReturnType<typeof score>) => {\n\t\t\tconst { players, playerIndex } = state\n\t\t\tplayers[playerIndex!].score += selectMoveScore(state)\n\t\t},\n\t\t[selectField.type]: (state, action: ReturnType<typeof selectField>) => {\n\t\t\tstate.fieldIndex = action.payload.fieldIndex\n\t\t},\n\t\t[selectHand.type]: (state, action: ReturnType<typeof selectHand>) => {\n\t\t\tstate.handIndex = action.payload.handIndex\n\t\t},\n\t\t[setJokerLetter.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof setJokerLetter>,\n\t\t) => {\n\t\t\tconst { board, fieldIndex } = state\n\t\t\tboard[fieldIndex!].tile!.letter = action.payload.letter\n\t\t\tstate.fieldIndex = null\n\t\t},\n\t\t[setMode.type]: (state, action: ReturnType<typeof setMode>) => {\n\t\t\tconst mode = action.payload\n\t\t\tif (mode !== state.mode) {\n\t\t\t\tstate.fieldIndex = null\n\t\t\t\tstate.handIndex = null\n\t\t\t}\n\t\t\tstate.mode = mode\n\t\t},\n\t\t[setPlayerName.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof setPlayerName>,\n\t\t) => {\n\t\t\tconst { playerIndex, name } = action.payload\n\t\t\tstate.players[playerIndex].name = name\n\t\t},\n\t\t[swapHandAndBoard.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof swapHandAndBoard>,\n\t\t) => {\n\t\t\tconst { board, hands, playerIndex } = state\n\t\t\tconst { fieldIndex, handIndex } = action.payload\n\t\t\tconst field = board[fieldIndex]\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tconst tileOnBoard = field.tile\n\t\t\tconst tileInHand = hand[handIndex]\n\t\t\tstate.fieldIndex = null\n\t\t\tstate.handIndex = null\n\t\t\tboard[fieldIndex].tile = tileInHand\n\t\t\thand[handIndex] = tileOnBoard\n\t\t\tif (tileOnBoard && tileOnBoard.isJoker) {\n\t\t\t\ttileOnBoard.letter = ' '\n\t\t\t}\n\t\t},\n\t\t[swapHands.type]: (state, action: ReturnType<typeof swapHands>) => {\n\t\t\tconst { hands, playerIndex } = state\n\t\t\tconst { handIndexA, handIndexB } = action.payload\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tconst tileA = hand[handIndexA]\n\t\t\tconst tileB = hand[handIndexB]\n\t\t\tstate.handIndex = null\n\t\t\thand[handIndexA] = tileB\n\t\t\thand[handIndexB] = tileA\n\t\t},\n\t\t[swapTiles.type]: (state, action: ReturnType<typeof swapTiles>) => {\n\t\t\tconst { board } = state\n\t\t\tconst { fieldIndexA, fieldIndexB } = action.payload\n\t\t\tconst fieldATile = board[fieldIndexA].tile\n\t\t\tconst fieldBTile = board[fieldIndexB].tile\n\t\t\tstate.fieldIndex = null\n\t\t\tboard[fieldIndexA].tile = fieldBTile\n\t\t\tboard[fieldIndexB].tile = fieldATile\n\t\t},\n\t\t[toggleHandIndexToReplace.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof toggleHandIndexToReplace>,\n\t\t) => {\n\t\t\tconst { handIndicesToReplace } = state\n\t\t\tconst { handIndex } = action.payload\n\t\t\thandIndicesToReplace[handIndex] = !handIndicesToReplace[handIndex]\n\t\t},\n\t\t[removeTilesToReplaceFromHand.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof removeTilesToReplaceFromHand>,\n\t\t) => {\n\t\t\tconst { handIndicesToReplace, playerIndex, hands } = state\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tstate.hands[playerIndex!] = hand.map((tile, index) =>\n\t\t\t\thandIndicesToReplace[index] ? null : tile,\n\t\t\t)\n\t\t},\n\t\t[deselectTilesToReplace.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof deselectTilesToReplace>,\n\t\t) => {\n\t\t\tstate.handIndicesToReplace.fill(false)\n\t\t},\n\t\t[addTilesToBag.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof addTilesToBag>,\n\t\t) => {\n\t\t\tstate.bag.push(...action.payload.tiles)\n\t\t},\n\t}),\n)\n","import { withInterface } from 'illa/Type'\nimport { IField } from './Field'\nimport { FieldKind } from './FieldKind'\n\nexport type TBoard = ReadonlyArray<IField>\n\nexport function createBoard(): TBoard {\n\treturn `\nW--l---W---l--W\n-w---L---L---w-\n--w---l-l---w--\nl--w---l---w--l\n----w-----w----\n-L---L---L---L-\n--l---l-l---l--\nW--l---s---l--W\n--l---l-l---l--\n-L---L---L---L-\n----w-----w----\nl--w---l---w--l\n--w---l-l---w--\n-w---L---L---w-\nW--l---W---l--W\n`\n\t\t.trim()\n\t\t.split(/\\n/)\n\t\t.flatMap(row =>\n\t\t\trow.split('').map(letter =>\n\t\t\t\twithInterface<IField>({\n\t\t\t\t\tkind: letter as FieldKind,\n\t\t\t\t\ttile: null,\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n}\n","import { range } from 'illa/ArrayUtil'\nimport { withInterface } from 'illa/Type'\nimport letters from '../res/letters.json'\nimport { ITile } from './Tile'\n\nexport type TBag = ReadonlyArray<ITile>\n\nexport function createBag(): TBag {\n\treturn letters.flatMap(({ count, letter, score }) =>\n\t\trange(count).map(_ =>\n\t\t\twithInterface<ITile>({\n\t\t\t\tletter,\n\t\t\t\tscore,\n\t\t\t\tisOwned: false,\n\t\t\t\tisJoker: letter === ' ',\n\t\t\t}),\n\t\t),\n\t)\n}\n","import { range } from 'illa/ArrayUtil'\nimport { ITile } from './Tile'\n\nexport type THands = ReadonlyArray<ReadonlyArray<ITile | null>>\n\nexport function createHands(): THands {\n\treturn range(2).map(_ => range(7).map(_ => null))\n}\n","import { range } from 'illa/ArrayUtil'\nimport { withInterface } from 'illa/Type'\n\nexport interface IPlayer {\n\tname: string\n\tscore: number\n}\n\nexport type TPlayers = ReadonlyArray<IPlayer>\n\nexport function createPlayers(): TPlayers {\n\treturn range(2).map(_ =>\n\t\twithInterface<IPlayer>({\n\t\t\tname: `${_ + 1}. Játékos`,\n\t\t\tscore: 0,\n\t\t}),\n\t)\n}\n","import { range } from 'illa/ArrayUtil'\n\nexport type THandIndicesToReplace = ReadonlyArray<boolean>\n\nexport function createHandIndicesToReplace(): THandIndicesToReplace {\n\treturn range(7).map(_ => false)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { get } from 'illa/FunctionUtil'\nimport 'normalize.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { configureStore } from 'redux-starter-kit'\nimport { AppComp } from './comp/AppComp'\nimport './index.css'\nimport { appStateReducer } from './model/AppState'\nimport * as serviceWorker from './serviceWorker'\n\nexport const store = configureStore({\n\treducer: {\n\t\tapp: appStateReducer,\n\t},\n\tpreloadedState: get(() => JSON.parse(localStorage['game'])),\n})\nexport type TState = ReturnType<typeof store.getState>\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<AppComp />\n\t</Provider>,\n\tdocument.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}