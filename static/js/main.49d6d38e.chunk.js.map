{"version":3,"sources":["model/LocalStorageKey.tsx","model/Mode.tsx","model/actions.tsx","action/saveGameThunk.tsx","action/nextPlayerAndSaveThunk.tsx","select/simpleSelectors.tsx","comp/BagComp.tsx","model/FieldKind.tsx","select/selectField.tsx","select/selectHand.tsx","select/selectHandTile.tsx","comp/AspectComp.tsx","comp/TileComp.tsx","comp/BoardComp.tsx","action/selectFieldThunk.tsx","comp/HandComp.tsx","fun/getWordString.tsx","fun/isWordStringValid.tsx","model/Constants.tsx","model/MoveError.tsx","model/Direction.tsx","fun/getNextFieldIndex.tsx","fun/getColumnIndex.tsx","fun/getColumnLine.tsx","fun/getRowIndex.tsx","fun/getRowLine.tsx","fun/getWordFromLine.tsx","fun/getWordsAt.tsx","select/selectWordInfo.tsx","fun/isThereAGap.tsx","select/selectAllOwnedWords.tsx","select/selectMoveErrors.tsx","fun/getWordScore.tsx","select/selectHandCount.tsx","select/selectIsBingo.tsx","select/selectValidAndInvalidWords.tsx","select/selectMoveScore.tsx","comp/PlaceTileButtonsComp.tsx","comp/PlayersComp.tsx","comp/ReplaceTilesButtonsComp.tsx","comp/WordInfoComp.tsx","comp/AppComp.tsx","fun/savedGameExists.tsx","action/loadGameThunk.tsx","model/AppState.tsx","model/Board.tsx","model/Bag.tsx","model/Hands.tsx","model/Player.tsx","model/HandIndicesToReplace.tsx","serviceWorker.ts","index.tsx"],"names":["LocalStorageKey","Mode","setGame","createAction","collectTiles","disownTiles","fillHand","nextPlayer","resetGame","score","selectField","selectHand","setJokerLetter","setMode","setPlayerName","swapHandAndBoard","swapHands","swapTiles","toggleHandIndexToReplace","removeTilesToReplaceFromHand","deselectTilesToReplace","addTilesToBag","saveGameThunk","dispatch","getState","localStorage","SavedGame","JSON","stringify","e","console","error","nextPlayerAndSaveThunk","selectBoardFromAppState","state","board","selectBoardFromState","app","selectBagFromState","bag","selectHandsFromAppState","hands","selectHandsFromState","selectModeFromState","mode","selectHandIndicesToReplaceFromState","handIndicesToReplace","selectPlayersFromState","players","selectPlayerIndexFromAppState","playerIndex","selectHandIndexFromAppState","handIndex","selectHandIndexFromState","selectFieldIndexFromAppState","fieldIndex","selectFieldIndexFromState","selectStartingHandCountFromAppState","startingHandCount","BagComp","_ref","react","className","concat","length","FieldKind","selectFieldFromAppState","createSelector","isUndefinedOrNull","selectFieldFromState","s","selectHandFromAppState","selectHandTileFromAppState","hand","selectHandTileFromState","AspectComp","width","height","children","viewBox","TileComp","tile","neverOwned","AspectComp_AspectComp","isOwned","isJoker","filter","Boolean","join","letter","BoardComp","connect","map","field","aFieldIndex","key","fieldKindToCssClass","kind","onClick","fieldIndexToSelect","PlaceTile","handTile","oldField","fieldToSelect","get","fieldIndexA","fieldIndexB","TileComp_TileComp","k","Normal","DoubleLetter","DoubleWord","Start","TripleLetter","TripleWord","Error","fieldKindToLabel","HandComp","isNullOrUndefined","aHandIndex","ReplaceTiles","handIndexA","handIndexB","getWordString","word","_","isWordStringValid","w","words","indexOf","MoveError","Direction","BOARD_SIZE","CENTER_FIELD_INDEX","getFieldIndexOffset","direction","Horizontal","getColumnIndex","getColumnLine","columnIndex","column","rowIndex","push","getRowIndex","Math","floor","getRowLine","firstFieldIndex","slice","getWordFromLine","line","lineIndex","index","startLineIndex","endLineIndex","unshift","getWordsAt","horizontal","vertical","selectWordInfo","defaultMemoize","lastFieldIndex","colIndex","newColIndex","newRowIndex","Vertical","_getWordsAt","startFieldIndex","endFieldIndex","isThereAGap","selectWordInfoFromAppState","selectAllOwnedWords","_selectWordInfo","mainWord","selectAllOwnedWordsFromAppState","selectMoveErrors","errors","Set","add","NoTile","size","OneTile","NoDirection","touchesStart","touchesUnowned","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","InvalidWord","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","NoStart","NoConnection","Array","from","selectMoveErrorsFromState","getWordScore","wordMulti","reduce","sum","tileScore","selectHandCountFromAppState","selectIsBingoFromAppState","handCount","selectIsBingoFromState","selectValidAndInvalidWordsFromAppState","valid","invalid","selectMoveScoreFromAppState","isBingo","PlaceTileButtonsComp","moveScore","moveErrors","disabled","confirm","onChange","target","letters","PlayersComp","player","aPlayerIndex","name","prompt","trim","ReplaceTilesButtonsComp","tilesToReplace","tiles","WordInfoComp","_ref$words","wordString","href","encodeURIComponent","replace","AppComp","BoardComp_BoardComp","NotStarted","savedGame","parse","game","BagComp_BagComp","HandComp_HandComp","WordInfoComp_WordInfoComp","PlaceTileButtonsComp_PlaceTileButtonsComp","Finished","createAppState","split","flatMap","row","withInterface","count","range","appStateReducer","createReducer","_withInterface","Object","defineProperty","type","action","i","shift","min","splice","random","payload","_action$payload","_action$payload2","tileOnBoard","tileInHand","_action$payload3","tileA","tileB","_action$payload4","fieldATile","fieldBTile","fill","_state$bag","apply","toConsumableArray","window","location","hostname","match","__webpack_require__","d","__webpack_exports__","store","configureStore","reducer","ReactDOM","render","react_default","a","createElement","es","AppComp_AppComp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49d6d38e.chunk.js","sourcesContent":["export enum LocalStorageKey {\n\tSavedGame = 'game',\n}\n","export enum Mode {\n\tNotStarted = 'NotStarted',\n\tPlaceTile = 'PlaceTile',\n\tReplaceTiles = 'ReplaceTiles',\n\tFinished = 'Finished',\n}\n","import { createAction } from 'redux-starter-kit'\nimport { Mode } from './Mode'\nimport { IState } from './State'\nimport { ITile } from './Tile'\n\nexport const setGame = createAction<{ game: IState }>('setGame')\nexport const collectTiles = createAction<{}>('collectTiles')\nexport const disownTiles = createAction<{}>('disownTiles')\nexport const fillHand = createAction<{}>('fillHand')\nexport const nextPlayer = createAction<{}>('nextPlayer')\nexport const resetGame = createAction<{}>('resetGame')\nexport const score = createAction<{}>('score')\nexport const selectField = createAction<{ fieldIndex: number | null }>(\n\t'selectField',\n)\nexport const selectHand = createAction<{ handIndex: number | null }>(\n\t'selectHand',\n)\nexport const setJokerLetter = createAction<{ letter: string }>('setJokerLetter')\nexport const setMode = createAction<Mode>('setMode')\nexport const setPlayerName = createAction<{\n\tplayerIndex: number\n\tname: string\n}>('setPlayerName')\nexport const swapHandAndBoard = createAction<{\n\tfieldIndex: number\n\thandIndex: number\n}>('swapHandAndBoard')\nexport const swapHands = createAction<{\n\thandIndexA: number\n\thandIndexB: number\n}>('swapHands')\nexport const swapTiles = createAction<{\n\tfieldIndexA: number\n\tfieldIndexB: number\n}>('swapTiles')\nexport const toggleHandIndexToReplace = createAction<{\n\thandIndex: number\n}>('toggleHandIndexToReplace')\nexport const removeTilesToReplaceFromHand = createAction<{}>(\n\t'removeTilesToReplaceFromHand',\n)\nexport const deselectTilesToReplace = createAction<{}>('deselectTilesToReplace')\nexport const addTilesToBag = createAction<{ tiles: ITile[] }>('addTilesToBag')\n","import { LocalStorageKey } from '../model/LocalStorageKey'\nimport { ThunkValue } from './ThunkValue'\n\nexport function saveGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\ttry {\n\t\t\tlocalStorage[LocalStorageKey.SavedGame] = JSON.stringify(getState())\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t}\n\t}\n}\n","import { nextPlayer } from '../model/actions'\nimport { saveGameThunk } from './saveGameThunk'\nimport { ThunkValue } from './ThunkValue'\n\nexport function nextPlayerAndSaveThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tdispatch(nextPlayer())\n\t\tdispatch(saveGameThunk())\n\t}\n}\n","import { IAppState } from '../model/AppState'\nimport { TBag } from '../model/Bag'\nimport { TBoard } from '../model/Board'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport { TPlayers } from '../model/Player'\nimport { IState } from '../model/State'\n\nexport const selectBoardFromAppState = (state: IAppState): TBoard => state.board\nexport const selectBoardFromState = (state: IState): TBoard =>\n\tselectBoardFromAppState(state.app)\nexport const selectBagFromState = (state: IState): TBag => state.app.bag\nexport const selectHandsFromAppState = (state: IAppState): THands => state.hands\nexport const selectHandsFromState = (state: IState): THands =>\n\tselectHandsFromAppState(state.app)\nexport const selectModeFromState = (state: IState): Mode => state.app.mode\nexport const selectHandIndicesToReplaceFromState = (\n\tstate: IState,\n): THandIndicesToReplace => state.app.handIndicesToReplace\nexport const selectPlayersFromState = (state: IState): TPlayers =>\n\tstate.app.players\nexport const selectPlayerIndexFromAppState = (state: IAppState) =>\n\tstate.playerIndex\nexport const selectPlayerIndexFromState = (state: IState) =>\n\tselectPlayerIndexFromAppState(state.app)\nexport const selectHandIndexFromAppState = (state: IAppState) => state.handIndex\nexport const selectHandIndexFromState = (state: IState) =>\n\tselectHandIndexFromAppState(state.app)\nexport const selectFieldIndexFromAppState = (state: IAppState) =>\n\tstate.fieldIndex\nexport const selectFieldIndexFromState = (state: IState) =>\n\tselectFieldIndexFromAppState(state.app)\nexport const selectStartingHandCountFromAppState = (state: IAppState) =>\n\tstate.startingHandCount\nexport const selectStartingHandCountFromState = (state: IState) =>\n\tselectStartingHandCountFromAppState(state.app)\n","import * as React from 'react'\nimport { TBag } from '../model/Bag'\nimport './BagComp.css'\n\nexport function BagComp({ bag }: { bag: TBag }) {\n\treturn <div className='bag'>{`Lapkák a zsákban: ${bag.length}`}</div>\n}\n","export enum FieldKind {\n\tNormal = '-',\n\tStart = 's',\n\tDoubleLetter = 'l',\n\tTripleLetter = 'L',\n\tDoubleWord = 'w',\n\tTripleWord = 'W',\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport {\n\tselectBoardFromAppState,\n\tselectFieldIndexFromAppState,\n} from './simpleSelectors'\n\nexport const selectFieldFromAppState = createSelector(\n\t[selectBoardFromAppState, selectFieldIndexFromAppState],\n\t(board, fieldIndex) => {\n\t\treturn isUndefinedOrNull(fieldIndex) ? null : board[fieldIndex]\n\t},\n)\nexport const selectFieldFromState = (s: IState) =>\n\tselectFieldFromAppState(s.app)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport {\n\tselectHandsFromAppState,\n\tselectPlayerIndexFromAppState,\n} from './simpleSelectors'\n\nexport const selectHandFromAppState = createSelector(\n\t[selectHandsFromAppState, selectPlayerIndexFromAppState],\n\t(hands, playerIndex) => {\n\t\treturn isUndefinedOrNull(playerIndex) ? null : hands[playerIndex]\n\t},\n)\n\nexport const selectHandFromState = (s: IState) => selectHandsFromAppState(s.app)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport { selectHandFromAppState } from './selectHand'\nimport { selectHandIndexFromAppState } from './simpleSelectors'\n\nexport const selectHandTileFromAppState = createSelector(\n\t[selectHandFromAppState, selectHandIndexFromAppState],\n\t(hand, handIndex) => {\n\t\treturn hand && !isUndefinedOrNull(handIndex) ? hand[handIndex] : null\n\t},\n)\n\nexport const selectHandTileFromState = (state: IState) =>\n\tselectHandTileFromAppState(state.app)\n","import * as React from 'react'\nimport './AspectComp.css'\n\nexport function AspectComp({\n\twidth,\n\theight,\n\tchildren,\n}: React.PropsWithChildren<{\n\twidth: number\n\theight: number\n}>) {\n\treturn (\n\t\t<div className='aspect'>\n\t\t\t<svg viewBox={`0 0 ${width} ${height}`} />\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n","import * as React from 'react'\nimport { ITile } from '../model/Tile'\nimport { AspectComp } from './AspectComp'\nimport './TileComp.css'\n\nexport function TileComp({\n\ttile,\n\tneverOwned,\n}: {\n\ttile: ITile\n\tneverOwned?: boolean\n}) {\n\treturn (\n\t\t<AspectComp width={1} height={1}>\n\t\t\t<div\n\t\t\t\tclassName={[\n\t\t\t\t\t'tile',\n\t\t\t\t\t!neverOwned && tile.isOwned && 'is-owned',\n\t\t\t\t\ttile.isJoker && 'is-joker',\n\t\t\t\t]\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.join(' ')}\n\t\t\t>\n\t\t\t\t<div className='tile-letter'>{tile.letter}</div>\n\t\t\t\t<div className='tile-score'>{tile.score}</div>\n\t\t\t</div>\n\t\t</AspectComp>\n\t)\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { selectFieldThunk } from '../action/selectFieldThunk'\nimport { TBoard } from '../model/Board'\nimport { FieldKind } from '../model/FieldKind'\nimport { IState } from '../model/State'\nimport { selectBoardFromState } from '../select/simpleSelectors'\nimport { AspectComp } from './AspectComp'\nimport './BoardComp.css'\nimport { DispatchProp } from './DispatchProp'\nimport { TileComp } from './TileComp'\n\ninterface BoardCompPropsFromState {\n\tfieldIndex: number | null\n\tboard: TBoard\n}\nexport interface BoardCompProps extends BoardCompPropsFromState, DispatchProp {}\n\nexport const BoardComp = connect(\n\t(state: IState): BoardCompPropsFromState => ({\n\t\tboard: selectBoardFromState(state),\n\t\tfieldIndex: state.app.fieldIndex,\n\t}),\n)(({ fieldIndex, board, dispatch }: BoardCompProps) => {\n\treturn (\n\t\t<div className='board'>\n\t\t\t{board.map((field, aFieldIndex) => (\n\t\t\t\t<AspectComp key={aFieldIndex} width={1} height={1}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t'board-field',\n\t\t\t\t\t\t\tfieldKindToCssClass(field.kind),\n\t\t\t\t\t\t\taFieldIndex === fieldIndex && 'is-selected',\n\t\t\t\t\t\t]\n\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\tdispatch(selectFieldThunk(aFieldIndex))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{field.tile ? (\n\t\t\t\t\t\t\t<TileComp tile={field.tile} />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tfieldKindToLabel(field.kind)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</AspectComp>\n\t\t\t))}\n\t\t</div>\n\t)\n})\n\nfunction fieldKindToCssClass(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn 'is-normal'\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn 'is-double-letter'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn 'is-double-word'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'is-start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn 'is-triple-letter'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn 'is-triple-word'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp03n]: ${k}`)\n\t}\n}\n\nfunction fieldKindToLabel(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn ' '\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn '2×\\nBetű'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn '2×\\nSzó'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'Start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn '3×\\nBetű'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn '3×\\nSzó'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp079]: ${k}`)\n\t}\n}\n","import { get } from 'illa/FunctionUtil'\nimport { isUndefinedOrNull } from 'illa/Type'\nimport { selectField, swapHandAndBoard, swapTiles } from '../model/actions'\nimport { Mode } from '../model/Mode'\nimport { selectFieldFromState } from '../select/selectField'\nimport { selectHandTileFromState } from '../select/selectHandTile'\nimport {\n\tselectBoardFromState,\n\tselectFieldIndexFromState,\n\tselectHandIndexFromState,\n\tselectModeFromState,\n} from '../select/simpleSelectors'\nimport { ThunkValue } from './ThunkValue'\n\nexport function selectFieldThunk(fieldIndexToSelect: number): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst state = getState()\n\t\tconst mode = selectModeFromState(state)\n\t\tif (mode !== Mode.PlaceTile) return\n\t\tconst handTile = selectHandTileFromState(state)\n\t\tconst oldField = selectFieldFromState(state)\n\t\tconst fieldToSelect = selectBoardFromState(state)[fieldIndexToSelect]\n\t\tif (!fieldToSelect.tile || fieldToSelect.tile.isOwned) {\n\t\t\tif (handTile) {\n\t\t\t\tdispatch(\n\t\t\t\t\tswapHandAndBoard({\n\t\t\t\t\t\thandIndex: selectHandIndexFromState(state)!,\n\t\t\t\t\t\tfieldIndex: fieldIndexToSelect,\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tif (fieldToSelect === oldField) {\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\tselectField({\n\t\t\t\t\t\t\tfieldIndex: null,\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisUndefinedOrNull(oldField) ||\n\t\t\t\t\t\t(!get(() => oldField!.tile!.isOwned) &&\n\t\t\t\t\t\t\t!get(() => fieldToSelect.tile!.isOwned))\n\t\t\t\t\t) {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tselectField({\n\t\t\t\t\t\t\t\tfieldIndex: fieldToSelect.tile\n\t\t\t\t\t\t\t\t\t? fieldIndexToSelect\n\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tswapTiles({\n\t\t\t\t\t\t\t\tfieldIndexA: selectFieldIndexFromState(state)!,\n\t\t\t\t\t\t\t\tfieldIndexB: fieldIndexToSelect,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tdispatch(selectField({ fieldIndex: null }))\n\t\t}\n\t}\n}\n","import { get } from 'illa/FunctionUtil'\nimport { isUndefinedOrNull } from 'illa/Type'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { isNullOrUndefined } from 'util'\nimport {\n\tselectHand,\n\tswapHandAndBoard,\n\tswapHands,\n\ttoggleHandIndexToReplace,\n} from '../model/actions'\nimport { TBoard } from '../model/Board'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport { IState } from '../model/State'\nimport {\n\tselectBoardFromState,\n\tselectHandIndicesToReplaceFromState,\n\tselectHandsFromState,\n\tselectModeFromState,\n} from '../select/simpleSelectors'\nimport { AspectComp } from './AspectComp'\nimport { DispatchProp } from './DispatchProp'\nimport './HandComp.css'\nimport { TileComp } from './TileComp'\n\ninterface HandCompPropsFromState {\n\thands: THands\n\tplayerIndex: number | null\n\thandIndex: number | null\n\tboard: TBoard\n\tfieldIndex: number | null\n\tmode: Mode\n\thandIndicesToReplace: THandIndicesToReplace\n}\nexport interface HandCompProps extends HandCompPropsFromState, DispatchProp {}\n\nexport const HandComp = connect(\n\t(state: IState): HandCompPropsFromState => ({\n\t\thands: selectHandsFromState(state),\n\t\tplayerIndex: state.app.playerIndex,\n\t\thandIndex: state.app.handIndex,\n\t\tfieldIndex: state.app.fieldIndex,\n\t\tboard: selectBoardFromState(state),\n\t\thandIndicesToReplace: selectHandIndicesToReplaceFromState(state),\n\t\tmode: selectModeFromState(state),\n\t}),\n)(\n\t({\n\t\tboard,\n\t\tdispatch,\n\t\tfieldIndex,\n\t\thandIndex,\n\t\thandIndicesToReplace,\n\t\thands,\n\t\tmode,\n\t\tplayerIndex,\n\t}: HandCompProps) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{!isNullOrUndefined(playerIndex) && (\n\t\t\t\t\t<div className='hand'>\n\t\t\t\t\t\t{hands[playerIndex].map((tile, aHandIndex) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={aHandIndex}\n\t\t\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t\t\t'hand-slot',\n\t\t\t\t\t\t\t\t\thandIndex === aHandIndex && 'is-selected',\n\t\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex] &&\n\t\t\t\t\t\t\t\t\t\t'is-to-be-replaced',\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tif (mode === Mode.ReplaceTiles) {\n\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\ttoggleHandIndexToReplace({\n\t\t\t\t\t\t\t\t\t\t\t\thandIndex: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tget(() => board[fieldIndex!].tile)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\tswapHandAndBoard({\n\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfieldIndex: fieldIndex!,\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (handIndex === aHandIndex) {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\tselectHand({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tisUndefinedOrNull(handIndex)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectHand({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: hands[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayerIndex!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t][aHandIndex]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? aHandIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswapHands({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexA: handIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexB: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<AspectComp width={1} height={1}>\n\t\t\t\t\t\t\t\t\t{tile && (\n\t\t\t\t\t\t\t\t\t\t<TileComp tile={tile} neverOwned />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</AspectComp>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</>\n\t\t)\n\t},\n)\n","import { IField } from '../model/Field'\n\nexport function getWordString(word: ReadonlyArray<IField>): string {\n\treturn word.map(_ => _.tile!.letter).join('')\n}\n","import words from '../res/words.json'\n\nexport function isWordStringValid(w: string): boolean {\n\treturn words.indexOf(w) >= 0\n}\n","export const BOARD_SIZE = 15\nexport const CENTER_FIELD_INDEX = BOARD_SIZE * 7 + 7\nexport const BINGO_SCORE = 50\n","export enum MoveError {\n\tNoTile,\n\tOneTile,\n\tNoDirection,\n\tNoStart,\n\tNoConnection,\n\tInvalidWord,\n}\n","export enum Direction {\n\tHorizontal,\n\tVertical,\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\n\nexport function getFieldIndexOffset(direction: Direction) {\n\treturn direction === Direction.Horizontal ? 1 : BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\n\nexport function getColumnIndex(fieldIndex: number) {\n\treturn fieldIndex % BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\n\nexport function getColumnLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst columnIndex = getColumnIndex(fieldIndex)\n\tconst column: IField[] = []\n\tfor (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n\t\tcolumn.push(board[rowIndex * BOARD_SIZE + columnIndex])\n\t}\n\treturn column\n}\n","import { BOARD_SIZE } from '../model/Constants'\n\nexport function getRowIndex(fieldIndex: number) {\n\treturn Math.floor(fieldIndex / BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getRowIndex } from './getRowIndex'\n\nexport function getRowLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst firstFieldIndex = getRowIndex(fieldIndex) * BOARD_SIZE\n\treturn board.slice(firstFieldIndex, firstFieldIndex + BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\n\nexport function getWordFromLine(\n\tline: ReadonlyArray<IField>,\n\tlineIndex: number,\n) {\n\tconst word: IField[] = []\n\tlet index = lineIndex\n\tlet startLineIndex = lineIndex\n\tlet endLineIndex = lineIndex\n\twhile (index >= 0) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.unshift(field)\n\t\tstartLineIndex = index\n\t\tindex--\n\t}\n\tindex = lineIndex + 1\n\twhile (index < BOARD_SIZE) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.push(field)\n\t\tendLineIndex = index\n\t\tindex++\n\t}\n\treturn {\n\t\tword: word.length > 1 ? word : [],\n\t\tstartLineIndex,\n\t\tendLineIndex,\n\t}\n}\n","import { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\nimport { getColumnLine } from './getColumnLine'\nimport { getRowIndex } from './getRowIndex'\nimport { getRowLine } from './getRowLine'\nimport { getWordFromLine } from './getWordFromLine'\n\nexport function getWordsAt(board: ReadonlyArray<IField>, fieldIndex: number) {\n\treturn {\n\t\thorizontal: getWordFromLine(\n\t\t\tgetRowLine(board, fieldIndex),\n\t\t\tgetColumnIndex(fieldIndex),\n\t\t),\n\t\tvertical: getWordFromLine(\n\t\t\tgetColumnLine(board, fieldIndex),\n\t\t\tgetRowIndex(fieldIndex),\n\t\t),\n\t}\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { defaultMemoize } from 'reselect'\nimport { getColumnIndex } from '../fun/getColumnIndex'\nimport { getRowIndex } from '../fun/getRowIndex'\nimport { getWordsAt } from '../fun/getWordsAt'\nimport { isThereAGap } from '../fun/isThereAGap'\nimport { IAppState } from '../model/AppState'\nimport { TBoard } from '../model/Board'\nimport { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\nimport { IState } from '../model/State'\n\nexport interface IWordInfo {\n\tfirstFieldIndex: number | null\n\tlastFieldIndex: number | null\n\tdirection: Direction | null\n}\n\nexport const selectWordInfo = defaultMemoize(\n\t(board: TBoard): IWordInfo => {\n\t\tlet firstFieldIndex: number | null = null\n\t\tlet lastFieldIndex: number | null = null\n\t\tlet colIndex: number | null = null\n\t\tlet rowIndex: number | null = null\n\t\tlet direction: Direction | null = null\n\n\t\tfor (let fieldIndex = 0; fieldIndex < board.length; fieldIndex++) {\n\t\t\tconst field = board[fieldIndex]\n\t\t\tif (field.tile && field.tile.isOwned) {\n\t\t\t\tif (isUndefinedOrNull(colIndex)) {\n\t\t\t\t\t// First field\n\t\t\t\t\tfirstFieldIndex = fieldIndex\n\t\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t\t\tcolIndex = getColumnIndex(fieldIndex)\n\t\t\t\t\trowIndex = getRowIndex(fieldIndex)\n\t\t\t\t} else {\n\t\t\t\t\tconst newColIndex = getColumnIndex(fieldIndex)\n\t\t\t\t\tconst newRowIndex = getRowIndex(fieldIndex)\n\t\t\t\t\tif (lastFieldIndex === firstFieldIndex) {\n\t\t\t\t\t\t// Second field\n\t\t\t\t\t\tif (colIndex === newColIndex) {\n\t\t\t\t\t\t\tdirection = Direction.Vertical\n\t\t\t\t\t\t} else if (rowIndex === newRowIndex) {\n\t\t\t\t\t\t\tdirection = Direction.Horizontal\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Third+ field\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(direction === Direction.Vertical &&\n\t\t\t\t\t\t\t\tcolIndex !== newColIndex) ||\n\t\t\t\t\t\t\t(direction === Direction.Horizontal &&\n\t\t\t\t\t\t\t\trowIndex !== newRowIndex)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdirection = null\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcolIndex = newColIndex\n\t\t\t\t\trowIndex = newRowIndex\n\t\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isUndefinedOrNull(firstFieldIndex)) {\n\t\t\tconst { horizontal, vertical } = getWordsAt(board, firstFieldIndex)\n\t\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\t\tif (horizontal.word.length) {\n\t\t\t\t\tdirection = Direction.Horizontal\n\t\t\t\t} else if (vertical.word.length) {\n\t\t\t\t\tdirection = Direction.Vertical\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (direction === Direction.Horizontal) {\n\t\t\t\tfirstFieldIndex =\n\t\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\t\thorizontal.startLineIndex\n\t\t\t\tlastFieldIndex =\n\t\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\t\thorizontal.endLineIndex\n\t\t\t} else if (direction === Direction.Vertical) {\n\t\t\t\tfirstFieldIndex =\n\t\t\t\t\tvertical.startLineIndex * BOARD_SIZE +\n\t\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t\t\tlastFieldIndex =\n\t\t\t\t\tvertical.endLineIndex * BOARD_SIZE +\n\t\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t\t!isUndefinedOrNull(direction) &&\n\t\t\tisThereAGap(board, firstFieldIndex, lastFieldIndex, direction)\n\t\t) {\n\t\t\tdirection = null\n\t\t}\n\t\treturn {\n\t\t\tfirstFieldIndex,\n\t\t\tlastFieldIndex,\n\t\t\tdirection,\n\t\t}\n\t},\n)\n\nexport const selectWordInfoFromAppState = (state: IAppState) =>\n\tselectWordInfo(state.board)\nexport const selectWordInfoFromState = (state: IState) =>\n\tselectWordInfoFromAppState(state.app)\n","import { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { getFieldIndexOffset } from './getNextFieldIndex'\n\nexport function isThereAGap(\n\tboard: ReadonlyArray<IField>,\n\tstartFieldIndex: number,\n\tendFieldIndex: number,\n\tdirection: Direction,\n) {\n\tfor (\n\t\tlet fieldIndex = startFieldIndex;\n\t\tfieldIndex <= endFieldIndex;\n\t\tfieldIndex += getFieldIndexOffset(direction)\n\t) {\n\t\tif (!board[fieldIndex].tile) return true\n\t}\n\treturn false\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { defaultMemoize } from 'reselect'\nimport { getFieldIndexOffset } from '../fun/getNextFieldIndex'\nimport { getWordsAt } from '../fun/getWordsAt'\nimport { IAppState } from '../model/AppState'\nimport { TBoard } from '../model/Board'\nimport { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { IState } from '../model/State'\nimport { selectWordInfo } from './selectWordInfo'\n\nexport const selectAllOwnedWords = defaultMemoize(\n\t(board: TBoard): IField[][] => {\n\t\tconst { firstFieldIndex, lastFieldIndex, direction } = selectWordInfo(\n\t\t\tboard,\n\t\t)\n\t\tconst words: IField[][] = []\n\t\tlet mainWord: IField[] | null = null\n\t\tif (\n\t\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t\t!isUndefinedOrNull(direction)\n\t\t) {\n\t\t\tlet fieldIndex = firstFieldIndex\n\t\t\tlet field = board[fieldIndex]\n\t\t\twhile (field && field.tile) {\n\t\t\t\tif (field.tile.isOwned) {\n\t\t\t\t\tconst { horizontal, vertical } = getWordsAt(\n\t\t\t\t\t\tboard,\n\t\t\t\t\t\tfieldIndex,\n\t\t\t\t\t)\n\t\t\t\t\tif (direction == Direction.Horizontal) {\n\t\t\t\t\t\twords.push(vertical.word)\n\t\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t\t// words.push(word.horizontal)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmainWord = horizontal.word\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twords.push(horizontal.word)\n\t\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t\t// words.push(word.vertical)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmainWord = vertical.word\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfieldIndex += getFieldIndexOffset(direction)\n\t\t\t\tif (fieldIndex > lastFieldIndex) break\n\t\t\t\tfield = board[fieldIndex]\n\t\t\t}\n\t\t}\n\t\tif (mainWord) words.push(mainWord)\n\t\treturn words.filter(_ => _.length > 0)\n\t},\n)\n\nexport const selectAllOwnedWordsFromAppState = (s: IAppState) =>\n\tselectAllOwnedWords(s.board)\nexport const selectAllOwnedWordsFromState = (s: IState) =>\n\tselectAllOwnedWordsFromAppState(s.app)\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { getWordString } from '../fun/getWordString'\nimport { isWordStringValid } from '../fun/isWordStringValid'\nimport { CENTER_FIELD_INDEX } from '../model/Constants'\nimport { FieldKind } from '../model/FieldKind'\nimport { MoveError } from '../model/MoveError'\nimport { IState } from '../model/State'\nimport { selectAllOwnedWordsFromAppState } from './selectAllOwnedWords'\nimport { selectWordInfoFromAppState } from './selectWordInfo'\nimport { selectBoardFromAppState } from './simpleSelectors'\n\nexport const selectMoveErrors = createSelector(\n\t[\n\t\tselectBoardFromAppState,\n\t\tselectAllOwnedWordsFromAppState,\n\t\tselectWordInfoFromAppState,\n\t],\n\t(board, words, { firstFieldIndex, lastFieldIndex, direction }) => {\n\t\tconst errors: Set<MoveError> = new Set()\n\t\tif (isUndefinedOrNull(firstFieldIndex)) {\n\t\t\terrors.add(MoveError.NoTile)\n\t\t}\n\t\tif (errors.size === 0) {\n\t\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\t\terrors.add(MoveError.OneTile)\n\t\t\t}\n\t\t\tif (errors.size === 0) {\n\t\t\t\tif (isUndefinedOrNull(direction)) {\n\t\t\t\t\terrors.add(MoveError.NoDirection)\n\t\t\t\t}\n\t\t\t\tif (errors.size === 0) {\n\t\t\t\t\tlet touchesStart = false\n\t\t\t\t\tlet touchesUnowned = false\n\t\t\t\t\tfor (const word of words) {\n\t\t\t\t\t\tif (!isWordStringValid(getWordString(word))) {\n\t\t\t\t\t\t\terrors.add(MoveError.InvalidWord)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const field of word) {\n\t\t\t\t\t\t\tif (field.kind === FieldKind.Start) {\n\t\t\t\t\t\t\t\ttouchesStart = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (field.tile && !field.tile.isOwned) {\n\t\t\t\t\t\t\t\ttouchesUnowned = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isUndefinedOrNull(board[CENTER_FIELD_INDEX].tile)) {\n\t\t\t\t\t\terrors.add(MoveError.NoStart)\n\t\t\t\t\t} else if (!touchesUnowned && !touchesStart) {\n\t\t\t\t\t\terrors.add(MoveError.NoConnection)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Array.from(errors)\n\t},\n)\n\nexport const selectMoveErrorsFromState = (s: IState) => selectMoveErrors(s.app)\n","import { IField } from '../model/Field'\nimport { FieldKind } from '../model/FieldKind'\n\nexport function getWordScore(word: ReadonlyArray<IField>): number {\n\tlet wordMulti = 1\n\treturn (\n\t\tword.reduce((sum, field) => {\n\t\t\tconst tile = field.tile\n\t\t\tlet tileScore = 0\n\t\t\tif (tile) {\n\t\t\t\ttileScore = tile.score\n\t\t\t\tif (tile.isOwned) {\n\t\t\t\t\tswitch (field.kind) {\n\t\t\t\t\t\tcase FieldKind.DoubleLetter:\n\t\t\t\t\t\t\ttileScore *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleLetter:\n\t\t\t\t\t\t\ttileScore *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.Start:\n\t\t\t\t\t\tcase FieldKind.DoubleWord:\n\t\t\t\t\t\t\twordMulti *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleWord:\n\t\t\t\t\t\t\twordMulti *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sum + tileScore\n\t\t}, 0) * wordMulti\n\t)\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport { selectHandFromAppState } from './selectHand'\n\nexport const selectHandCountFromAppState = createSelector(\n\t[selectHandFromAppState],\n\thand =>\n\t\t(hand || []).reduce(\n\t\t\t(sum, tile) => sum + (isUndefinedOrNull(tile) ? 0 : 1),\n\t\t\t0,\n\t\t),\n)\n\nexport const selectHandCountFromState = (state: IState) =>\n\tselectHandCountFromAppState(state.app)\n","import { createSelector } from 'reselect'\nimport { IState } from '../model/State'\nimport { selectHandCountFromAppState } from './selectHandCount'\nimport { selectStartingHandCountFromAppState } from './simpleSelectors'\n\nexport const selectIsBingoFromAppState = createSelector(\n\t[selectStartingHandCountFromAppState, selectHandCountFromAppState],\n\t(startingHandCount, handCount) => {\n\t\treturn startingHandCount === 7 && handCount === 0\n\t},\n)\n\nexport const selectIsBingoFromState = (state: IState) =>\n\tselectIsBingoFromAppState(state.app)\n","import { createSelector } from 'reselect'\nimport { getWordString } from '../fun/getWordString'\nimport { isWordStringValid } from '../fun/isWordStringValid'\nimport { IField } from '../model/Field'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { IState } from '../model/State'\nimport { selectAllOwnedWordsFromAppState } from './selectAllOwnedWords'\n\nexport const selectValidAndInvalidWordsFromAppState = createSelector(\n\t[selectAllOwnedWordsFromAppState],\n\t(words: IField[][]): IValidAndInvalidWords => {\n\t\tconst valid: IField[][] = []\n\t\tconst invalid: IField[][] = []\n\t\tfor (let word of words) {\n\t\t\tif (isWordStringValid(getWordString(word))) {\n\t\t\t\tvalid.push(word)\n\t\t\t} else {\n\t\t\t\tinvalid.push(word)\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tvalid,\n\t\t\tinvalid,\n\t\t}\n\t},\n)\n\nexport const selectValidAndInvalidWordsFromState = (s: IState) =>\n\tselectValidAndInvalidWordsFromAppState(s.app)\n","import { createSelector } from 'reselect'\nimport { getWordScore } from '../fun/getWordScore'\nimport { BINGO_SCORE } from '../model/Constants'\nimport { IState } from '../model/State'\nimport { selectIsBingoFromAppState } from './selectIsBingo'\nimport { selectValidAndInvalidWordsFromAppState } from './selectValidAndInvalidWords'\n\nexport const selectMoveScoreFromAppState = createSelector(\n\t[selectValidAndInvalidWordsFromAppState, selectIsBingoFromAppState],\n\t(words, isBingo): number => {\n\t\tlet score = 0\n\t\tfor (let word of words.valid) {\n\t\t\tscore += getWordScore(word)\n\t\t}\n\t\tif (words.valid.length && isBingo) score += BINGO_SCORE\n\t\treturn score\n\t},\n)\n\nexport const selectMoveScoreFromState = (s: IState) =>\n\tselectMoveScoreFromAppState(s.app)\n","import { get } from 'illa/FunctionUtil'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { nextPlayerAndSaveThunk } from '../action/nextPlayerAndSaveThunk'\nimport {\n\tcollectTiles,\n\tdisownTiles,\n\tfillHand,\n\tresetGame,\n\tscore,\n\tsetJokerLetter,\n\tsetMode,\n} from '../model/actions'\nimport { TBag } from '../model/Bag'\nimport { TBoard } from '../model/Board'\nimport { Mode } from '../model/Mode'\nimport { MoveError } from '../model/MoveError'\nimport { IState } from '../model/State'\nimport letters from '../res/letters.json'\nimport { selectMoveErrorsFromState } from '../select/selectMoveErrors'\nimport { selectMoveScoreFromState } from '../select/selectMoveScore'\nimport {\n\tselectBagFromState,\n\tselectBoardFromState,\n} from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\nimport './PlaceTileButtonsComp.css'\n\ninterface PlaceTileButtonsCompPropsFromStore {\n\tboard: TBoard\n\tfieldIndex: number | null\n\tbag: TBag\n\tmoveScore: number\n\tmoveErrors: MoveError[]\n}\nexport interface PlaceTileButtonsCompProps\n\textends PlaceTileButtonsCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const PlaceTileButtonsComp = connect(\n\t(state: IState): PlaceTileButtonsCompPropsFromStore => ({\n\t\tbag: selectBagFromState(state),\n\t\tboard: selectBoardFromState(state),\n\t\tfieldIndex: state.app.fieldIndex,\n\t\tmoveScore: selectMoveScoreFromState(state),\n\t\tmoveErrors: selectMoveErrorsFromState(state),\n\t}),\n)(\n\t({\n\t\tboard,\n\t\tfieldIndex,\n\t\tbag,\n\t\tmoveScore,\n\t\tmoveErrors,\n\t\tdispatch,\n\t}: PlaceTileButtonsCompProps) => {\n\t\treturn (\n\t\t\t<div className='buttons'>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={moveErrors.length > 0}\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(score())\n\t\t\t\t\t\tdispatch(disownTiles())\n\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Oké`}\n\t\t\t\t\t{moveScore > 0 && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{`: `}\n\t\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\t\t{moveScore}\n\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Szedd össze`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tdisabled={bag.length < 7}\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t\tdispatch(setMode(Mode.ReplaceTiles))\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Csere`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tif (confirm(`Biztos hogy nem teszel semmit?`)) {\n\t\t\t\t\t\t\tdispatch(collectTiles())\n\t\t\t\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Kihagyom`}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tif (confirm(`Biztos hogy új játékot akarsz kezdeni?`)) {\n\t\t\t\t\t\t\tdispatch(resetGame())\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`Új játék`}\n\t\t\t\t</button>\n\t\t\t\t{get(() => board[fieldIndex!].tile!.isJoker) && (\n\t\t\t\t\t<select\n\t\t\t\t\t\tvalue={board[fieldIndex!].tile!.letter}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tdispatch(setJokerLetter({ letter: e.target.value }))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{letters.map((letter, index) => (\n\t\t\t\t\t\t\t<option key={index}>{letter.letter}</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { saveGameThunk } from '../action/saveGameThunk'\nimport { setPlayerName } from '../model/actions'\nimport { TPlayers } from '../model/Player'\nimport { IState } from '../model/State'\nimport { selectPlayersFromState } from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\n\nexport interface PlayersCompPropsFromStore {\n\tplayers: TPlayers\n\tplayerIndex: number | null\n}\nexport interface PlayersCompProps\n\textends PlayersCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const PlayersComp = connect(\n\t(state: IState): PlayersCompPropsFromStore => ({\n\t\tplayers: selectPlayersFromState(state),\n\t\tplayerIndex: state.app.playerIndex,\n\t}),\n)(({ players, playerIndex, dispatch }: PlayersCompProps) => {\n\treturn (\n\t\t<table className='players'>\n\t\t\t<tbody>\n\t\t\t\t{players.map((player, aPlayerIndex) => (\n\t\t\t\t\t<tr className='player' key={aPlayerIndex}>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName='player-name-button'\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tconst name = prompt(`Mi a neved?`)\n\t\t\t\t\t\t\t\t\tif (name && name.trim()) {\n\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\tsetPlayerName({\n\t\t\t\t\t\t\t\t\t\t\t\tplayerIndex: aPlayerIndex,\n\t\t\t\t\t\t\t\t\t\t\t\tname: name.trim(),\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tdispatch(saveGameThunk())\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{player.name}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>{aPlayerIndex === playerIndex && `•`}</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{player.score}\n\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n})\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { nextPlayerAndSaveThunk } from '../action/nextPlayerAndSaveThunk'\nimport {\n\taddTilesToBag,\n\tdeselectTilesToReplace,\n\tfillHand,\n\tremoveTilesToReplaceFromHand,\n\tsetMode,\n} from '../model/actions'\nimport { THandIndicesToReplace } from '../model/HandIndicesToReplace'\nimport { THands } from '../model/Hands'\nimport { Mode } from '../model/Mode'\nimport { IState } from '../model/State'\nimport { ITile } from '../model/Tile'\nimport {\n\tselectHandIndicesToReplaceFromState,\n\tselectHandsFromState,\n} from '../select/simpleSelectors'\nimport { DispatchProp } from './DispatchProp'\n\nexport interface ReplaceTilesButtonsCompPropsFromStore {\n\thands: THands\n\tplayerIndex: number | null\n\thandIndicesToReplace: THandIndicesToReplace\n}\nexport interface ReplaceTilesButtonsCompProps\n\textends ReplaceTilesButtonsCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const ReplaceTilesButtonsComp = connect(\n\t(state: IState): ReplaceTilesButtonsCompPropsFromStore => ({\n\t\thandIndicesToReplace: selectHandIndicesToReplaceFromState(state),\n\t\thands: selectHandsFromState(state),\n\t\tplayerIndex: state.app.playerIndex,\n\t}),\n)(\n\t({\n\t\thands,\n\t\tplayerIndex,\n\t\thandIndicesToReplace,\n\t\tdispatch,\n\t}: ReplaceTilesButtonsCompProps) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\t\t\tconst tilesToReplace = hand.filter(\n\t\t\t\t\t\t\t(tile, aHandIndex) =>\n\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex],\n\t\t\t\t\t\t) as ITile[]\n\t\t\t\t\t\tdispatch(removeTilesToReplaceFromHand())\n\t\t\t\t\t\tdispatch(deselectTilesToReplace())\n\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\tdispatch(addTilesToBag({ tiles: tilesToReplace }))\n\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t\t\t}}\n\t\t\t\t>{`Csere`}</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\tdispatch(deselectTilesToReplace())\n\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t}}\n\t\t\t\t>{`Mégse`}</button>\n\t\t\t</>\n\t\t)\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { getWordScore } from '../fun/getWordScore'\nimport { getWordString } from '../fun/getWordString'\nimport { BINGO_SCORE } from '../model/Constants'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { MoveError } from '../model/MoveError'\nimport { IState } from '../model/State'\nimport { selectIsBingoFromState } from '../select/selectIsBingo'\nimport { selectMoveErrorsFromState } from '../select/selectMoveErrors'\nimport { selectValidAndInvalidWordsFromState } from '../select/selectValidAndInvalidWords'\nimport { DispatchProp } from './DispatchProp'\nimport './WordInfoComp.css'\n\nexport interface WordInfoCompPropsFromStore {\n\twords: IValidAndInvalidWords\n\terrors: MoveError[]\n\tisBingo: boolean\n}\nexport interface WordInfoCompProps\n\textends WordInfoCompPropsFromStore,\n\t\tDispatchProp {}\n\nexport const WordInfoComp = connect(\n\t(state: IState): WordInfoCompPropsFromStore => ({\n\t\twords: selectValidAndInvalidWordsFromState(state),\n\t\terrors: selectMoveErrorsFromState(state),\n\t\tisBingo: selectIsBingoFromState(state),\n\t}),\n)(\n\t({\n\t\twords: { valid, invalid },\n\t\terrors,\n\t\tisBingo,\n\t\tdispatch,\n\t}: WordInfoCompProps) => {\n\t\treturn (\n\t\t\t<div className='word-info'>\n\t\t\t\t{valid.length > 0 && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{isBingo && (\n\t\t\t\t\t\t\t<div className='bingo'>{`+${BINGO_SCORE} pont!`}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{`Érvényes szavak:`}\n\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t{valid.map((word, index) => {\n\t\t\t\t\t\t\t\tconst wordString = getWordString(word)\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t\t\t{index > 0 && <>{`, `}</>}\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tclassName='valid-word'\n\t\t\t\t\t\t\t\t\t\t\thref={`http://ertelmezo.oszk.hu/kereses.php?csakcimben=on&kereses=${encodeURIComponent(\n\t\t\t\t\t\t\t\t\t\t\t\t`\"${wordString}\"`,\n\t\t\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{wordString.replace(' ', ' ')}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t\t<span className='word-score'>\n\t\t\t\t\t\t\t\t\t\t\t{getWordScore(word)}\n\t\t\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{invalid.length > 0 && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{`Érvénytelen szavak:`}\n\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t{invalid.map((word, index) => {\n\t\t\t\t\t\t\tconst wordString = getWordString(word)\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t\t{index > 0 && <>{`, `}</>}\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\tclassName='invalid-word'\n\t\t\t\t\t\t\t\t\t\thref={`http://ertelmezo.oszk.hu/kereses.php?csakcimben=on&kereses=${encodeURIComponent(\n\t\t\t\t\t\t\t\t\t\t\t`\"${wordString}\"`,\n\t\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{wordString.replace(' ', ' ')}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{errors.length > 0 && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{Array.from(errors)\n\t\t\t\t\t\t\t.map(e => {\n\t\t\t\t\t\t\t\tswitch (e) {\n\t\t\t\t\t\t\t\t\tcase MoveError.InvalidWord:\n\t\t\t\t\t\t\t\t\t\treturn `Van egy érvénytelen szavad!`\n\t\t\t\t\t\t\t\t\tcase MoveError.NoConnection:\n\t\t\t\t\t\t\t\t\t\treturn `Kapcsolódnod kell a meglévő lapkákhoz!`\n\t\t\t\t\t\t\t\t\tcase MoveError.NoDirection:\n\t\t\t\t\t\t\t\t\t\treturn `Egy vonalba tedd a lapkáid, hézag nélkül!`\n\t\t\t\t\t\t\t\t\tcase MoveError.NoStart:\n\t\t\t\t\t\t\t\t\t\treturn `Érintened kell a Start mezőt!`\n\t\t\t\t\t\t\t\t\tcase MoveError.NoTile:\n\t\t\t\t\t\t\t\t\t\treturn `Tégy le egy lapkát!`\n\t\t\t\t\t\t\t\t\tcase MoveError.OneTile:\n\t\t\t\t\t\t\t\t\t\treturn `Egy érvényes szóhoz legalább két lapka kell!`\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\treturn `[ppy6tx]: ${e}`\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.map((e, index) => (\n\t\t\t\t\t\t\t\t<div key={index}>{e}</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t},\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { loadGameThunk } from '../action/loadGameThunk'\nimport { nextPlayerAndSaveThunk } from '../action/nextPlayerAndSaveThunk'\nimport { savedGameExists } from '../fun/savedGameExists'\nimport { fillHand, nextPlayer, resetGame, setMode } from '../model/actions'\nimport { TBag } from '../model/Bag'\nimport { Mode } from '../model/Mode'\nimport { IState } from '../model/State'\nimport {\n\tselectBagFromState,\n\tselectModeFromState,\n} from '../select/simpleSelectors'\nimport './AppComp.css'\nimport { BagComp } from './BagComp'\nimport { BoardComp } from './BoardComp'\nimport { DispatchProp } from './DispatchProp'\nimport { HandComp } from './HandComp'\nimport { PlaceTileButtonsComp } from './PlaceTileButtonsComp'\nimport { PlayersComp } from './PlayersComp'\nimport { ReplaceTilesButtonsComp } from './ReplaceTilesButtonsComp'\nimport { WordInfoComp } from './WordInfoComp'\n\ninterface IAppCompPropsFromState {\n\tmode: Mode\n\tbag: TBag\n}\nexport interface IAppCompProps extends IAppCompPropsFromState, DispatchProp {}\n\nexport const AppComp = connect(\n\t(state: IState): IAppCompPropsFromState => ({\n\t\tmode: selectModeFromState(state),\n\t\tbag: selectBagFromState(state),\n\t}),\n)(({ mode, bag, dispatch }: IAppCompProps) => {\n\treturn (\n\t\t<>\n\t\t\t<BoardComp />\n\t\t\t<div className='tools'>\n\t\t\t\t{mode === Mode.NotStarted && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{savedGameExists() && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tdispatch(loadGameThunk())\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>{`Folytatás`}</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\tdispatch(resetGame())\n\t\t\t\t\t\t\t\tdispatch(nextPlayer())\n\t\t\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\t\t\tdispatch(nextPlayer())\n\t\t\t\t\t\t\t\tdispatch(fillHand())\n\t\t\t\t\t\t\t\tdispatch(setMode(Mode.PlaceTile))\n\t\t\t\t\t\t\t\tdispatch(nextPlayerAndSaveThunk())\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>{`Új játék`}</button>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.PlaceTile && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<PlayersComp />\n\t\t\t\t\t\t<BagComp bag={bag} />\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t<WordInfoComp />\n\t\t\t\t\t\t<PlaceTileButtonsComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.ReplaceTiles && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t<ReplaceTilesButtonsComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.Finished && <></>}\n\t\t\t</div>\n\t\t</>\n\t)\n})\n","import { get } from 'illa/FunctionUtil'\nimport { LocalStorageKey } from '../model/LocalStorageKey'\n\nexport function savedGameExists() {\n\treturn !!get(() => localStorage[LocalStorageKey.SavedGame])\n}\n","import { get } from 'illa/FunctionUtil'\nimport { setGame } from '../model/actions'\nimport { LocalStorageKey } from '../model/LocalStorageKey'\nimport { IState } from '../model/State'\nimport { ThunkValue } from './ThunkValue'\n\nexport function loadGameThunk(): ThunkValue {\n\treturn (dispatch, getState) => {\n\t\tconst savedGame = get(\n\t\t\t() => JSON.parse(localStorage[LocalStorageKey.SavedGame]) as IState,\n\t\t)\n\t\tif (savedGame) {\n\t\t\tdispatch(setGame({ game: savedGame }))\n\t\t}\n\t}\n}\n","import { isUndefinedOrNull, withInterface } from 'illa/Type'\nimport { createReducer, PayloadAction } from 'redux-starter-kit'\nimport { CaseReducersMapObject } from 'redux-starter-kit/src/createReducer'\nimport { selectHandCountFromAppState } from '../select/selectHandCount'\nimport { selectMoveScoreFromAppState } from '../select/selectMoveScore'\nimport {\n\taddTilesToBag,\n\tcollectTiles,\n\tdeselectTilesToReplace,\n\tdisownTiles,\n\tfillHand,\n\tnextPlayer,\n\tremoveTilesToReplaceFromHand,\n\tresetGame,\n\tscore,\n\tselectField,\n\tselectHand,\n\tsetGame,\n\tsetJokerLetter,\n\tsetMode,\n\tsetPlayerName,\n\tswapHandAndBoard,\n\tswapHands,\n\tswapTiles,\n\ttoggleHandIndexToReplace,\n} from './actions'\nimport { createBag, TBag } from './Bag'\nimport { createBoard, TBoard } from './Board'\nimport {\n\tcreateHandIndicesToReplace,\n\tTHandIndicesToReplace,\n} from './HandIndicesToReplace'\nimport { createHands, THands } from './Hands'\nimport { Mode } from './Mode'\nimport { createPlayers, TPlayers } from './Player'\nimport { ITile } from './Tile'\n\nexport interface IAppState {\n\treadonly mode: Mode\n\treadonly players: TPlayers\n\treadonly playerIndex: number | null\n\treadonly board: TBoard\n\treadonly bag: TBag\n\treadonly fieldIndex: number | null\n\treadonly handIndex: number | null\n\treadonly hands: THands\n\treadonly handIndicesToReplace: THandIndicesToReplace\n\treadonly startingHandCount: number | null\n}\n\nexport function createAppState(): IAppState {\n\treturn {\n\t\tmode: Mode.NotStarted,\n\t\tboard: createBoard(),\n\t\tbag: createBag(),\n\t\thands: createHands(),\n\t\tplayers: createPlayers(),\n\t\tplayerIndex: null,\n\t\tfieldIndex: null,\n\t\thandIndex: null,\n\t\thandIndicesToReplace: createHandIndicesToReplace(),\n\t\tstartingHandCount: null,\n\t}\n}\n\nexport const appStateReducer = createReducer(\n\tcreateAppState(),\n\twithInterface<CaseReducersMapObject<IAppState, PayloadAction<any>>>({\n\t\t[collectTiles.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof collectTiles>,\n\t\t) => {\n\t\t\tconst { board, playerIndex, hands } = state\n\t\t\tconst tiles: ITile[] = []\n\t\t\tfor (const field of board) {\n\t\t\t\tif (field.tile && field.tile.isOwned) {\n\t\t\t\t\tconst tile = field.tile\n\t\t\t\t\tfield.tile = null\n\t\t\t\t\ttiles.push(tile)\n\t\t\t\t\tif (tile.isJoker) tile.letter = ' '\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tfor (let i = 0; i < hand.length; i++) {\n\t\t\t\tif (isUndefinedOrNull(hand[i])) {\n\t\t\t\t\thand[i] = tiles.shift() || null\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[disownTiles.type]: (state, action: ReturnType<typeof disownTiles>) => {\n\t\t\tfor (const field of state.board) {\n\t\t\t\tif (field.tile) {\n\t\t\t\t\tfield.tile.isOwned = false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[fillHand.type]: (state, action: ReturnType<typeof fillHand>) => {\n\t\t\tconst { bag, hands, playerIndex } = state\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tconst count = Math.min(\n\t\t\t\tbag.length,\n\t\t\t\thand.reduce((sum, tile) => (tile ? sum : sum + 1), 0),\n\t\t\t)\n\t\t\tconst tiles: ITile[] = []\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst tile = bag.splice(\n\t\t\t\t\tMath.floor(Math.random() * bag.length),\n\t\t\t\t\t1,\n\t\t\t\t)[0]\n\t\t\t\ttile.isOwned = true\n\t\t\t\ttiles.push(tile)\n\t\t\t}\n\t\t\tstate.hands[playerIndex!] = hand.map(tile =>\n\t\t\t\ttile ? tile : tiles.shift() || null,\n\t\t\t)\n\t\t\tstate.startingHandCount = selectHandCountFromAppState(state)\n\t\t},\n\t\t[nextPlayer.type]: (state, action: ReturnType<typeof nextPlayer>) => {\n\t\t\tconst { playerIndex } = state\n\t\t\tstate.playerIndex = isUndefinedOrNull(playerIndex)\n\t\t\t\t? 0\n\t\t\t\t: 1 - playerIndex\n\t\t\tstate.fieldIndex = null\n\t\t\tstate.handIndex = null\n\t\t},\n\t\t[resetGame.type]: (state, action: ReturnType<typeof resetGame>) => {\n\t\t\treturn createAppState()\n\t\t},\n\t\t[score.type]: (state, action: ReturnType<typeof score>) => {\n\t\t\tconst { players, playerIndex } = state\n\t\t\tplayers[playerIndex!].score += selectMoveScoreFromAppState(state)\n\t\t},\n\t\t[selectField.type]: (state, action: ReturnType<typeof selectField>) => {\n\t\t\tstate.fieldIndex = action.payload.fieldIndex\n\t\t},\n\t\t[selectHand.type]: (state, action: ReturnType<typeof selectHand>) => {\n\t\t\tstate.handIndex = action.payload.handIndex\n\t\t},\n\t\t[setJokerLetter.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof setJokerLetter>,\n\t\t) => {\n\t\t\tconst { board, fieldIndex } = state\n\t\t\tboard[fieldIndex!].tile!.letter = action.payload.letter\n\t\t\tstate.fieldIndex = null\n\t\t},\n\t\t[setMode.type]: (state, action: ReturnType<typeof setMode>) => {\n\t\t\tconst mode = action.payload\n\t\t\tif (mode !== state.mode) {\n\t\t\t\tstate.fieldIndex = null\n\t\t\t\tstate.handIndex = null\n\t\t\t}\n\t\t\tstate.mode = mode\n\t\t},\n\t\t[setPlayerName.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof setPlayerName>,\n\t\t) => {\n\t\t\tconst { playerIndex, name } = action.payload\n\t\t\tstate.players[playerIndex].name = name\n\t\t},\n\t\t[swapHandAndBoard.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof swapHandAndBoard>,\n\t\t) => {\n\t\t\tconst { board, hands, playerIndex } = state\n\t\t\tconst { fieldIndex, handIndex } = action.payload\n\t\t\tconst field = board[fieldIndex]\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tconst tileOnBoard = field.tile\n\t\t\tconst tileInHand = hand[handIndex]\n\t\t\tstate.fieldIndex = null\n\t\t\tstate.handIndex = null\n\t\t\tboard[fieldIndex].tile = tileInHand\n\t\t\thand[handIndex] = tileOnBoard\n\t\t\tif (tileOnBoard && tileOnBoard.isJoker) {\n\t\t\t\ttileOnBoard.letter = ' '\n\t\t\t}\n\t\t},\n\t\t[swapHands.type]: (state, action: ReturnType<typeof swapHands>) => {\n\t\t\tconst { hands, playerIndex } = state\n\t\t\tconst { handIndexA, handIndexB } = action.payload\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tconst tileA = hand[handIndexA]\n\t\t\tconst tileB = hand[handIndexB]\n\t\t\tstate.handIndex = null\n\t\t\thand[handIndexA] = tileB\n\t\t\thand[handIndexB] = tileA\n\t\t},\n\t\t[swapTiles.type]: (state, action: ReturnType<typeof swapTiles>) => {\n\t\t\tconst { board } = state\n\t\t\tconst { fieldIndexA, fieldIndexB } = action.payload\n\t\t\tconst fieldATile = board[fieldIndexA].tile\n\t\t\tconst fieldBTile = board[fieldIndexB].tile\n\t\t\tstate.fieldIndex = null\n\t\t\tboard[fieldIndexA].tile = fieldBTile\n\t\t\tboard[fieldIndexB].tile = fieldATile\n\t\t},\n\t\t[toggleHandIndexToReplace.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof toggleHandIndexToReplace>,\n\t\t) => {\n\t\t\tconst { handIndicesToReplace } = state\n\t\t\tconst { handIndex } = action.payload\n\t\t\thandIndicesToReplace[handIndex] = !handIndicesToReplace[handIndex]\n\t\t},\n\t\t[removeTilesToReplaceFromHand.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof removeTilesToReplaceFromHand>,\n\t\t) => {\n\t\t\tconst { handIndicesToReplace, playerIndex, hands } = state\n\t\t\tconst hand = hands[playerIndex!]\n\t\t\tstate.hands[playerIndex!] = hand.map((tile, index) =>\n\t\t\t\thandIndicesToReplace[index] ? null : tile,\n\t\t\t)\n\t\t},\n\t\t[deselectTilesToReplace.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof deselectTilesToReplace>,\n\t\t) => {\n\t\t\tstate.handIndicesToReplace.fill(false)\n\t\t},\n\t\t[addTilesToBag.type]: (\n\t\t\tstate,\n\t\t\taction: ReturnType<typeof addTilesToBag>,\n\t\t) => {\n\t\t\tstate.bag.push(...action.payload.tiles)\n\t\t},\n\t\t[setGame.type]: (state, action: ReturnType<typeof setGame>) => {\n\t\t\treturn action.payload.game.app\n\t\t},\n\t}),\n)\n","import { withInterface } from 'illa/Type'\nimport { IField } from './Field'\nimport { FieldKind } from './FieldKind'\n\nexport type TBoard = ReadonlyArray<IField>\n\nexport function createBoard(): TBoard {\n\treturn `\nW--l---W---l--W\n-w---L---L---w-\n--w---l-l---w--\nl--w---l---w--l\n----w-----w----\n-L---L---L---L-\n--l---l-l---l--\nW--l---s---l--W\n--l---l-l---l--\n-L---L---L---L-\n----w-----w----\nl--w---l---w--l\n--w---l-l---w--\n-w---L---L---w-\nW--l---W---l--W\n`\n\t\t.trim()\n\t\t.split(/\\n/)\n\t\t.flatMap(row =>\n\t\t\trow.split('').map(letter =>\n\t\t\t\twithInterface<IField>({\n\t\t\t\t\tkind: letter as FieldKind,\n\t\t\t\t\ttile: null,\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n}\n","import { range } from 'illa/ArrayUtil'\nimport { withInterface } from 'illa/Type'\nimport letters from '../res/letters.json'\nimport { ITile } from './Tile'\n\nexport type TBag = ReadonlyArray<ITile>\n\nexport function createBag(): TBag {\n\treturn letters.flatMap(({ count, letter, score }) =>\n\t\trange(count).map(_ =>\n\t\t\twithInterface<ITile>({\n\t\t\t\tletter,\n\t\t\t\tscore,\n\t\t\t\tisOwned: false,\n\t\t\t\tisJoker: letter === ' ',\n\t\t\t}),\n\t\t),\n\t)\n}\n","import { range } from 'illa/ArrayUtil'\nimport { ITile } from './Tile'\n\nexport type THand = ReadonlyArray<ITile | null>\nexport type THands = ReadonlyArray<THand>\n\nexport function createHands(): THands {\n\treturn range(2).map(_ => range(7).map(_ => null))\n}\n","import { range } from 'illa/ArrayUtil'\nimport { withInterface } from 'illa/Type'\n\nexport interface IPlayer {\n\tname: string\n\tscore: number\n}\n\nexport type TPlayers = ReadonlyArray<IPlayer>\n\nexport function createPlayers(): TPlayers {\n\treturn range(2).map(_ =>\n\t\twithInterface<IPlayer>({\n\t\t\tname: `${_ + 1}. Játékos`,\n\t\t\tscore: 0,\n\t\t}),\n\t)\n}\n","import { range } from 'illa/ArrayUtil'\n\nexport type THandIndicesToReplace = ReadonlyArray<boolean>\n\nexport function createHandIndicesToReplace(): THandIndicesToReplace {\n\treturn range(7).map(_ => false)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'normalize.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { configureStore } from 'redux-starter-kit'\nimport { AppComp } from './comp/AppComp'\nimport './index.css'\nimport { appStateReducer } from './model/AppState'\nimport * as serviceWorker from './serviceWorker'\n\nexport const store = configureStore({\n\treducer: {\n\t\tapp: appStateReducer,\n\t},\n})\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<AppComp />\n\t</Provider>,\n\tdocument.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}