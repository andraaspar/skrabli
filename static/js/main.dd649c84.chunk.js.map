{"version":3,"sources":["fun/fillHand.tsx","fun/nextPlayer.tsx","model/Mode.tsx","fun/createState.tsx","fun/setMode.tsx","comp/ContextProvider.tsx","comp/BagComp.tsx","model/FieldKind.tsx","fun/isTileOwned.tsx","fun/isFieldIndexOwned.tsx","fun/swapHandAndBoard.tsx","comp/AspectComp.tsx","comp/TileComp.tsx","comp/BoardComp.tsx","fun/swapTiles.tsx","comp/HandComp.tsx","fun/swapHands.tsx","fun/collectTiles.tsx","model/Direction.tsx","model/Constants.tsx","fun/getNextFieldIndex.tsx","fun/getColumnIndex.tsx","fun/getRowIndex.tsx","fun/getColumnLine.tsx","fun/getRowLine.tsx","fun/getWordFromLine.tsx","fun/getWordsAt.tsx","fun/getWordInfo.tsx","fun/isThereAGap.tsx","fun/getAllOwnedWords.tsx","fun/getWordString.tsx","fun/isWordStringValid.tsx","fun/getValidAndInvalidWords.tsx","model/MoveError.tsx","fun/getWordScore.tsx","fun/getMoveScore.tsx","fun/validateMove.tsx","comp/PlaceTileButtonsComp.tsx","fun/score.tsx","fun/disownTiles.tsx","fun/setJokerLetter.tsx","comp/PlayersComp.tsx","comp/ReplaceTilesButtonsComp.tsx","comp/WordInfoComp.tsx","serviceWorker.ts","index.tsx","comp/AppComp.tsx","fun/resetGame.tsx"],"names":["fillHand","state","bag","hands","playerIndex","isUndefinedOrNull","hand","count","Math","min","length","reduce","sum","tile","tiles","newBag","slice","i","push","Object","objectSpread","splice","floor","random","isOwned","newHand","map","shift","concat","toConsumableArray","nextPlayer","fieldIndex","handIndex","Mode","createState","mode","NotStarted","board","trim","split","flatMap","row","letter","withInterface","kind","letters","_ref","score","range","_","isJoker","players","name","handIndicesToReplace","setMode","StateContext","React","createContext","SetStateContext","BagComp","c","useContext","react","className","FieldKind","isTileOwned","get","isFieldIndexOwned","swapHandAndBoard","_ref2","field","tileOnBoard","tileInHand","aFieldIndex","aPlayerIndex","aHandIndex","AspectComp","width","height","children","viewBox","TileComp","neverOwned","AspectComp_AspectComp","filter","Boolean","join","BoardComp","_useContext","setState","key","fieldKindToCssClass","onClick","e","PlaceTile","o","handTile","oldField","fieldIndexA","fieldIndexB","max","fieldA","fieldB","TileComp_TileComp","k","Normal","DoubleLetter","DoubleWord","Start","TripleLetter","TripleWord","Error","fieldKindToLabel","HandComp","isNullOrUndefined","ReplaceTiles","flag","index","handIndexA","handIndexB","tileA","tileB","collectTiles","isFieldAffected","Direction","BOARD_SIZE","CENTER_FIELD_INDEX","getFieldIndexOffset","direction","Horizontal","getColumnIndex","getRowIndex","getColumnLine","columnIndex","column","rowIndex","getRowLine","firstFieldIndex","getWordFromLine","line","lineIndex","word","startLineIndex","endLineIndex","unshift","getWordsAt","horizontal","vertical","getWordInfo","lastFieldIndex","colIndex","newColIndex","newRowIndex","Vertical","_getWordsAt","startFieldIndex","endFieldIndex","isThereAGap","getAllOwnedWords","words","_getWordInfo","mainWord","getWordString","isWordStringValid","w","indexOf","MoveError","getValidAndInvalidWords","memoizee","valid","invalid","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","getWordScore","wordMulti","tileScore","getMoveScore","validateMove","errors","Set","add","NoTile","size","OneTile","NoDirection","touchesStart","touchesUnowned","InvalidWord","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","NoStart","NoConnection","PlaceTileButtonsComp","moveScore","disabled","player","onChange","target","PlayersComp","prompt","ReplaceTilesButtonsComp","tilesToReplace","_ref3","WordInfoComp","_getValidAndInvalidWo","wordString","href","encodeURIComponent","replace","Array","from","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","_useReducer","useReducer","reducer","s","_useReducer2","slicedToArray","Provider","BoardComp_BoardComp","PlayersComp_PlayersComp","BagComp_BagComp","HandComp_HandComp","WordInfoComp_WordInfoComp","PlaceTileButtonsComp_PlaceTileButtonsComp","Finished","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd649c84.chunk.js","sourcesContent":["import { isUndefinedOrNull } from 'illa/Type'\nimport { IState } from '../model/State'\nimport { ITile } from '../model/Tile'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport function fillHand(): TSetStateReducer<IState> {\n\treturn state => {\n\t\tconst { bag, hands, playerIndex } = state\n\t\tif (isUndefinedOrNull(playerIndex)) throw `[ppt31s]`\n\t\tconst hand = hands[playerIndex]\n\t\tconst count = Math.min(\n\t\t\tbag.length,\n\t\t\thand.reduce((sum, tile) => (tile ? sum : sum + 1), 0),\n\t\t)\n\t\tconst tiles: ITile[] = []\n\t\tconst newBag = bag.slice()\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\ttiles.push({\n\t\t\t\t...newBag.splice(\n\t\t\t\t\tMath.floor(Math.random() * newBag.length),\n\t\t\t\t\t1,\n\t\t\t\t)[0],\n\t\t\t\tisOwned: true,\n\t\t\t})\n\t\t}\n\t\tconst newHand = hand.map(tile => (tile ? tile : tiles.shift() || null))\n\t\treturn {\n\t\t\tbag: newBag,\n\t\t\thands: [\n\t\t\t\t...hands.slice(0, playerIndex),\n\t\t\t\tnewHand,\n\t\t\t\t...hands.slice(playerIndex + 1),\n\t\t\t],\n\t\t}\n\t}\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport function nextPlayer(): TSetStateReducer<IState> {\n\treturn state => {\n\t\tconst { playerIndex } = state\n\t\treturn {\n\t\t\tplayerIndex: isUndefinedOrNull(playerIndex) ? 0 : 1 - playerIndex,\n\t\t\tfieldIndex: null,\n\t\t\thandIndex: null,\n\t\t}\n\t}\n}\n","export enum Mode {\n\tNotStarted = 'NotStarted',\n\tPlaceTile = 'PlaceTile',\n\tReplaceTiles = 'ReplaceTiles',\n\tFinished = 'Finished',\n}\n","import { range } from 'illa/ArrayUtil'\nimport { withInterface } from 'illa/Type'\nimport { IField } from '../model/Field'\nimport { FieldKind } from '../model/FieldKind'\nimport { Mode } from '../model/Mode'\nimport { IPlayer } from '../model/Player'\nimport { IState } from '../model/State'\nimport { ITile } from '../model/Tile'\nimport letters from '../res/letters.json'\n\nexport function createState(): IState {\n\treturn {\n\t\tmode: Mode.NotStarted,\n\t\tboard: `\nW--l---W---l--W\n-w---L---L---w-\n--w---l-l---w--\nl--w---l---w--l\n----w-----w----\n-L---L---L---L-\n--l---l-l---l--\nW--l---s---l--W\n--l---l-l---l--\n-L---L---L---L-\n----w-----w----\nl--w---l---w--l\n--w---l-l---w--\n-w---L---L---w-\nW--l---W---l--W\n`\n\t\t\t.trim()\n\t\t\t.split(/\\n/)\n\t\t\t.flatMap(row =>\n\t\t\t\trow.split('').map(letter =>\n\t\t\t\t\twithInterface<IField>({\n\t\t\t\t\t\tkind: letter as FieldKind,\n\t\t\t\t\t\ttile: null,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t),\n\t\tbag: letters.flatMap(({ count, letter, score }) =>\n\t\t\trange(count).map(_ =>\n\t\t\t\twithInterface<ITile>({\n\t\t\t\t\tletter,\n\t\t\t\t\tscore,\n\t\t\t\t\tisOwned: false,\n\t\t\t\t\tisJoker: letter === ' ',\n\t\t\t\t}),\n\t\t\t),\n\t\t),\n\t\thands: range(2).map(_ => range(7).map(_ => null)),\n\t\tplayers: range(2).map(_ =>\n\t\t\twithInterface<IPlayer>({\n\t\t\t\tname: `${_ + 1}. Játékos`,\n\t\t\t\tscore: 0,\n\t\t\t}),\n\t\t),\n\t\tplayerIndex: null,\n\t\tfieldIndex: null,\n\t\thandIndex: null,\n\t\thandIndicesToReplace: range(7).map(_ => false),\n\t}\n}\n","import { Mode } from '../model/Mode'\nimport { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport function setMode(mode: Mode): TSetStateReducer<IState> {\n\treturn state => ({\n\t\tmode,\n\t\tfieldIndex: mode === state.mode ? state.fieldIndex : null,\n\t\thandIndex: mode === state.mode ? state.handIndex : null,\n\t})\n}\n","import React, { useReducer } from 'react'\nimport { createState } from '../fun/createState'\nimport { IState } from '../model/State'\nimport { TSetState } from '../model/TSetState'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport const StateContext = React.createContext((null as any) as IState)\nexport const SetStateContext = React.createContext((null as any) as TSetState<\n\tIState\n>)\n\nexport function ContextProvider({ children }: React.PropsWithChildren<{}>) {\n\tconst [state, setState] = useReducer(\n\t\t(state: IState, reducer: TSetStateReducer<IState>): IState => {\n\t\t\tconst s = reducer(state)\n\t\t\tif (process.env.NODE_ENV !== 'production')\n\t\t\t\tconsole.log(`setState:`, s)\n\t\t\treturn { ...state, ...s }\n\t\t},\n\t\tcreateState(),\n\t)\n\tif (process.env.NODE_ENV !== 'production') console.log(`Render:`, state)\n\treturn (\n\t\t<StateContext.Provider value={state}>\n\t\t\t<SetStateContext.Provider value={setState}>\n\t\t\t\t{children}\n\t\t\t</SetStateContext.Provider>\n\t\t</StateContext.Provider>\n\t)\n}\n","import * as React from 'react'\nimport { useContext } from 'react'\nimport './BagComp.css'\nimport { StateContext } from './ContextProvider'\n\nexport function BagComp() {\n\tconst c = useContext(StateContext)\n\treturn <div className='bag'>{`Lapkák a zsákban: ${c.bag.length}`}</div>\n}\n","export enum FieldKind {\n\tNormal = '-',\n\tStart = 's',\n\tDoubleLetter = 'l',\n\tTripleLetter = 'L',\n\tDoubleWord = 'w',\n\tTripleWord = 'W',\n}\n","import { get } from 'illa/FunctionUtil'\nimport { ITile } from '../model/Tile'\n\nexport function isTileOwned(tile: ITile | null): boolean {\n\treturn !!get(() => tile!.isOwned)\n}\n","import { IField } from '../model/Field'\nimport { isTileOwned } from './isTileOwned'\nexport function isFieldIndexOwned(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): boolean {\n\treturn isTileOwned(board[fieldIndex].tile)\n}\n","import { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport function swapHandAndBoard({\n\thandIndex,\n\tfieldIndex,\n}: {\n\thandIndex: number\n\tfieldIndex: number\n}): TSetStateReducer<IState> {\n\treturn ({ board, hands, playerIndex }) => {\n\t\tconst field = board[fieldIndex]\n\t\tconst hand = hands[playerIndex!]\n\t\tconst tileOnBoard = field.tile\n\t\tconst tileInHand = hand[handIndex]\n\t\treturn {\n\t\t\tfieldIndex: null,\n\t\t\thandIndex: null,\n\t\t\tboard: board.map((field, aFieldIndex) =>\n\t\t\t\taFieldIndex === fieldIndex\n\t\t\t\t\t? { ...field, tile: tileInHand }\n\t\t\t\t\t: field,\n\t\t\t),\n\t\t\thands: hands.map((hand, aPlayerIndex) =>\n\t\t\t\tplayerIndex === aPlayerIndex\n\t\t\t\t\t? hand.map((tile, aHandIndex) =>\n\t\t\t\t\t\t\taHandIndex === handIndex\n\t\t\t\t\t\t\t\t? tileOnBoard && tileOnBoard.isJoker\n\t\t\t\t\t\t\t\t\t? { ...tileOnBoard, letter: ' ' }\n\t\t\t\t\t\t\t\t\t: tileOnBoard\n\t\t\t\t\t\t\t\t: tile,\n\t\t\t\t\t  )\n\t\t\t\t\t: hand,\n\t\t\t),\n\t\t}\n\t}\n}\n","import * as React from 'react'\nimport './AspectComp.css'\n\nexport function AspectComp({\n\twidth,\n\theight,\n\tchildren,\n}: React.PropsWithChildren<{\n\twidth: number\n\theight: number\n}>) {\n\treturn (\n\t\t<div className='aspect'>\n\t\t\t<svg viewBox={`0 0 ${width} ${height}`} />\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n","import * as React from 'react'\nimport { ITile } from '../model/Tile'\nimport { AspectComp } from './AspectComp'\nimport './TileComp.css'\n\nexport function TileComp({\n\ttile,\n\tneverOwned,\n}: {\n\ttile: ITile\n\tneverOwned?: boolean\n}) {\n\treturn (\n\t\t<AspectComp width={1} height={1}>\n\t\t\t<div\n\t\t\t\tclassName={[\n\t\t\t\t\t'tile',\n\t\t\t\t\t!neverOwned && tile.isOwned && 'is-owned',\n\t\t\t\t\ttile.isJoker && 'is-joker',\n\t\t\t\t]\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.join(' ')}\n\t\t\t>\n\t\t\t\t<div className='tile-letter'>{tile.letter}</div>\n\t\t\t\t<div className='tile-score'>{tile.score}</div>\n\t\t\t</div>\n\t\t</AspectComp>\n\t)\n}\n","import { get } from 'illa/FunctionUtil'\nimport { isUndefinedOrNull } from 'illa/Type'\nimport * as React from 'react'\nimport { useContext } from 'react'\nimport { isFieldIndexOwned } from '../fun/isFieldIndexOwned'\nimport { swapHandAndBoard } from '../fun/swapHandAndBoard'\nimport { swapTiles } from '../fun/swapTiles'\nimport { FieldKind } from '../model/FieldKind'\nimport { Mode } from '../model/Mode'\nimport { AspectComp } from './AspectComp'\nimport './BoardComp.css'\nimport { SetStateContext, StateContext } from './ContextProvider'\nimport { TileComp } from './TileComp'\n\nexport function BoardComp() {\n\tconst {\n\t\tmode,\n\t\thands,\n\t\tplayerIndex,\n\t\thandIndex,\n\t\tfieldIndex,\n\t\tboard,\n\t} = useContext(StateContext)\n\tconst setState = useContext(SetStateContext)\n\treturn (\n\t\t<div className='board'>\n\t\t\t{board.map((field, aFieldIndex) => (\n\t\t\t\t<AspectComp key={aFieldIndex} width={1} height={1}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t'board-field',\n\t\t\t\t\t\t\tfieldKindToCssClass(field.kind),\n\t\t\t\t\t\t\taFieldIndex === fieldIndex && 'is-selected',\n\t\t\t\t\t\t]\n\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\tif (mode !== Mode.PlaceTile) return {}\n\t\t\t\t\t\t\tconst handTile = get(\n\t\t\t\t\t\t\t\t() => hands[playerIndex!][handIndex!],\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tconst oldField = get(() => board[fieldIndex!])\n\t\t\t\t\t\t\tconst field = board[aFieldIndex]\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!field.tile ||\n\t\t\t\t\t\t\t\tisFieldIndexOwned(board, aFieldIndex)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tif (handTile) {\n\t\t\t\t\t\t\t\t\tsetState(\n\t\t\t\t\t\t\t\t\t\tswapHandAndBoard({\n\t\t\t\t\t\t\t\t\t\t\thandIndex: handIndex!,\n\t\t\t\t\t\t\t\t\t\t\tfieldIndex: aFieldIndex,\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (aFieldIndex === fieldIndex) {\n\t\t\t\t\t\t\t\t\t\treturn { fieldIndex: null }\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tisUndefinedOrNull(fieldIndex) ||\n\t\t\t\t\t\t\t\t\t\t\t(!get(\n\t\t\t\t\t\t\t\t\t\t\t\t() => oldField!.tile!.isOwned,\n\t\t\t\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\t\t\t\t\t!get(() => field.tile!.isOwned))\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tsetState(state => ({\n\t\t\t\t\t\t\t\t\t\t\t\tfieldIndex: field.tile\n\t\t\t\t\t\t\t\t\t\t\t\t\t? aFieldIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tsetState(\n\t\t\t\t\t\t\t\t\t\t\t\tswapTiles({\n\t\t\t\t\t\t\t\t\t\t\t\t\tfieldIndexA: fieldIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfieldIndexB: aFieldIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn { fieldIndex: null }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{field.tile ? (\n\t\t\t\t\t\t\t<TileComp tile={field.tile} />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tfieldKindToLabel(field.kind)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</AspectComp>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nfunction fieldKindToCssClass(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn 'is-normal'\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn 'is-double-letter'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn 'is-double-word'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'is-start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn 'is-triple-letter'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn 'is-triple-word'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp03n]: ${k}`)\n\t}\n}\n\nfunction fieldKindToLabel(k: FieldKind): string {\n\tswitch (k) {\n\t\tcase FieldKind.Normal:\n\t\t\treturn ' '\n\t\tcase FieldKind.DoubleLetter:\n\t\t\treturn '2×\\nBetű'\n\t\tcase FieldKind.DoubleWord:\n\t\t\treturn '2×\\nSzó'\n\t\tcase FieldKind.Start:\n\t\t\treturn 'Start'\n\t\tcase FieldKind.TripleLetter:\n\t\t\treturn '3×\\nBetű'\n\t\tcase FieldKind.TripleWord:\n\t\t\treturn '3×\\nSzó'\n\t\tdefault:\n\t\t\tthrow new Error(`[ppp079]: ${k}`)\n\t}\n}\n","import { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport function swapTiles(o: {\n\tfieldIndexA: number\n\tfieldIndexB: number\n}): TSetStateReducer<IState> {\n\treturn ({ board }) => {\n\t\tconst fieldIndexA = Math.min(o.fieldIndexA, o.fieldIndexB)\n\t\tconst fieldIndexB = Math.max(o.fieldIndexA, o.fieldIndexB)\n\t\tconst fieldA = board[fieldIndexA]\n\t\tconst fieldB = board[fieldIndexB]\n\t\treturn {\n\t\t\tfieldIndex: null,\n\t\t\tboard: [\n\t\t\t\t...board.slice(0, fieldIndexA),\n\t\t\t\t{ ...fieldA, tile: fieldB.tile },\n\t\t\t\t...board.slice(fieldIndexA + 1, fieldIndexB),\n\t\t\t\t{ ...fieldB, tile: fieldA.tile },\n\t\t\t\t...board.slice(fieldIndexB + 1),\n\t\t\t],\n\t\t}\n\t}\n}\n","import { get } from 'illa/FunctionUtil'\nimport { isUndefinedOrNull } from 'illa/Type'\nimport * as React from 'react'\nimport { useContext } from 'react'\nimport { isNullOrUndefined } from 'util'\nimport { swapHandAndBoard } from '../fun/swapHandAndBoard'\nimport { swapHands } from '../fun/swapHands'\nimport { Mode } from '../model/Mode'\nimport { AspectComp } from './AspectComp'\nimport { SetStateContext, StateContext } from './ContextProvider'\nimport './HandComp.css'\nimport { TileComp } from './TileComp'\n\nexport function HandComp() {\n\tconst {\n\t\thands,\n\t\tplayerIndex,\n\t\thandIndex,\n\t\tboard,\n\t\tfieldIndex,\n\t\tmode,\n\t\thandIndicesToReplace,\n\t} = useContext(StateContext)\n\tconst setState = useContext(SetStateContext)\n\treturn (\n\t\t<>\n\t\t\t{!isNullOrUndefined(playerIndex) && (\n\t\t\t\t<div className='hand'>\n\t\t\t\t\t{hands[playerIndex].map((tile, aHandIndex) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={aHandIndex}\n\t\t\t\t\t\t\tclassName={[\n\t\t\t\t\t\t\t\t'hand-slot',\n\t\t\t\t\t\t\t\thandIndex === aHandIndex && 'is-selected',\n\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex] &&\n\t\t\t\t\t\t\t\t\t'is-to-be-replaced',\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t\t\t\t.join(' ')}\n\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\tif (mode === Mode.ReplaceTiles) {\n\t\t\t\t\t\t\t\t\tsetState(state => ({\n\t\t\t\t\t\t\t\t\t\thandIndicesToReplace: handIndicesToReplace.map(\n\t\t\t\t\t\t\t\t\t\t\t(flag, index) =>\n\t\t\t\t\t\t\t\t\t\t\t\tindex === aHandIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t? !flag\n\t\t\t\t\t\t\t\t\t\t\t\t\t: flag,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (get(() => board[fieldIndex!].tile)) {\n\t\t\t\t\t\t\t\t\t\tsetState(\n\t\t\t\t\t\t\t\t\t\t\tswapHandAndBoard({\n\t\t\t\t\t\t\t\t\t\t\t\thandIndex: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\tfieldIndex: fieldIndex!,\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (handIndex === aHandIndex) {\n\t\t\t\t\t\t\t\t\t\t\tsetState(state => ({\n\t\t\t\t\t\t\t\t\t\t\t\thandIndex: null,\n\t\t\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (isUndefinedOrNull(handIndex)) {\n\t\t\t\t\t\t\t\t\t\t\t\tsetState(state => ({\n\t\t\t\t\t\t\t\t\t\t\t\t\thandIndex: hands[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplayerIndex!\n\t\t\t\t\t\t\t\t\t\t\t\t\t][aHandIndex]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? aHandIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tsetState(\n\t\t\t\t\t\t\t\t\t\t\t\t\tswapHands({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexA: handIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandIndexB: aHandIndex,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<AspectComp width={1} height={1}>\n\t\t\t\t\t\t\t\t{tile && <TileComp tile={tile} neverOwned />}\n\t\t\t\t\t\t\t</AspectComp>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t)\n}\n","import { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport function swapHands(o: {\n\thandIndexA: number\n\thandIndexB: number\n}): TSetStateReducer<IState> {\n\treturn ({ hands, playerIndex }) => {\n\t\tconst hand = hands[playerIndex!]\n\t\tconst handIndexA = Math.min(o.handIndexA, o.handIndexB)\n\t\tconst handIndexB = Math.max(o.handIndexA, o.handIndexB)\n\t\tconst tileA = hand[handIndexA]\n\t\tconst tileB = hand[handIndexB]\n\t\treturn {\n\t\t\thandIndex: null,\n\t\t\thands: [\n\t\t\t\t...hands.slice(0, playerIndex!),\n\t\t\t\t[\n\t\t\t\t\t...hand.slice(0, handIndexA),\n\t\t\t\t\ttileB,\n\t\t\t\t\t...hand.slice(handIndexA + 1, handIndexB),\n\t\t\t\t\ttileA,\n\t\t\t\t\t...hand.slice(handIndexB + 1),\n\t\t\t\t],\n\t\t\t\t...hands.slice(playerIndex! + 1),\n\t\t\t],\n\t\t}\n\t}\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { IField } from '../model/Field'\nimport { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport function collectTiles(): TSetStateReducer<IState> {\n\treturn ({ board, playerIndex, hands }) => {\n\t\tconst tiles = board\n\t\t\t.filter(isFieldAffected)\n\t\t\t.map(field => field.tile)\n\t\t\t.map(tile =>\n\t\t\t\ttile && tile.isJoker ? { ...tile, letter: ' ' } : tile,\n\t\t\t)\n\t\treturn {\n\t\t\tboard: board.map(field =>\n\t\t\t\tisFieldAffected(field) ? { ...field, tile: null } : field,\n\t\t\t),\n\t\t\thands: hands.map((hand, handIndex) =>\n\t\t\t\thandIndex === playerIndex\n\t\t\t\t\t? hand.map(tile =>\n\t\t\t\t\t\t\tisUndefinedOrNull(tile)\n\t\t\t\t\t\t\t\t? tiles.shift() || null\n\t\t\t\t\t\t\t\t: tile,\n\t\t\t\t\t  )\n\t\t\t\t\t: hand,\n\t\t\t),\n\t\t}\n\t}\n}\n\nfunction isFieldAffected(field: IField): boolean {\n\treturn !!field.tile && field.tile.isOwned\n}\n","export enum Direction {\n\tHorizontal,\n\tVertical,\n}\n","export const BOARD_SIZE = 15\nexport const CENTER_FIELD_INDEX = BOARD_SIZE * 7 + 7\n","import { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\n\nexport function getFieldIndexOffset(direction: Direction) {\n\treturn direction === Direction.Horizontal ? 1 : BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\nexport function getColumnIndex(fieldIndex: number) {\n\treturn fieldIndex % BOARD_SIZE\n}\n","import { BOARD_SIZE } from '../model/Constants'\nexport function getRowIndex(fieldIndex: number) {\n\treturn Math.floor(fieldIndex / BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\nexport function getColumnLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst columnIndex = getColumnIndex(fieldIndex)\n\tconst column: IField[] = []\n\tfor (let rowIndex = 0; rowIndex < BOARD_SIZE; rowIndex++) {\n\t\tcolumn.push(board[rowIndex * BOARD_SIZE + columnIndex])\n\t}\n\treturn column\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { getRowIndex } from './getRowIndex'\n\nexport function getRowLine(\n\tboard: ReadonlyArray<IField>,\n\tfieldIndex: number,\n): IField[] {\n\tconst firstFieldIndex = getRowIndex(fieldIndex) * BOARD_SIZE\n\treturn board.slice(firstFieldIndex, firstFieldIndex + BOARD_SIZE)\n}\n","import { BOARD_SIZE } from '../model/Constants'\nimport { IField } from '../model/Field'\n\nexport function getWordFromLine(\n\tline: ReadonlyArray<IField>,\n\tlineIndex: number,\n) {\n\tconst word: IField[] = []\n\tlet index = lineIndex\n\tlet startLineIndex = lineIndex\n\tlet endLineIndex = lineIndex\n\twhile (index >= 0) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.unshift(field)\n\t\tstartLineIndex = index\n\t\tindex--\n\t}\n\tindex = lineIndex + 1\n\twhile (index < BOARD_SIZE) {\n\t\tconst field = line[index]\n\t\tif (!field.tile) break\n\t\tword.push(field)\n\t\tendLineIndex = index\n\t\tindex++\n\t}\n\treturn {\n\t\tword: word.length > 1 ? word : [],\n\t\tstartLineIndex,\n\t\tendLineIndex,\n\t}\n}\n","import { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\nimport { getColumnLine } from './getColumnLine'\nimport { getRowIndex } from './getRowIndex'\nimport { getRowLine } from './getRowLine'\nimport { getWordFromLine } from './getWordFromLine'\n\nexport function getWordsAt(board: ReadonlyArray<IField>, fieldIndex: number) {\n\treturn {\n\t\thorizontal: getWordFromLine(\n\t\t\tgetRowLine(board, fieldIndex),\n\t\t\tgetColumnIndex(fieldIndex),\n\t\t),\n\t\tvertical: getWordFromLine(\n\t\t\tgetColumnLine(board, fieldIndex),\n\t\t\tgetRowIndex(fieldIndex),\n\t\t),\n\t}\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { BOARD_SIZE } from '../model/Constants'\nimport { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { getColumnIndex } from './getColumnIndex'\nimport { getRowIndex } from './getRowIndex'\nimport { getWordsAt } from './getWordsAt'\nimport { isFieldIndexOwned } from './isFieldIndexOwned'\nimport { isThereAGap } from './isThereAGap'\n\nexport function getWordInfo(board: ReadonlyArray<IField>) {\n\tlet firstFieldIndex: number | null = null\n\tlet lastFieldIndex: number | null = null\n\tlet colIndex: number | null = null\n\tlet rowIndex: number | null = null\n\tlet direction: Direction | null = null\n\n\tfor (let fieldIndex = 0; fieldIndex < board.length; fieldIndex++) {\n\t\tif (isFieldIndexOwned(board, fieldIndex)) {\n\t\t\tif (isUndefinedOrNull(colIndex)) {\n\t\t\t\t// First field\n\t\t\t\tfirstFieldIndex = fieldIndex\n\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t\tcolIndex = getColumnIndex(fieldIndex)\n\t\t\t\trowIndex = getRowIndex(fieldIndex)\n\t\t\t} else {\n\t\t\t\tconst newColIndex = getColumnIndex(fieldIndex)\n\t\t\t\tconst newRowIndex = getRowIndex(fieldIndex)\n\t\t\t\tif (lastFieldIndex === firstFieldIndex) {\n\t\t\t\t\t// Second field\n\t\t\t\t\tif (colIndex === newColIndex) {\n\t\t\t\t\t\tdirection = Direction.Vertical\n\t\t\t\t\t} else if (rowIndex === newRowIndex) {\n\t\t\t\t\t\tdirection = Direction.Horizontal\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Third+ field\n\t\t\t\t\tif (\n\t\t\t\t\t\t(direction === Direction.Vertical &&\n\t\t\t\t\t\t\tcolIndex !== newColIndex) ||\n\t\t\t\t\t\t(direction === Direction.Horizontal &&\n\t\t\t\t\t\t\trowIndex !== newRowIndex)\n\t\t\t\t\t) {\n\t\t\t\t\t\tdirection = null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcolIndex = newColIndex\n\t\t\t\trowIndex = newRowIndex\n\t\t\t\tlastFieldIndex = fieldIndex\n\t\t\t}\n\t\t}\n\t}\n\tif (!isUndefinedOrNull(firstFieldIndex)) {\n\t\tconst { horizontal, vertical } = getWordsAt(board, firstFieldIndex)\n\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\tif (horizontal.word.length) {\n\t\t\t\tdirection = Direction.Horizontal\n\t\t\t} else if (vertical.word.length) {\n\t\t\t\tdirection = Direction.Vertical\n\t\t\t}\n\t\t}\n\t\tif (direction === Direction.Horizontal) {\n\t\t\tfirstFieldIndex =\n\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\thorizontal.startLineIndex\n\t\t\tlastFieldIndex =\n\t\t\t\tgetRowIndex(firstFieldIndex) * BOARD_SIZE +\n\t\t\t\thorizontal.endLineIndex\n\t\t} else if (direction === Direction.Vertical) {\n\t\t\tfirstFieldIndex =\n\t\t\t\tvertical.startLineIndex * BOARD_SIZE +\n\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t\tlastFieldIndex =\n\t\t\t\tvertical.endLineIndex * BOARD_SIZE +\n\t\t\t\tgetColumnIndex(firstFieldIndex)\n\t\t}\n\t}\n\t// if (\n\t// \t!isUndefinedOrNull(firstFieldIndex) &&\n\t// \tfirstFieldIndex === lastFieldIndex\n\t// ) {\n\t// \tfor (const d of [Direction.Horizontal, Direction.Vertical]) {\n\t// \t\tif (\n\t// \t\t\tget(\n\t// \t\t\t\t() => board[firstFieldIndex! + getFieldIndexOffset(d)].tile,\n\t// \t\t\t) ||\n\t// \t\t\tget(() => board[firstFieldIndex! - getFieldIndexOffset(d)].tile)\n\t// \t\t) {\n\t// \t\t\tdirection = d\n\t// \t\t\tbreak\n\t// \t\t}\n\t// \t}\n\t// }\n\tif (\n\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t!isUndefinedOrNull(direction) &&\n\t\tisThereAGap(board, firstFieldIndex, lastFieldIndex, direction)\n\t) {\n\t\tdirection = null\n\t}\n\treturn {\n\t\tfirstFieldIndex,\n\t\tlastFieldIndex,\n\t\tdirection,\n\t}\n}\n","import { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { getFieldIndexOffset } from './getNextFieldIndex'\nexport function isThereAGap(\n\tboard: ReadonlyArray<IField>,\n\tstartFieldIndex: number,\n\tendFieldIndex: number,\n\tdirection: Direction,\n) {\n\tfor (\n\t\tlet fieldIndex = startFieldIndex;\n\t\tfieldIndex <= endFieldIndex;\n\t\tfieldIndex += getFieldIndexOffset(direction)\n\t) {\n\t\tif (!board[fieldIndex].tile) return true\n\t}\n\treturn false\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport { Direction } from '../model/Direction'\nimport { IField } from '../model/Field'\nimport { getFieldIndexOffset } from './getNextFieldIndex'\nimport { getWordInfo } from './getWordInfo'\nimport { getWordsAt } from './getWordsAt'\nimport { isTileOwned } from './isTileOwned'\n\nexport function getAllOwnedWords(board: ReadonlyArray<IField>): IField[][] {\n\tconst words: IField[][] = []\n\tconst { firstFieldIndex, lastFieldIndex, direction } = getWordInfo(board)\n\tlet mainWord: IField[] | null = null\n\tif (\n\t\t!isUndefinedOrNull(firstFieldIndex) &&\n\t\t!isUndefinedOrNull(lastFieldIndex) &&\n\t\t!isUndefinedOrNull(direction)\n\t) {\n\t\tlet fieldIndex = firstFieldIndex\n\t\tlet field = board[fieldIndex]\n\t\twhile (field && field.tile) {\n\t\t\tif (isTileOwned(field.tile)) {\n\t\t\t\tconst { horizontal, vertical } = getWordsAt(board, fieldIndex)\n\t\t\t\tif (direction == Direction.Horizontal) {\n\t\t\t\t\twords.push(vertical.word)\n\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t// words.push(word.horizontal)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmainWord = horizontal.word\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twords.push(horizontal.word)\n\t\t\t\t\tif (mainWord) {\n\t\t\t\t\t\t// words.push(word.vertical)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmainWord = vertical.word\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfieldIndex += getFieldIndexOffset(direction)\n\t\t\tif (fieldIndex > lastFieldIndex) break\n\t\t\tfield = board[fieldIndex]\n\t\t}\n\t}\n\tif (mainWord) words.push(mainWord)\n\treturn words.filter(_ => _.length > 0)\n}\n","import { IField } from '../model/Field'\nexport function getWordString(word: ReadonlyArray<IField>): string {\n\treturn word.map(_ => _.tile!.letter).join('')\n}\n","import words from '../res/words.json'\nexport function isWordStringValid(w: string): boolean {\n\treturn words.indexOf(w) >= 0\n}\n","import memoizee from 'memoizee'\nimport { IField } from '../model/Field'\nimport { IValidAndInvalidWords } from '../model/IValidAndInvalidWords'\nimport { getAllOwnedWords } from './getAllOwnedWords'\nimport { getWordString } from './getWordString'\nimport { isWordStringValid } from './isWordStringValid'\n\nexport const getValidAndInvalidWords = memoizee(\n\t(board: ReadonlyArray<IField>): IValidAndInvalidWords => {\n\t\tconst words = getAllOwnedWords(board)\n\t\tconst valid: IField[][] = []\n\t\tconst invalid: IField[][] = []\n\t\tfor (let word of words) {\n\t\t\tif (isWordStringValid(getWordString(word))) {\n\t\t\t\tvalid.push(word)\n\t\t\t} else {\n\t\t\t\tinvalid.push(word)\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tvalid,\n\t\t\tinvalid,\n\t\t}\n\t},\n\t{ max: 1 },\n)\n","export enum MoveError {\n\tNoTile,\n\tOneTile,\n\tNoDirection,\n\tNoStart,\n\tNoConnection,\n\tInvalidWord,\n}\n","import { IField } from '../model/Field'\nimport { FieldKind } from '../model/FieldKind'\n\nexport function getWordScore(word: ReadonlyArray<IField>): number {\n\tlet wordMulti = 1\n\treturn (\n\t\tword.reduce((sum, field) => {\n\t\t\tconst tile = field.tile\n\t\t\tlet tileScore = 0\n\t\t\tif (tile) {\n\t\t\t\ttileScore = tile.score\n\t\t\t\tif (tile.isOwned) {\n\t\t\t\t\tswitch (field.kind) {\n\t\t\t\t\t\tcase FieldKind.DoubleLetter:\n\t\t\t\t\t\t\ttileScore *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleLetter:\n\t\t\t\t\t\t\ttileScore *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.Start:\n\t\t\t\t\t\tcase FieldKind.DoubleWord:\n\t\t\t\t\t\t\twordMulti *= 2\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tcase FieldKind.TripleWord:\n\t\t\t\t\t\t\twordMulti *= 3\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sum + tileScore\n\t\t}, 0) * wordMulti\n\t)\n}\n","import { IField } from '../model/Field'\nimport { getValidAndInvalidWords } from './getValidAndInvalidWords'\nimport { getWordScore } from './getWordScore'\n\nexport function getMoveScore(board: ReadonlyArray<IField>): number {\n\tlet score = 0\n\tfor (let word of getValidAndInvalidWords(board).valid) {\n\t\tscore += getWordScore(word)\n\t}\n\treturn score\n}\n","import { isUndefinedOrNull } from 'illa/Type'\nimport memoizee from 'memoizee'\nimport { CENTER_FIELD_INDEX } from '../model/Constants'\nimport { IField } from '../model/Field'\nimport { FieldKind } from '../model/FieldKind'\nimport { MoveError } from '../model/MoveError'\nimport { getAllOwnedWords } from './getAllOwnedWords'\nimport { getWordInfo } from './getWordInfo'\nimport { getWordString } from './getWordString'\nimport { isWordStringValid } from './isWordStringValid'\n\nexport const validateMove = memoizee(\n\t(board: ReadonlyArray<IField>) => {\n\t\tconst { firstFieldIndex, lastFieldIndex, direction } = getWordInfo(\n\t\t\tboard,\n\t\t)\n\t\tconst errors: Set<MoveError> = new Set()\n\t\tif (isUndefinedOrNull(firstFieldIndex)) {\n\t\t\terrors.add(MoveError.NoTile)\n\t\t}\n\t\tif (errors.size === 0) {\n\t\t\tif (firstFieldIndex === lastFieldIndex) {\n\t\t\t\terrors.add(MoveError.OneTile)\n\t\t\t}\n\t\t\tif (errors.size === 0) {\n\t\t\t\tif (isUndefinedOrNull(direction)) {\n\t\t\t\t\terrors.add(MoveError.NoDirection)\n\t\t\t\t}\n\t\t\t\tif (errors.size === 0) {\n\t\t\t\t\tlet touchesStart = false\n\t\t\t\t\tlet touchesUnowned = false\n\t\t\t\t\tconst words = getAllOwnedWords(board)\n\t\t\t\t\tfor (const word of words) {\n\t\t\t\t\t\tif (!isWordStringValid(getWordString(word))) {\n\t\t\t\t\t\t\terrors.add(MoveError.InvalidWord)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const field of word) {\n\t\t\t\t\t\t\tif (field.kind === FieldKind.Start) {\n\t\t\t\t\t\t\t\ttouchesStart = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (field.tile && !field.tile.isOwned) {\n\t\t\t\t\t\t\t\ttouchesUnowned = true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isUndefinedOrNull(board[CENTER_FIELD_INDEX].tile)) {\n\t\t\t\t\t\terrors.add(MoveError.NoStart)\n\t\t\t\t\t} else if (!touchesUnowned && !touchesStart) {\n\t\t\t\t\t\terrors.add(MoveError.NoConnection)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn errors\n\t},\n\t{ max: 1 },\n)\n","import { get } from 'illa/FunctionUtil'\nimport * as React from 'react'\nimport { useContext } from 'react'\nimport { collectTiles } from '../fun/collectTiles'\nimport { disownTiles } from '../fun/disownTiles'\nimport { fillHand } from '../fun/fillHand'\nimport { getMoveScore } from '../fun/getMoveScore'\nimport { nextPlayer } from '../fun/nextPlayer'\nimport { score } from '../fun/score'\nimport { setJokerLetter } from '../fun/setJokerLetter'\nimport { setMode } from '../fun/setMode'\nimport { validateMove } from '../fun/validateMove'\nimport { Mode } from '../model/Mode'\nimport letters from '../res/letters.json'\nimport { SetStateContext, StateContext } from './ContextProvider'\nimport './PlaceTileButtonsComp.css'\n\nexport function PlaceTileButtonsComp() {\n\tconst { board, fieldIndex, bag } = useContext(StateContext)\n\tconst setState = useContext(SetStateContext)\n\tconst moveScore = getMoveScore(board)\n\treturn (\n\t\t<div className='buttons'>\n\t\t\t<button\n\t\t\t\tdisabled={validateMove(board).size > 0}\n\t\t\t\tonClick={e => {\n\t\t\t\t\tsetState(score())\n\t\t\t\t\tsetState(disownTiles())\n\t\t\t\t\tsetState(fillHand())\n\t\t\t\t\tsetState(nextPlayer())\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{`Oké`}\n\t\t\t\t{moveScore > 0 && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{`: `}\n\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\t{moveScore}\n\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t</small>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tonClick={e => {\n\t\t\t\t\tsetState(collectTiles())\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{`Szedd össze`}\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tdisabled={bag.length < 7}\n\t\t\t\tonClick={e => {\n\t\t\t\t\tsetState(collectTiles())\n\t\t\t\t\tsetState(setMode(Mode.ReplaceTiles))\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{`Csere`}\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tonClick={e => {\n\t\t\t\t\tsetState(collectTiles())\n\t\t\t\t\tsetState(nextPlayer())\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{`Kihagyom`}\n\t\t\t</button>\n\t\t\t{get(() => board[fieldIndex!].tile!.isJoker) && (\n\t\t\t\t<select\n\t\t\t\t\tvalue={board[fieldIndex!].tile!.letter}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\tsetState(setJokerLetter(e.target.value))\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{letters.map((letter, index) => (\n\t\t\t\t\t\t<option key={index}>{letter.letter}</option>\n\t\t\t\t\t))}\n\t\t\t\t</select>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n","import { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\nimport { getMoveScore } from './getMoveScore'\n\nexport function score(): TSetStateReducer<IState> {\n\treturn ({ players, playerIndex, board }) => {\n\t\tconst player = players[playerIndex!]\n\t\treturn {\n\t\t\tplayers: [\n\t\t\t\t...players.slice(0, playerIndex!),\n\t\t\t\t{ ...player, score: player.score + getMoveScore(board) },\n\t\t\t\t...players.slice(playerIndex! + 1),\n\t\t\t],\n\t\t}\n\t}\n}\n","import { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport function disownTiles(): TSetStateReducer<IState> {\n\treturn ({ board }) => ({\n\t\tboard: board.map(field =>\n\t\t\tfield.tile && field.tile.isOwned\n\t\t\t\t? { ...field, tile: { ...field.tile, isOwned: false } }\n\t\t\t\t: field,\n\t\t),\n\t})\n}\n","import { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\n\nexport function setJokerLetter(letter: string): TSetStateReducer<IState> {\n\treturn ({ board, fieldIndex }) => {\n\t\tif (!fieldIndex) return {}\n\t\tconst field = board[fieldIndex]\n\t\tconst tile = field.tile\n\t\tif (!tile) return {}\n\t\treturn {\n\t\t\tfieldIndex: null,\n\t\t\tboard: [\n\t\t\t\t...board.slice(0, fieldIndex),\n\t\t\t\t{ ...field, tile: { ...tile, letter } },\n\t\t\t\t...board.slice(fieldIndex + 1),\n\t\t\t],\n\t\t}\n\t}\n}\n","import * as React from 'react'\nimport { useContext } from 'react'\nimport { SetStateContext, StateContext } from './ContextProvider'\nimport './PlayersComp.css'\n\nexport function PlayersComp() {\n\tconst c = useContext(StateContext)\n\tconst setState = useContext(SetStateContext)\n\treturn (\n\t\t<table className='players'>\n\t\t\t<tbody>\n\t\t\t\t{c.players.map((player, playerIndex) => (\n\t\t\t\t\t<tr className='player' key={playerIndex}>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName='player-name-button'\n\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\tconst name = prompt(`Mi a neved?`)\n\t\t\t\t\t\t\t\t\tif (name && name.trim()) {\n\t\t\t\t\t\t\t\t\t\tsetState(({ players }) => ({\n\t\t\t\t\t\t\t\t\t\t\tplayers: players.map(\n\t\t\t\t\t\t\t\t\t\t\t\t(player, aPlayerIndex) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\taPlayerIndex === playerIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...player,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: name.trim(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: player,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{player.name}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>{playerIndex === c.playerIndex && `•`}</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t{player.score}\n\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n}\n","import * as React from 'react'\nimport { useContext } from 'react'\nimport { fillHand } from '../fun/fillHand'\nimport { nextPlayer } from '../fun/nextPlayer'\nimport { setMode } from '../fun/setMode'\nimport { Mode } from '../model/Mode'\nimport { ITile } from '../model/Tile'\nimport { SetStateContext, StateContext } from './ContextProvider'\n\nexport function ReplaceTilesButtonsComp() {\n\tconst { hands, playerIndex, handIndicesToReplace } = useContext(\n\t\tStateContext,\n\t)\n\tconst setState = useContext(SetStateContext)\n\treturn (\n\t\t<>\n\t\t\t<button\n\t\t\t\tonClick={e => {\n\t\t\t\t\tconst hand = hands[playerIndex!]\n\t\t\t\t\tconst tilesToReplace = hand.filter(\n\t\t\t\t\t\t(tile, aHandIndex) => handIndicesToReplace[aHandIndex],\n\t\t\t\t\t) as ITile[]\n\t\t\t\t\tsetState(\n\t\t\t\t\t\t({ hands, playerIndex, handIndicesToReplace }) => ({\n\t\t\t\t\t\t\thands: hands.map((hand, aPlayerIndex) =>\n\t\t\t\t\t\t\t\taPlayerIndex === playerIndex\n\t\t\t\t\t\t\t\t\t? hand.map((tile, aHandIndex) =>\n\t\t\t\t\t\t\t\t\t\t\thandIndicesToReplace[aHandIndex]\n\t\t\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t\t\t: tile,\n\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t: hand,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\thandIndicesToReplace: handIndicesToReplace.map(\n\t\t\t\t\t\t\t\t_ => false,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t\tsetState(fillHand())\n\t\t\t\t\tsetState(({ bag }) => ({\n\t\t\t\t\t\tbag: bag.concat(tilesToReplace),\n\t\t\t\t\t}))\n\t\t\t\t\tsetState(setMode(Mode.PlaceTile))\n\t\t\t\t\tsetState(nextPlayer())\n\t\t\t\t}}\n\t\t\t>{`Csere`}</button>\n\t\t\t<button\n\t\t\t\tonClick={e => {\n\t\t\t\t\tsetState(({ handIndicesToReplace }) => ({\n\t\t\t\t\t\thandIndicesToReplace: handIndicesToReplace.map(\n\t\t\t\t\t\t\t_ => false,\n\t\t\t\t\t\t),\n\t\t\t\t\t}))\n\t\t\t\t\tsetState(setMode(Mode.PlaceTile))\n\t\t\t\t}}\n\t\t\t>{`Mégse`}</button>\n\t\t</>\n\t)\n}\n","import * as React from 'react'\nimport { useContext } from 'react'\nimport { getValidAndInvalidWords } from '../fun/getValidAndInvalidWords'\nimport { getWordScore } from '../fun/getWordScore'\nimport { getWordString } from '../fun/getWordString'\nimport { validateMove } from '../fun/validateMove'\nimport { MoveError } from '../model/MoveError'\nimport { StateContext } from './ContextProvider'\nimport './WordInfoComp.css'\n\nexport function WordInfoComp() {\n\tconst { board } = useContext(StateContext)\n\tconst { valid, invalid } = getValidAndInvalidWords(board)\n\tconst errors = validateMove(board)\n\treturn (\n\t\t<div className='word-info'>\n\t\t\t{valid.length > 0 && (\n\t\t\t\t<div>\n\t\t\t\t\t{`Érvényes szavak:`}\n\t\t\t\t\t{` `}\n\t\t\t\t\t{valid.map((word, index) => {\n\t\t\t\t\t\tconst wordString = getWordString(word)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t{index > 0 && <>{`, `}</>}\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tclassName='valid-word'\n\t\t\t\t\t\t\t\t\thref={`http://ertelmezo.oszk.hu/kereses.php?csakcimben=on&kereses=${encodeURIComponent(\n\t\t\t\t\t\t\t\t\t\t`\"${wordString}\"`,\n\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{wordString.replace(' ', ' ')}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t<span className='word-score'>\n\t\t\t\t\t\t\t\t\t{getWordScore(word)}\n\t\t\t\t\t\t\t\t\t{` `}\n\t\t\t\t\t\t\t\t\t{`pont`}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{invalid.length > 0 && (\n\t\t\t\t<div>\n\t\t\t\t\t{`Érvénytelen szavak:`}\n\t\t\t\t\t{` `}\n\t\t\t\t\t{invalid.map((word, index) => {\n\t\t\t\t\t\tconst wordString = getWordString(word)\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={index}>\n\t\t\t\t\t\t\t\t{index > 0 && <>{`, `}</>}\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tclassName='invalid-word'\n\t\t\t\t\t\t\t\t\thref={`http://ertelmezo.oszk.hu/kereses.php?csakcimben=on&kereses=${encodeURIComponent(\n\t\t\t\t\t\t\t\t\t\t`\"${wordString}\"`,\n\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{wordString.replace(' ', ' ')}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{errors.size > 0 && (\n\t\t\t\t<div>\n\t\t\t\t\t{Array.from(errors)\n\t\t\t\t\t\t.map(e => {\n\t\t\t\t\t\t\tswitch (e) {\n\t\t\t\t\t\t\t\tcase MoveError.InvalidWord:\n\t\t\t\t\t\t\t\t\treturn `Van egy érvénytelen szavad!`\n\t\t\t\t\t\t\t\tcase MoveError.NoConnection:\n\t\t\t\t\t\t\t\t\treturn `Kapcsolódnod kell a meglévő lapkákhoz!`\n\t\t\t\t\t\t\t\tcase MoveError.NoDirection:\n\t\t\t\t\t\t\t\t\treturn `Egy vonalba tedd a lapkáid, hézag nélkül!`\n\t\t\t\t\t\t\t\tcase MoveError.NoStart:\n\t\t\t\t\t\t\t\t\treturn `Érintened kell a Start mezőt!`\n\t\t\t\t\t\t\t\tcase MoveError.NoTile:\n\t\t\t\t\t\t\t\t\treturn `Tégy le egy lapkát!`\n\t\t\t\t\t\t\t\tcase MoveError.OneTile:\n\t\t\t\t\t\t\t\t\treturn `Egy érvényes szóhoz legalább két lapka kell!`\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\treturn `[ppy6tx]: ${e}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map((e, index) => (\n\t\t\t\t\t\t\t<div key={index}>{e}</div>\n\t\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'normalize.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppComp } from './comp/AppComp'\nimport { ContextProvider } from './comp/ContextProvider'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\t<ContextProvider>\n\t\t<AppComp />\n\t</ContextProvider>,\n\tdocument.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import * as React from 'react'\nimport { useContext } from 'react'\nimport { fillHand } from '../fun/fillHand'\nimport { nextPlayer } from '../fun/nextPlayer'\nimport { resetGame } from '../fun/resetGame'\nimport { setMode } from '../fun/setMode'\nimport { Mode } from '../model/Mode'\nimport './AppComp.css'\nimport { BagComp } from './BagComp'\nimport { BoardComp } from './BoardComp'\nimport { SetStateContext, StateContext } from './ContextProvider'\nimport { HandComp } from './HandComp'\nimport { PlaceTileButtonsComp } from './PlaceTileButtonsComp'\nimport { PlayersComp } from './PlayersComp'\nimport { ReplaceTilesButtonsComp } from './ReplaceTilesButtonsComp'\nimport { WordInfoComp } from './WordInfoComp'\n\nexport function AppComp() {\n\tconst { mode } = useContext(StateContext)\n\tconst setState = useContext(SetStateContext)\n\treturn (\n\t\t<>\n\t\t\t<BoardComp />\n\t\t\t<div className='tools'>\n\t\t\t\t{mode === Mode.NotStarted && (\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\tsetState(resetGame())\n\t\t\t\t\t\t\tsetState(nextPlayer())\n\t\t\t\t\t\t\tsetState(fillHand())\n\t\t\t\t\t\t\tsetState(nextPlayer())\n\t\t\t\t\t\t\tsetState(fillHand())\n\t\t\t\t\t\t\tsetState(nextPlayer())\n\t\t\t\t\t\t\tsetState(setMode(Mode.PlaceTile))\n\t\t\t\t\t\t}}\n\t\t\t\t\t>{`Új játék`}</button>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.PlaceTile && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<PlayersComp />\n\t\t\t\t\t\t<BagComp />\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t<WordInfoComp />\n\t\t\t\t\t\t<PlaceTileButtonsComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.ReplaceTiles && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<HandComp />\n\t\t\t\t\t\t<ReplaceTilesButtonsComp />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{mode === Mode.Finished && <></>}\n\t\t\t</div>\n\t\t</>\n\t)\n}\n","import { IState } from '../model/State'\nimport { TSetStateReducer } from '../model/TSetStateReducer'\nimport { createState } from './createState'\nexport function resetGame(): TSetStateReducer<IState> {\n\treturn state => ({\n\t\t...createState(),\n\t})\n}\n"],"sourceRoot":""}